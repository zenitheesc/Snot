
Caurin_Tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a528  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000904  0800a6b8  0800a6b8  0001a6b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afbc  0800afbc  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800afbc  0800afbc  0001afbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800afc4  0800afc4  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afc4  0800afc4  0001afc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800afc8  0800afc8  0001afc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800afcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004bc  20000204  0800b1d0  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c0  0800b1d0  000206c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   000198da  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fc6  00000000  00000000  00039b0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe8  00000000  00000000  0003cad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb0  00000000  00000000  0003dac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000291e6  00000000  00000000  0003e970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013cdb  00000000  00000000  00067b56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1b56  00000000  00000000  0007b831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016d387  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052a0  00000000  00000000  0016d3dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000204 	.word	0x20000204
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a6a0 	.word	0x0800a6a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000208 	.word	0x20000208
 80001cc:	0800a6a0 	.word	0x0800a6a0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <SPI_read_register>:
 *	Criado em: 18 jan 2020
 */

#include "STM32_SPI.h"

HAL_StatusTypeDef SPI_read_register(SPI_HandleTypeDef spi_bus, GPIO_TypeDef* ss_gpio_port, uint16_t ss_pin, uint8_t reg_addr, uint8_t* pvalue, uint32_t timeout){
 8000ea0:	b084      	sub	sp, #16
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	f107 0c10 	add.w	ip, r7, #16
 8000eac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_StatusTypeDef status = HAL_OK;																// status of the execution (checks if any error occurs)	
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	71fb      	strb	r3, [r7, #7]
	reg_addr = reg_addr & 0x7f;
 8000eb4:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8000eb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c

	/* Changes SS pin to enable comunication */
	HAL_GPIO_WritePin(ss_gpio_port, ss_pin, GPIO_PIN_RESET);
 8000ec2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	4619      	mov	r1, r3
 8000eca:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000ecc:	f003 f9f4 	bl	80042b8 <HAL_GPIO_WritePin>

	/* Writes Register Address in SPI */
	status = HAL_SPI_Transmit (&spi_bus, &reg_addr, 1, timeout);
 8000ed0:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8000ed4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000ed8:	2201      	movs	r2, #1
 8000eda:	f107 0010 	add.w	r0, r7, #16
 8000ede:	f004 fde8 	bl	8005ab2 <HAL_SPI_Transmit>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
	RETURN_ON_ERROR(status);
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <SPI_read_register+0x50>
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	e017      	b.n	8000f20 <SPI_read_register+0x80>

	/* Reads Register Value from SPI */
	status = HAL_SPI_Receive (&spi_bus, pvalue, 1, timeout);
 8000ef0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8000efa:	f107 0010 	add.w	r0, r7, #16
 8000efe:	f004 ff46 	bl	8005d8e <HAL_SPI_Receive>
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
	RETURN_ON_ERROR(status);
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <SPI_read_register+0x70>
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	e007      	b.n	8000f20 <SPI_read_register+0x80>

	/* Changes SS pin to disable comunication */
	HAL_GPIO_WritePin(ss_gpio_port, ss_pin, GPIO_PIN_SET);
 8000f10:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8000f14:	2201      	movs	r2, #1
 8000f16:	4619      	mov	r1, r3
 8000f18:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000f1a:	f003 f9cd 	bl	80042b8 <HAL_GPIO_WritePin>
	return status;
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f2a:	b004      	add	sp, #16
 8000f2c:	4770      	bx	lr

08000f2e <SPI_write_register>:
	/* Changes SS pin to disable comunication */
	HAL_GPIO_WritePin(ss_gpio_port, ss_pin, GPIO_PIN_SET);
	return status;
}

HAL_StatusTypeDef SPI_write_register(SPI_HandleTypeDef spi_bus, GPIO_TypeDef* ss_gpio_port, uint16_t ss_pin, uint8_t reg_addr, uint8_t value, uint32_t timeout){
 8000f2e:	b084      	sub	sp, #16
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	f107 0c10 	add.w	ip, r7, #16
 8000f3a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_StatusTypeDef status = HAL_OK;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	71fb      	strb	r3, [r7, #7]
	uint8_t sent_data[2];
	sent_data[0] = reg_addr | 0x80;
 8000f42:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8000f46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	713b      	strb	r3, [r7, #4]
	sent_data[1] = value;
 8000f4e:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8000f52:	717b      	strb	r3, [r7, #5]

	/* Changes SS pin to enable comunication */
	HAL_GPIO_WritePin(ss_gpio_port, ss_pin, GPIO_PIN_RESET);
 8000f54:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8000f58:	2200      	movs	r2, #0
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000f5e:	f003 f9ab 	bl	80042b8 <HAL_GPIO_WritePin>

	/* Writes in Register via SPI */
	status = HAL_SPI_Transmit(&spi_bus, sent_data, 2, timeout);
 8000f62:	1d39      	adds	r1, r7, #4
 8000f64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f68:	2202      	movs	r2, #2
 8000f6a:	f107 0010 	add.w	r0, r7, #16
 8000f6e:	f004 fda0 	bl	8005ab2 <HAL_SPI_Transmit>
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
	RETURN_ON_ERROR(status);
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <SPI_write_register+0x52>
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	e007      	b.n	8000f90 <SPI_write_register+0x62>

	/* Changes SS pin to disable comunication */
	HAL_GPIO_WritePin(ss_gpio_port, ss_pin, GPIO_PIN_SET);
 8000f80:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8000f84:	2201      	movs	r2, #1
 8000f86:	4619      	mov	r1, r3
 8000f88:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000f8a:	f003 f995 	bl	80042b8 <HAL_GPIO_WritePin>
	return status;
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f9a:	b004      	add	sp, #16
 8000f9c:	4770      	bx	lr

08000f9e <SX127X_Reset>:
	RETURN_ON_ERROR(status);

	return status;
}

HAL_StatusTypeDef SX127X_Reset(SX127X_t *SX127X) {
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b084      	sub	sp, #16
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(SX127X->reset_gpio_port, SX127X->reset_pin, GPIO_PIN_RESET);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	f003 f97e 	bl	80042b8 <HAL_GPIO_WritePin>
	HAL_Delay(30);
 8000fbc:	201e      	movs	r0, #30
 8000fbe:	f002 fe1d 	bl	8003bfc <HAL_Delay>
	HAL_GPIO_WritePin(SX127X->reset_gpio_port, SX127X->reset_pin, GPIO_PIN_SET);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8000fcc:	2201      	movs	r2, #1
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f003 f972 	bl	80042b8 <HAL_GPIO_WritePin>
	HAL_Delay(30);
 8000fd4:	201e      	movs	r0, #30
 8000fd6:	f002 fe11 	bl	8003bfc <HAL_Delay>
	return status;
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <SX127X_set_op_mode>:

HAL_StatusTypeDef SX127X_set_op_mode(SX127X_t *SX127X, OperationMode_t mode) {
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b09f      	sub	sp, #124	; 0x7c
 8000fe8:	af1a      	add	r7, sp, #104	; 0x68
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef status = HAL_OK;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	73fb      	strb	r3, [r7, #15]
	uint8_t read_value;

	// Used to preserve existing bits that should not be changed.
	status = READ_REG(SX127X_REG_OP_MODE, &read_value);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8000ffe:	687c      	ldr	r4, [r7, #4]
 8001000:	2164      	movs	r1, #100	; 0x64
 8001002:	9119      	str	r1, [sp, #100]	; 0x64
 8001004:	f107 010e 	add.w	r1, r7, #14
 8001008:	9118      	str	r1, [sp, #96]	; 0x60
 800100a:	2101      	movs	r1, #1
 800100c:	9117      	str	r1, [sp, #92]	; 0x5c
 800100e:	9216      	str	r2, [sp, #88]	; 0x58
 8001010:	9315      	str	r3, [sp, #84]	; 0x54
 8001012:	4668      	mov	r0, sp
 8001014:	f104 0310 	add.w	r3, r4, #16
 8001018:	2254      	movs	r2, #84	; 0x54
 800101a:	4619      	mov	r1, r3
 800101c:	f006 fd84 	bl	8007b28 <memcpy>
 8001020:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001024:	f7ff ff3c 	bl	8000ea0 <SPI_read_register>
 8001028:	4603      	mov	r3, r0
 800102a:	73fb      	strb	r3, [r7, #15]
	RETURN_ON_ERROR(status);
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <SX127X_set_op_mode+0x52>
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	e060      	b.n	80010f8 <SX127X_set_op_mode+0x114>

	// If the radio is in LoRa and you want to put it in RX mode (cont or single) it needs to be in standby or sleep first.
	if((SX127X->Current_Modulation == LORA_Modulation) && (mode == RX || mode == RXSINGLE)){
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800103c:	2b80      	cmp	r3, #128	; 0x80
 800103e:	d12d      	bne.n	800109c <SX127X_set_op_mode+0xb8>
 8001040:	78fb      	ldrb	r3, [r7, #3]
 8001042:	2b05      	cmp	r3, #5
 8001044:	d002      	beq.n	800104c <SX127X_set_op_mode+0x68>
 8001046:	78fb      	ldrb	r3, [r7, #3]
 8001048:	2b06      	cmp	r3, #6
 800104a:	d127      	bne.n	800109c <SX127X_set_op_mode+0xb8>
		status = WRITE_REG(SX127X_REG_OP_MODE, ((read_value & SX127X_OP_MODE_MASK) | STANDBY));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8001056:	7bb9      	ldrb	r1, [r7, #14]
 8001058:	b249      	sxtb	r1, r1
 800105a:	f021 0107 	bic.w	r1, r1, #7
 800105e:	b249      	sxtb	r1, r1
 8001060:	f041 0101 	orr.w	r1, r1, #1
 8001064:	b249      	sxtb	r1, r1
 8001066:	b2c9      	uxtb	r1, r1
 8001068:	687c      	ldr	r4, [r7, #4]
 800106a:	2064      	movs	r0, #100	; 0x64
 800106c:	9019      	str	r0, [sp, #100]	; 0x64
 800106e:	9118      	str	r1, [sp, #96]	; 0x60
 8001070:	2101      	movs	r1, #1
 8001072:	9117      	str	r1, [sp, #92]	; 0x5c
 8001074:	9216      	str	r2, [sp, #88]	; 0x58
 8001076:	9315      	str	r3, [sp, #84]	; 0x54
 8001078:	4668      	mov	r0, sp
 800107a:	f104 0310 	add.w	r3, r4, #16
 800107e:	2254      	movs	r2, #84	; 0x54
 8001080:	4619      	mov	r1, r3
 8001082:	f006 fd51 	bl	8007b28 <memcpy>
 8001086:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800108a:	f7ff ff50 	bl	8000f2e <SPI_write_register>
 800108e:	4603      	mov	r3, r0
 8001090:	73fb      	strb	r3, [r7, #15]
		RETURN_ON_ERROR(status);
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <SX127X_set_op_mode+0xb8>
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	e02d      	b.n	80010f8 <SX127X_set_op_mode+0x114>
	}

	status = WRITE_REG(SX127X_REG_OP_MODE, ((read_value & SX127X_OP_MODE_MASK) | mode));
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 80010a6:	7bb9      	ldrb	r1, [r7, #14]
 80010a8:	b249      	sxtb	r1, r1
 80010aa:	f021 0107 	bic.w	r1, r1, #7
 80010ae:	b248      	sxtb	r0, r1
 80010b0:	f997 1003 	ldrsb.w	r1, [r7, #3]
 80010b4:	4301      	orrs	r1, r0
 80010b6:	b249      	sxtb	r1, r1
 80010b8:	b2c9      	uxtb	r1, r1
 80010ba:	687c      	ldr	r4, [r7, #4]
 80010bc:	2064      	movs	r0, #100	; 0x64
 80010be:	9019      	str	r0, [sp, #100]	; 0x64
 80010c0:	9118      	str	r1, [sp, #96]	; 0x60
 80010c2:	2101      	movs	r1, #1
 80010c4:	9117      	str	r1, [sp, #92]	; 0x5c
 80010c6:	9216      	str	r2, [sp, #88]	; 0x58
 80010c8:	9315      	str	r3, [sp, #84]	; 0x54
 80010ca:	4668      	mov	r0, sp
 80010cc:	f104 0310 	add.w	r3, r4, #16
 80010d0:	2254      	movs	r2, #84	; 0x54
 80010d2:	4619      	mov	r1, r3
 80010d4:	f006 fd28 	bl	8007b28 <memcpy>
 80010d8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010dc:	f7ff ff27 	bl	8000f2e <SPI_write_register>
 80010e0:	4603      	mov	r3, r0
 80010e2:	73fb      	strb	r3, [r7, #15]
	RETURN_ON_ERROR(status);
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <SX127X_set_op_mode+0x10a>
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
 80010ec:	e004      	b.n	80010f8 <SX127X_set_op_mode+0x114>

	// Now we update the OpMode in the main radio object.
	SX127X->Current_Op_Mode = mode;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	78fa      	ldrb	r2, [r7, #3]
 80010f2:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73

	return status;
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd90      	pop	{r4, r7, pc}

08001100 <SX127X_set_modulation>:

HAL_StatusTypeDef SX127X_set_modulation(SX127X_t *SX127X, Modulation_t modulation) {
 8001100:	b590      	push	{r4, r7, lr}
 8001102:	b09f      	sub	sp, #124	; 0x7c
 8001104:	af1a      	add	r7, sp, #104	; 0x68
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef status = HAL_OK;
 800110c:	2300      	movs	r3, #0
 800110e:	73fb      	strb	r3, [r7, #15]
	uint8_t previous_op_mode = 0xFF; // The initial value is used to indicate that a change has been made further down.
 8001110:	23ff      	movs	r3, #255	; 0xff
 8001112:	73bb      	strb	r3, [r7, #14]
	uint8_t write_value = 0x00;
 8001114:	2300      	movs	r3, #0
 8001116:	737b      	strb	r3, [r7, #13]
	uint8_t read_value = 0x00;
 8001118:	2300      	movs	r3, #0
 800111a:	733b      	strb	r3, [r7, #12]

	// To change between FSK/OOK and LoRa the module must be in sleep mode:
	if(SX127X->Current_Op_Mode != SLEEP){
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8001122:	2b00      	cmp	r3, #0
 8001124:	d00e      	beq.n	8001144 <SX127X_set_modulation+0x44>
		previous_op_mode = SX127X->Current_Op_Mode;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 800112c:	73bb      	strb	r3, [r7, #14]
		status = SX127X_set_op_mode(SX127X, SLEEP);
 800112e:	2100      	movs	r1, #0
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff ff57 	bl	8000fe4 <SX127X_set_op_mode>
 8001136:	4603      	mov	r3, r0
 8001138:	73fb      	strb	r3, [r7, #15]
		RETURN_ON_ERROR(status);
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <SX127X_set_modulation+0x44>
 8001140:	7bfb      	ldrb	r3, [r7, #15]
 8001142:	e066      	b.n	8001212 <SX127X_set_modulation+0x112>
	}

	// Used to preserve existing bits that should not be changed.
	status = READ_REG(SX127X_REG_OP_MODE, &read_value);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 800114e:	687c      	ldr	r4, [r7, #4]
 8001150:	2164      	movs	r1, #100	; 0x64
 8001152:	9119      	str	r1, [sp, #100]	; 0x64
 8001154:	f107 010c 	add.w	r1, r7, #12
 8001158:	9118      	str	r1, [sp, #96]	; 0x60
 800115a:	2101      	movs	r1, #1
 800115c:	9117      	str	r1, [sp, #92]	; 0x5c
 800115e:	9216      	str	r2, [sp, #88]	; 0x58
 8001160:	9315      	str	r3, [sp, #84]	; 0x54
 8001162:	4668      	mov	r0, sp
 8001164:	f104 0310 	add.w	r3, r4, #16
 8001168:	2254      	movs	r2, #84	; 0x54
 800116a:	4619      	mov	r1, r3
 800116c:	f006 fcdc 	bl	8007b28 <memcpy>
 8001170:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001174:	f7ff fe94 	bl	8000ea0 <SPI_read_register>
 8001178:	4603      	mov	r3, r0
 800117a:	73fb      	strb	r3, [r7, #15]
	RETURN_ON_ERROR(status);
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <SX127X_set_modulation+0x86>
 8001182:	7bfb      	ldrb	r3, [r7, #15]
 8001184:	e045      	b.n	8001212 <SX127X_set_modulation+0x112>

	if(modulation == FSK_Modulation){ // Replace by if(modulation == FSK_Modulation || modulation == OOK_Modulation) when adding OOK
 8001186:	78fb      	ldrb	r3, [r7, #3]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d10a      	bne.n	80011a2 <SX127X_set_modulation+0xa2>
		// Change the three bits responsible for FSK/OOK configuration
		write_value = ((read_value & SX127X_FSK_OOK_MODE_MASK) | modulation);
 800118c:	7b3b      	ldrb	r3, [r7, #12]
 800118e:	b25b      	sxtb	r3, r3
 8001190:	f003 031f 	and.w	r3, r3, #31
 8001194:	b25a      	sxtb	r2, r3
 8001196:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800119a:	4313      	orrs	r3, r2
 800119c:	b25b      	sxtb	r3, r3
 800119e:	737b      	strb	r3, [r7, #13]
 80011a0:	e00c      	b.n	80011bc <SX127X_set_modulation+0xbc>
	}else if(modulation == LORA_Modulation){ // Remove this other if when adding OOK, bc there will be no other options
 80011a2:	78fb      	ldrb	r3, [r7, #3]
 80011a4:	2b80      	cmp	r3, #128	; 0x80
 80011a6:	d109      	bne.n	80011bc <SX127X_set_modulation+0xbc>
		write_value = ((read_value & SX127X_LORA_MODE_MASK) | modulation);
 80011a8:	7b3b      	ldrb	r3, [r7, #12]
 80011aa:	b25b      	sxtb	r3, r3
 80011ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011b0:	b25a      	sxtb	r2, r3
 80011b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	b25b      	sxtb	r3, r3
 80011ba:	737b      	strb	r3, [r7, #13]
	}

	status = WRITE_REG(SX127X_REG_OP_MODE, write_value);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 80011c6:	687c      	ldr	r4, [r7, #4]
 80011c8:	2164      	movs	r1, #100	; 0x64
 80011ca:	9119      	str	r1, [sp, #100]	; 0x64
 80011cc:	7b79      	ldrb	r1, [r7, #13]
 80011ce:	9118      	str	r1, [sp, #96]	; 0x60
 80011d0:	2101      	movs	r1, #1
 80011d2:	9117      	str	r1, [sp, #92]	; 0x5c
 80011d4:	9216      	str	r2, [sp, #88]	; 0x58
 80011d6:	9315      	str	r3, [sp, #84]	; 0x54
 80011d8:	4668      	mov	r0, sp
 80011da:	f104 0310 	add.w	r3, r4, #16
 80011de:	2254      	movs	r2, #84	; 0x54
 80011e0:	4619      	mov	r1, r3
 80011e2:	f006 fca1 	bl	8007b28 <memcpy>
 80011e6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011ea:	f7ff fea0 	bl	8000f2e <SPI_write_register>
 80011ee:	4603      	mov	r3, r0
 80011f0:	73fb      	strb	r3, [r7, #15]
	RETURN_ON_ERROR(status);
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <SX127X_set_modulation+0xfc>
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
 80011fa:	e00a      	b.n	8001212 <SX127X_set_modulation+0x112>

	// We return to the original operation mode if it was modified:
	if(previous_op_mode != 0xFF){
 80011fc:	7bbb      	ldrb	r3, [r7, #14]
 80011fe:	2bff      	cmp	r3, #255	; 0xff
 8001200:	d006      	beq.n	8001210 <SX127X_set_modulation+0x110>
		status = SX127X_set_op_mode(SX127X, previous_op_mode);
 8001202:	7bbb      	ldrb	r3, [r7, #14]
 8001204:	4619      	mov	r1, r3
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff feec 	bl	8000fe4 <SX127X_set_op_mode>
 800120c:	4603      	mov	r3, r0
 800120e:	73fb      	strb	r3, [r7, #15]
	}

	return(status);
 8001210:	7bfb      	ldrb	r3, [r7, #15]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3714      	adds	r7, #20
 8001216:	46bd      	mov	sp, r7
 8001218:	bd90      	pop	{r4, r7, pc}
	...

0800121c <SX127X_set_frequency>:


HAL_StatusTypeDef SX127X_set_frequency(SX127X_t *SX127X, long frequency) {
 800121c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800121e:	b0a3      	sub	sp, #140	; 0x8c
 8001220:	af1a      	add	r7, sp, #104	; 0x68
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001226:	2300      	movs	r3, #0
 8001228:	77fb      	strb	r3, [r7, #31]
	uint8_t read_value 	= 0x00;
 800122a:	2300      	movs	r3, #0
 800122c:	73fb      	strb	r3, [r7, #15]
	uint8_t write_value = 0x00;
 800122e:	2300      	movs	r3, #0
 8001230:	77bb      	strb	r3, [r7, #30]
	uint8_t previous_op_mode = 0xFF;
 8001232:	23ff      	movs	r3, #255	; 0xff
 8001234:	777b      	strb	r3, [r7, #29]
	uint64_t frf = ((uint64_t) frequency << 19) / 32000000;
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	461a      	mov	r2, r3
 800123a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800123e:	1355      	asrs	r5, r2, #13
 8001240:	04d4      	lsls	r4, r2, #19
 8001242:	4a7c      	ldr	r2, [pc, #496]	; (8001434 <SX127X_set_frequency+0x218>)
 8001244:	f04f 0300 	mov.w	r3, #0
 8001248:	4620      	mov	r0, r4
 800124a:	4629      	mov	r1, r5
 800124c:	f7ff fcac 	bl	8000ba8 <__aeabi_uldivmod>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// To change the frequency the module must be in either sleep or standby mode:
	if(SX127X->Current_Op_Mode != SLEEP && SX127X->Current_Op_Mode != STANDBY){
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 800125e:	2b00      	cmp	r3, #0
 8001260:	d013      	beq.n	800128a <SX127X_set_frequency+0x6e>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8001268:	2b01      	cmp	r3, #1
 800126a:	d00e      	beq.n	800128a <SX127X_set_frequency+0x6e>
		previous_op_mode = SX127X->Current_Op_Mode;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8001272:	777b      	strb	r3, [r7, #29]
		status = SX127X_set_op_mode(SX127X, STANDBY);
 8001274:	2101      	movs	r1, #1
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff feb4 	bl	8000fe4 <SX127X_set_op_mode>
 800127c:	4603      	mov	r3, r0
 800127e:	77fb      	strb	r3, [r7, #31]
		RETURN_ON_ERROR(status);
 8001280:	7ffb      	ldrb	r3, [r7, #31]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <SX127X_set_frequency+0x6e>
 8001286:	7ffb      	ldrb	r3, [r7, #31]
 8001288:	e0cf      	b.n	800142a <SX127X_set_frequency+0x20e>
	}

	status = WRITE_REG(SX127X_REG_FRF_MSB, (uint8_t )(frf >> 16));
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f8b3 6068 	ldrh.w	r6, [r3, #104]	; 0x68
 8001294:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001298:	f04f 0200 	mov.w	r2, #0
 800129c:	f04f 0300 	mov.w	r3, #0
 80012a0:	0c02      	lsrs	r2, r0, #16
 80012a2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80012a6:	0c0b      	lsrs	r3, r1, #16
 80012a8:	b2d3      	uxtb	r3, r2
 80012aa:	687c      	ldr	r4, [r7, #4]
 80012ac:	2264      	movs	r2, #100	; 0x64
 80012ae:	9219      	str	r2, [sp, #100]	; 0x64
 80012b0:	9318      	str	r3, [sp, #96]	; 0x60
 80012b2:	2306      	movs	r3, #6
 80012b4:	9317      	str	r3, [sp, #92]	; 0x5c
 80012b6:	9616      	str	r6, [sp, #88]	; 0x58
 80012b8:	9515      	str	r5, [sp, #84]	; 0x54
 80012ba:	4668      	mov	r0, sp
 80012bc:	f104 0310 	add.w	r3, r4, #16
 80012c0:	2254      	movs	r2, #84	; 0x54
 80012c2:	4619      	mov	r1, r3
 80012c4:	f006 fc30 	bl	8007b28 <memcpy>
 80012c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80012cc:	f7ff fe2f 	bl	8000f2e <SPI_write_register>
 80012d0:	4603      	mov	r3, r0
 80012d2:	77fb      	strb	r3, [r7, #31]
	RETURN_ON_ERROR(status);
 80012d4:	7ffb      	ldrb	r3, [r7, #31]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <SX127X_set_frequency+0xc2>
 80012da:	7ffb      	ldrb	r3, [r7, #31]
 80012dc:	e0a5      	b.n	800142a <SX127X_set_frequency+0x20e>
	status = WRITE_REG(SX127X_REG_FRF_MID, (uint8_t )(frf >> 8));
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f8b3 6068 	ldrh.w	r6, [r3, #104]	; 0x68
 80012e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012ec:	f04f 0200 	mov.w	r2, #0
 80012f0:	f04f 0300 	mov.w	r3, #0
 80012f4:	0a02      	lsrs	r2, r0, #8
 80012f6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80012fa:	0a0b      	lsrs	r3, r1, #8
 80012fc:	b2d3      	uxtb	r3, r2
 80012fe:	687c      	ldr	r4, [r7, #4]
 8001300:	2264      	movs	r2, #100	; 0x64
 8001302:	9219      	str	r2, [sp, #100]	; 0x64
 8001304:	9318      	str	r3, [sp, #96]	; 0x60
 8001306:	2307      	movs	r3, #7
 8001308:	9317      	str	r3, [sp, #92]	; 0x5c
 800130a:	9616      	str	r6, [sp, #88]	; 0x58
 800130c:	9515      	str	r5, [sp, #84]	; 0x54
 800130e:	4668      	mov	r0, sp
 8001310:	f104 0310 	add.w	r3, r4, #16
 8001314:	2254      	movs	r2, #84	; 0x54
 8001316:	4619      	mov	r1, r3
 8001318:	f006 fc06 	bl	8007b28 <memcpy>
 800131c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001320:	f7ff fe05 	bl	8000f2e <SPI_write_register>
 8001324:	4603      	mov	r3, r0
 8001326:	77fb      	strb	r3, [r7, #31]
	RETURN_ON_ERROR(status);
 8001328:	7ffb      	ldrb	r3, [r7, #31]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <SX127X_set_frequency+0x116>
 800132e:	7ffb      	ldrb	r3, [r7, #31]
 8001330:	e07b      	b.n	800142a <SX127X_set_frequency+0x20e>
	status = WRITE_REG(SX127X_REG_FRF_LSB, (uint8_t )(frf));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 800133c:	7c39      	ldrb	r1, [r7, #16]
 800133e:	687c      	ldr	r4, [r7, #4]
 8001340:	2064      	movs	r0, #100	; 0x64
 8001342:	9019      	str	r0, [sp, #100]	; 0x64
 8001344:	9118      	str	r1, [sp, #96]	; 0x60
 8001346:	2108      	movs	r1, #8
 8001348:	9117      	str	r1, [sp, #92]	; 0x5c
 800134a:	9216      	str	r2, [sp, #88]	; 0x58
 800134c:	9315      	str	r3, [sp, #84]	; 0x54
 800134e:	4668      	mov	r0, sp
 8001350:	f104 0310 	add.w	r3, r4, #16
 8001354:	2254      	movs	r2, #84	; 0x54
 8001356:	4619      	mov	r1, r3
 8001358:	f006 fbe6 	bl	8007b28 <memcpy>
 800135c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001360:	f7ff fde5 	bl	8000f2e <SPI_write_register>
 8001364:	4603      	mov	r3, r0
 8001366:	77fb      	strb	r3, [r7, #31]
	RETURN_ON_ERROR(status);
 8001368:	7ffb      	ldrb	r3, [r7, #31]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <SX127X_set_frequency+0x156>
 800136e:	7ffb      	ldrb	r3, [r7, #31]
 8001370:	e05b      	b.n	800142a <SX127X_set_frequency+0x20e>

	// Save the value in the radio's struct:
	if(frequency != SX127X->Frequency) SX127X->Frequency = frequency;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001376:	683a      	ldr	r2, [r7, #0]
 8001378:	429a      	cmp	r2, r3
 800137a:	d002      	beq.n	8001382 <SX127X_set_frequency+0x166>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	683a      	ldr	r2, [r7, #0]
 8001380:	675a      	str	r2, [r3, #116]	; 0x74

	// Now we set the LowFrequencyModeOn bit on the Op Mode register according to the frequency.

	// Used to preserve existing bits that should not be changed.
	status = READ_REG(SX127X_REG_OP_MODE, &read_value);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 800138c:	687c      	ldr	r4, [r7, #4]
 800138e:	2164      	movs	r1, #100	; 0x64
 8001390:	9119      	str	r1, [sp, #100]	; 0x64
 8001392:	f107 010f 	add.w	r1, r7, #15
 8001396:	9118      	str	r1, [sp, #96]	; 0x60
 8001398:	2101      	movs	r1, #1
 800139a:	9117      	str	r1, [sp, #92]	; 0x5c
 800139c:	9216      	str	r2, [sp, #88]	; 0x58
 800139e:	9315      	str	r3, [sp, #84]	; 0x54
 80013a0:	4668      	mov	r0, sp
 80013a2:	f104 0310 	add.w	r3, r4, #16
 80013a6:	2254      	movs	r2, #84	; 0x54
 80013a8:	4619      	mov	r1, r3
 80013aa:	f006 fbbd 	bl	8007b28 <memcpy>
 80013ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013b2:	f7ff fd75 	bl	8000ea0 <SPI_read_register>
 80013b6:	4603      	mov	r3, r0
 80013b8:	77fb      	strb	r3, [r7, #31]
	RETURN_ON_ERROR(status);
 80013ba:	7ffb      	ldrb	r3, [r7, #31]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <SX127X_set_frequency+0x1a8>
 80013c0:	7ffb      	ldrb	r3, [r7, #31]
 80013c2:	e032      	b.n	800142a <SX127X_set_frequency+0x20e>

	if(frequency > 525E6){
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	4a1c      	ldr	r2, [pc, #112]	; (8001438 <SX127X_set_frequency+0x21c>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	dd04      	ble.n	80013d6 <SX127X_set_frequency+0x1ba>
		write_value = (read_value & SX127X_LOW_FREQUENCY_MODE_ON_MASK); // Reset the 4th bit
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	f023 0308 	bic.w	r3, r3, #8
 80013d2:	77bb      	strb	r3, [r7, #30]
 80013d4:	e003      	b.n	80013de <SX127X_set_frequency+0x1c2>
	}else{
		write_value = (read_value | ((uint8_t)~SX127X_LOW_FREQUENCY_MODE_ON_MASK)); // Set the 4th bit
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
 80013d8:	f043 0308 	orr.w	r3, r3, #8
 80013dc:	77bb      	strb	r3, [r7, #30]
	}

	status = WRITE_REG(SX127X_REG_OP_MODE, write_value);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 80013e8:	687c      	ldr	r4, [r7, #4]
 80013ea:	2164      	movs	r1, #100	; 0x64
 80013ec:	9119      	str	r1, [sp, #100]	; 0x64
 80013ee:	7fb9      	ldrb	r1, [r7, #30]
 80013f0:	9118      	str	r1, [sp, #96]	; 0x60
 80013f2:	2101      	movs	r1, #1
 80013f4:	9117      	str	r1, [sp, #92]	; 0x5c
 80013f6:	9216      	str	r2, [sp, #88]	; 0x58
 80013f8:	9315      	str	r3, [sp, #84]	; 0x54
 80013fa:	4668      	mov	r0, sp
 80013fc:	f104 0310 	add.w	r3, r4, #16
 8001400:	2254      	movs	r2, #84	; 0x54
 8001402:	4619      	mov	r1, r3
 8001404:	f006 fb90 	bl	8007b28 <memcpy>
 8001408:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800140c:	f7ff fd8f 	bl	8000f2e <SPI_write_register>
 8001410:	4603      	mov	r3, r0
 8001412:	77fb      	strb	r3, [r7, #31]

	// We return to the original operation mode if it was modified:
	if(previous_op_mode != 0xFF){
 8001414:	7f7b      	ldrb	r3, [r7, #29]
 8001416:	2bff      	cmp	r3, #255	; 0xff
 8001418:	d006      	beq.n	8001428 <SX127X_set_frequency+0x20c>
		status = SX127X_set_op_mode(SX127X, previous_op_mode);
 800141a:	7f7b      	ldrb	r3, [r7, #29]
 800141c:	4619      	mov	r1, r3
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff fde0 	bl	8000fe4 <SX127X_set_op_mode>
 8001424:	4603      	mov	r3, r0
 8001426:	77fb      	strb	r3, [r7, #31]
	}

	return(status);
 8001428:	7ffb      	ldrb	r3, [r7, #31]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3724      	adds	r7, #36	; 0x24
 800142e:	46bd      	mov	sp, r7
 8001430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001432:	bf00      	nop
 8001434:	01e84800 	.word	0x01e84800
 8001438:	1f4add40 	.word	0x1f4add40

0800143c <SX127X_set_pa_output>:
	return 0;

}


HAL_StatusTypeDef SX127X_set_pa_output(SX127X_t *SX127X, PaSelect_t PaSelect) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef status = HAL_OK;
 8001448:	2300      	movs	r3, #0
 800144a:	73fb      	strb	r3, [r7, #15]

	if(PaSelect == PA_BOOST_Pin){
 800144c:	78fb      	ldrb	r3, [r7, #3]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d107      	bne.n	8001462 <SX127X_set_pa_output+0x26>
		status = SX127X_set_bits(SX127X, SX127X_REG_PA_CONFIG, ~SX127X_PA_SELECT_MASK);
 8001452:	2280      	movs	r2, #128	; 0x80
 8001454:	2109      	movs	r1, #9
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 fab0 	bl	80019bc <SX127X_set_bits>
 800145c:	4603      	mov	r3, r0
 800145e:	73fb      	strb	r3, [r7, #15]
 8001460:	e006      	b.n	8001470 <SX127X_set_pa_output+0x34>
	}else{
		status = SX127X_clear_bits(SX127X, SX127X_REG_PA_CONFIG, ~SX127X_PA_SELECT_MASK);
 8001462:	2280      	movs	r2, #128	; 0x80
 8001464:	2109      	movs	r1, #9
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f000 fafb 	bl	8001a62 <SX127X_clear_bits>
 800146c:	4603      	mov	r3, r0
 800146e:	73fb      	strb	r3, [r7, #15]
	}

	SX127X->PaSelect = PaSelect;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	78fa      	ldrb	r2, [r7, #3]
 8001474:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

	return(status);
 8001478:	7bfb      	ldrb	r3, [r7, #15]
}
 800147a:	4618      	mov	r0, r3
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <SX127X_set_tx_power>:


HAL_StatusTypeDef SX127X_set_tx_power(SX127X_t *SX127X, uint8_t TxPower) {
 8001482:	b590      	push	{r4, r7, lr}
 8001484:	b09f      	sub	sp, #124	; 0x7c
 8001486:	af1a      	add	r7, sp, #104	; 0x68
 8001488:	6078      	str	r0, [r7, #4]
 800148a:	460b      	mov	r3, r1
 800148c:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef status = HAL_OK;
 800148e:	2300      	movs	r3, #0
 8001490:	73bb      	strb	r3, [r7, #14]
	uint8_t read_value;
	uint8_t OutputPower;

	// PaSelect = 1 (PA_BOOST pin, from +2 to +17 dBm)
	if (SX127X->PaSelect == PA_BOOST_Pin) {
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001498:	2b01      	cmp	r3, #1
 800149a:	f040 80c5 	bne.w	8001628 <SX127X_set_tx_power+0x1a6>
		// Stupidity protection:
		if(TxPower < 2)	TxPower = 2;
 800149e:	78fb      	ldrb	r3, [r7, #3]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d801      	bhi.n	80014a8 <SX127X_set_tx_power+0x26>
 80014a4:	2302      	movs	r3, #2
 80014a6:	70fb      	strb	r3, [r7, #3]
		if(TxPower > 17 && TxPower < 20)	TxPower = 17;
 80014a8:	78fb      	ldrb	r3, [r7, #3]
 80014aa:	2b11      	cmp	r3, #17
 80014ac:	d904      	bls.n	80014b8 <SX127X_set_tx_power+0x36>
 80014ae:	78fb      	ldrb	r3, [r7, #3]
 80014b0:	2b13      	cmp	r3, #19
 80014b2:	d801      	bhi.n	80014b8 <SX127X_set_tx_power+0x36>
 80014b4:	2311      	movs	r3, #17
 80014b6:	70fb      	strb	r3, [r7, #3]
		if(TxPower == 20){
 80014b8:	78fb      	ldrb	r3, [r7, #3]
 80014ba:	2b14      	cmp	r3, #20
 80014bc:	d153      	bne.n	8001566 <SX127X_set_tx_power+0xe4>
			OutputPower = 0b10001111;
 80014be:	238f      	movs	r3, #143	; 0x8f
 80014c0:	73fb      	strb	r3, [r7, #15]

			// Putting the PaDac register in +20 dBm operation mode.
			status = READ_REG(FSK_REG_PA_DAC, &read_value);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 80014cc:	687c      	ldr	r4, [r7, #4]
 80014ce:	2164      	movs	r1, #100	; 0x64
 80014d0:	9119      	str	r1, [sp, #100]	; 0x64
 80014d2:	f107 010d 	add.w	r1, r7, #13
 80014d6:	9118      	str	r1, [sp, #96]	; 0x60
 80014d8:	214d      	movs	r1, #77	; 0x4d
 80014da:	9117      	str	r1, [sp, #92]	; 0x5c
 80014dc:	9216      	str	r2, [sp, #88]	; 0x58
 80014de:	9315      	str	r3, [sp, #84]	; 0x54
 80014e0:	4668      	mov	r0, sp
 80014e2:	f104 0310 	add.w	r3, r4, #16
 80014e6:	2254      	movs	r2, #84	; 0x54
 80014e8:	4619      	mov	r1, r3
 80014ea:	f006 fb1d 	bl	8007b28 <memcpy>
 80014ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014f2:	f7ff fcd5 	bl	8000ea0 <SPI_read_register>
 80014f6:	4603      	mov	r3, r0
 80014f8:	73bb      	strb	r3, [r7, #14]
			RETURN_ON_ERROR(status);
 80014fa:	7bbb      	ldrb	r3, [r7, #14]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <SX127X_set_tx_power+0x82>
 8001500:	7bbb      	ldrb	r3, [r7, #14]
 8001502:	e118      	b.n	8001736 <SX127X_set_tx_power+0x2b4>
			read_value = (read_value & 0b11111000) | 0b00000111;
 8001504:	7b7b      	ldrb	r3, [r7, #13]
 8001506:	f043 0307 	orr.w	r3, r3, #7
 800150a:	b2db      	uxtb	r3, r3
 800150c:	737b      	strb	r3, [r7, #13]
			status = WRITE_REG(FSK_REG_PA_DAC, read_value);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8001518:	7b79      	ldrb	r1, [r7, #13]
 800151a:	687c      	ldr	r4, [r7, #4]
 800151c:	2064      	movs	r0, #100	; 0x64
 800151e:	9019      	str	r0, [sp, #100]	; 0x64
 8001520:	9118      	str	r1, [sp, #96]	; 0x60
 8001522:	214d      	movs	r1, #77	; 0x4d
 8001524:	9117      	str	r1, [sp, #92]	; 0x5c
 8001526:	9216      	str	r2, [sp, #88]	; 0x58
 8001528:	9315      	str	r3, [sp, #84]	; 0x54
 800152a:	4668      	mov	r0, sp
 800152c:	f104 0310 	add.w	r3, r4, #16
 8001530:	2254      	movs	r2, #84	; 0x54
 8001532:	4619      	mov	r1, r3
 8001534:	f006 faf8 	bl	8007b28 <memcpy>
 8001538:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800153c:	f7ff fcf7 	bl	8000f2e <SPI_write_register>
 8001540:	4603      	mov	r3, r0
 8001542:	73bb      	strb	r3, [r7, #14]
			RETURN_ON_ERROR(status);
 8001544:	7bbb      	ldrb	r3, [r7, #14]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <SX127X_set_tx_power+0xcc>
 800154a:	7bbb      	ldrb	r3, [r7, #14]
 800154c:	e0f3      	b.n	8001736 <SX127X_set_tx_power+0x2b4>

			// Setting the over current protection.
			status = SX127X_set_ocp(SX127X, 200);
 800154e:	21c8      	movs	r1, #200	; 0xc8
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f000 f8f5 	bl	8001740 <SX127X_set_ocp>
 8001556:	4603      	mov	r3, r0
 8001558:	73bb      	strb	r3, [r7, #14]
			RETURN_ON_ERROR(status);
 800155a:	7bbb      	ldrb	r3, [r7, #14]
 800155c:	2b00      	cmp	r3, #0
 800155e:	f000 80cc 	beq.w	80016fa <SX127X_set_tx_power+0x278>
 8001562:	7bbb      	ldrb	r3, [r7, #14]
 8001564:	e0e7      	b.n	8001736 <SX127X_set_tx_power+0x2b4>

		}else{
			OutputPower = ((uint8_t)(TxPower - 2) & 0b00001111) | 0b10000000;
 8001566:	78fb      	ldrb	r3, [r7, #3]
 8001568:	3b02      	subs	r3, #2
 800156a:	b2db      	uxtb	r3, r3
 800156c:	b25b      	sxtb	r3, r3
 800156e:	f003 030f 	and.w	r3, r3, #15
 8001572:	b25b      	sxtb	r3, r3
 8001574:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001578:	b25b      	sxtb	r3, r3
 800157a:	73fb      	strb	r3, [r7, #15]

			// Putting the PaDac register in default operation mode.
			status = READ_REG(FSK_REG_PA_DAC, &read_value);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8001586:	687c      	ldr	r4, [r7, #4]
 8001588:	2164      	movs	r1, #100	; 0x64
 800158a:	9119      	str	r1, [sp, #100]	; 0x64
 800158c:	f107 010d 	add.w	r1, r7, #13
 8001590:	9118      	str	r1, [sp, #96]	; 0x60
 8001592:	214d      	movs	r1, #77	; 0x4d
 8001594:	9117      	str	r1, [sp, #92]	; 0x5c
 8001596:	9216      	str	r2, [sp, #88]	; 0x58
 8001598:	9315      	str	r3, [sp, #84]	; 0x54
 800159a:	4668      	mov	r0, sp
 800159c:	f104 0310 	add.w	r3, r4, #16
 80015a0:	2254      	movs	r2, #84	; 0x54
 80015a2:	4619      	mov	r1, r3
 80015a4:	f006 fac0 	bl	8007b28 <memcpy>
 80015a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80015ac:	f7ff fc78 	bl	8000ea0 <SPI_read_register>
 80015b0:	4603      	mov	r3, r0
 80015b2:	73bb      	strb	r3, [r7, #14]
			RETURN_ON_ERROR(status);
 80015b4:	7bbb      	ldrb	r3, [r7, #14]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <SX127X_set_tx_power+0x13c>
 80015ba:	7bbb      	ldrb	r3, [r7, #14]
 80015bc:	e0bb      	b.n	8001736 <SX127X_set_tx_power+0x2b4>
			read_value = (read_value & 0b11111000) | 0b00000100;
 80015be:	7b7b      	ldrb	r3, [r7, #13]
 80015c0:	b25b      	sxtb	r3, r3
 80015c2:	f023 0307 	bic.w	r3, r3, #7
 80015c6:	b25b      	sxtb	r3, r3
 80015c8:	f043 0304 	orr.w	r3, r3, #4
 80015cc:	b25b      	sxtb	r3, r3
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	737b      	strb	r3, [r7, #13]
			status = WRITE_REG(FSK_REG_PA_DAC, read_value);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 80015dc:	7b79      	ldrb	r1, [r7, #13]
 80015de:	687c      	ldr	r4, [r7, #4]
 80015e0:	2064      	movs	r0, #100	; 0x64
 80015e2:	9019      	str	r0, [sp, #100]	; 0x64
 80015e4:	9118      	str	r1, [sp, #96]	; 0x60
 80015e6:	214d      	movs	r1, #77	; 0x4d
 80015e8:	9117      	str	r1, [sp, #92]	; 0x5c
 80015ea:	9216      	str	r2, [sp, #88]	; 0x58
 80015ec:	9315      	str	r3, [sp, #84]	; 0x54
 80015ee:	4668      	mov	r0, sp
 80015f0:	f104 0310 	add.w	r3, r4, #16
 80015f4:	2254      	movs	r2, #84	; 0x54
 80015f6:	4619      	mov	r1, r3
 80015f8:	f006 fa96 	bl	8007b28 <memcpy>
 80015fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001600:	f7ff fc95 	bl	8000f2e <SPI_write_register>
 8001604:	4603      	mov	r3, r0
 8001606:	73bb      	strb	r3, [r7, #14]
			RETURN_ON_ERROR(status);
 8001608:	7bbb      	ldrb	r3, [r7, #14]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <SX127X_set_tx_power+0x190>
 800160e:	7bbb      	ldrb	r3, [r7, #14]
 8001610:	e091      	b.n	8001736 <SX127X_set_tx_power+0x2b4>

			// Setting the over current protection.
			status = SX127X_set_ocp(SX127X, 120);
 8001612:	2178      	movs	r1, #120	; 0x78
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f000 f893 	bl	8001740 <SX127X_set_ocp>
 800161a:	4603      	mov	r3, r0
 800161c:	73bb      	strb	r3, [r7, #14]
			RETURN_ON_ERROR(status);
 800161e:	7bbb      	ldrb	r3, [r7, #14]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d06a      	beq.n	80016fa <SX127X_set_tx_power+0x278>
 8001624:	7bbb      	ldrb	r3, [r7, #14]
 8001626:	e086      	b.n	8001736 <SX127X_set_tx_power+0x2b4>

		// PaSelect = 0 (RFO pin, from -4 to +14 dBm) I have no idea how to use the negative values.
		// No "if" in case anyone puts nonsense on that function field we will fall here.
	} else{
		// Stupidity protection:
		if(TxPower < 1)	TxPower = 1;
 8001628:	78fb      	ldrb	r3, [r7, #3]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <SX127X_set_tx_power+0x1b0>
 800162e:	2301      	movs	r3, #1
 8001630:	70fb      	strb	r3, [r7, #3]
		if(TxPower > 14) TxPower = 14;
 8001632:	78fb      	ldrb	r3, [r7, #3]
 8001634:	2b0e      	cmp	r3, #14
 8001636:	d901      	bls.n	800163c <SX127X_set_tx_power+0x1ba>
 8001638:	230e      	movs	r3, #14
 800163a:	70fb      	strb	r3, [r7, #3]
		// Pmax = 10,8 + (0,6 * MaxPower)
		// I'm gonna make my life easier and ignore that the Pmax parameter can be set to many different values
		// The whole point is to never limit the transmission power during a transmission, so I will fix it to
		// +15 dBm since the maximum value for RFO pin is +14 dBm.

		OutputPower = ((uint8_t)TxPower & 0b00001111) | 0b01110000;
 800163c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001640:	f003 030f 	and.w	r3, r3, #15
 8001644:	b25b      	sxtb	r3, r3
 8001646:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800164a:	b25b      	sxtb	r3, r3
 800164c:	73fb      	strb	r3, [r7, #15]

		// Putting the PaDac register in default operation mode.
		status = READ_REG(FSK_REG_PA_DAC, &read_value);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8001658:	687c      	ldr	r4, [r7, #4]
 800165a:	2164      	movs	r1, #100	; 0x64
 800165c:	9119      	str	r1, [sp, #100]	; 0x64
 800165e:	f107 010d 	add.w	r1, r7, #13
 8001662:	9118      	str	r1, [sp, #96]	; 0x60
 8001664:	214d      	movs	r1, #77	; 0x4d
 8001666:	9117      	str	r1, [sp, #92]	; 0x5c
 8001668:	9216      	str	r2, [sp, #88]	; 0x58
 800166a:	9315      	str	r3, [sp, #84]	; 0x54
 800166c:	4668      	mov	r0, sp
 800166e:	f104 0310 	add.w	r3, r4, #16
 8001672:	2254      	movs	r2, #84	; 0x54
 8001674:	4619      	mov	r1, r3
 8001676:	f006 fa57 	bl	8007b28 <memcpy>
 800167a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800167e:	f7ff fc0f 	bl	8000ea0 <SPI_read_register>
 8001682:	4603      	mov	r3, r0
 8001684:	73bb      	strb	r3, [r7, #14]
		RETURN_ON_ERROR(status);
 8001686:	7bbb      	ldrb	r3, [r7, #14]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <SX127X_set_tx_power+0x20e>
 800168c:	7bbb      	ldrb	r3, [r7, #14]
 800168e:	e052      	b.n	8001736 <SX127X_set_tx_power+0x2b4>
		read_value = (read_value & 0b11111000) | 0b00000100;
 8001690:	7b7b      	ldrb	r3, [r7, #13]
 8001692:	b25b      	sxtb	r3, r3
 8001694:	f023 0307 	bic.w	r3, r3, #7
 8001698:	b25b      	sxtb	r3, r3
 800169a:	f043 0304 	orr.w	r3, r3, #4
 800169e:	b25b      	sxtb	r3, r3
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	737b      	strb	r3, [r7, #13]
		status = WRITE_REG(FSK_REG_PA_DAC, read_value);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 80016ae:	7b79      	ldrb	r1, [r7, #13]
 80016b0:	687c      	ldr	r4, [r7, #4]
 80016b2:	2064      	movs	r0, #100	; 0x64
 80016b4:	9019      	str	r0, [sp, #100]	; 0x64
 80016b6:	9118      	str	r1, [sp, #96]	; 0x60
 80016b8:	214d      	movs	r1, #77	; 0x4d
 80016ba:	9117      	str	r1, [sp, #92]	; 0x5c
 80016bc:	9216      	str	r2, [sp, #88]	; 0x58
 80016be:	9315      	str	r3, [sp, #84]	; 0x54
 80016c0:	4668      	mov	r0, sp
 80016c2:	f104 0310 	add.w	r3, r4, #16
 80016c6:	2254      	movs	r2, #84	; 0x54
 80016c8:	4619      	mov	r1, r3
 80016ca:	f006 fa2d 	bl	8007b28 <memcpy>
 80016ce:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016d2:	f7ff fc2c 	bl	8000f2e <SPI_write_register>
 80016d6:	4603      	mov	r3, r0
 80016d8:	73bb      	strb	r3, [r7, #14]
		RETURN_ON_ERROR(status);
 80016da:	7bbb      	ldrb	r3, [r7, #14]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <SX127X_set_tx_power+0x262>
 80016e0:	7bbb      	ldrb	r3, [r7, #14]
 80016e2:	e028      	b.n	8001736 <SX127X_set_tx_power+0x2b4>

		// Setting the over current protection.
		status = SX127X_set_ocp(SX127X, 60);
 80016e4:	213c      	movs	r1, #60	; 0x3c
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f000 f82a 	bl	8001740 <SX127X_set_ocp>
 80016ec:	4603      	mov	r3, r0
 80016ee:	73bb      	strb	r3, [r7, #14]
		RETURN_ON_ERROR(status);
 80016f0:	7bbb      	ldrb	r3, [r7, #14]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <SX127X_set_tx_power+0x278>
 80016f6:	7bbb      	ldrb	r3, [r7, #14]
 80016f8:	e01d      	b.n	8001736 <SX127X_set_tx_power+0x2b4>

	}

	SX127X->TxPower = TxPower;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	78fa      	ldrb	r2, [r7, #3]
 80016fe:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

	// Writes Final value on the PaConfig register.
	return WRITE_REG(SX127X_REG_PA_CONFIG, OutputPower);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 800170c:	687c      	ldr	r4, [r7, #4]
 800170e:	2164      	movs	r1, #100	; 0x64
 8001710:	9119      	str	r1, [sp, #100]	; 0x64
 8001712:	7bf9      	ldrb	r1, [r7, #15]
 8001714:	9118      	str	r1, [sp, #96]	; 0x60
 8001716:	2109      	movs	r1, #9
 8001718:	9117      	str	r1, [sp, #92]	; 0x5c
 800171a:	9216      	str	r2, [sp, #88]	; 0x58
 800171c:	9315      	str	r3, [sp, #84]	; 0x54
 800171e:	4668      	mov	r0, sp
 8001720:	f104 0310 	add.w	r3, r4, #16
 8001724:	2254      	movs	r2, #84	; 0x54
 8001726:	4619      	mov	r1, r3
 8001728:	f006 f9fe 	bl	8007b28 <memcpy>
 800172c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001730:	f7ff fbfd 	bl	8000f2e <SPI_write_register>
 8001734:	4603      	mov	r3, r0

}
 8001736:	4618      	mov	r0, r3
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	bd90      	pop	{r4, r7, pc}
	...

08001740 <SX127X_set_ocp>:

HAL_StatusTypeDef SX127X_set_ocp(SX127X_t *SX127X, uint16_t current_mA) {
 8001740:	b590      	push	{r4, r7, lr}
 8001742:	b09f      	sub	sp, #124	; 0x7c
 8001744:	af1a      	add	r7, sp, #104	; 0x68
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	807b      	strh	r3, [r7, #2]
	uint8_t ocp_trim = 0;
 800174c:	2300      	movs	r3, #0
 800174e:	73fb      	strb	r3, [r7, #15]
	uint8_t ocp_val = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	73bb      	strb	r3, [r7, #14]

	/* calculates register value corresponding to current (section 5.4.4) */
	if (current_mA >= 240) {
 8001754:	887b      	ldrh	r3, [r7, #2]
 8001756:	2bef      	cmp	r3, #239	; 0xef
 8001758:	d902      	bls.n	8001760 <SX127X_set_ocp+0x20>
		ocp_trim = 28;
 800175a:	231c      	movs	r3, #28
 800175c:	73fb      	strb	r3, [r7, #15]
 800175e:	e034      	b.n	80017ca <SX127X_set_ocp+0x8a>
	} else if (current_mA > 120) {
 8001760:	887b      	ldrh	r3, [r7, #2]
 8001762:	2b78      	cmp	r3, #120	; 0x78
 8001764:	d909      	bls.n	800177a <SX127X_set_ocp+0x3a>
		ocp_trim = (current_mA + 30) / 10;
 8001766:	887b      	ldrh	r3, [r7, #2]
 8001768:	331e      	adds	r3, #30
 800176a:	4a2c      	ldr	r2, [pc, #176]	; (800181c <SX127X_set_ocp+0xdc>)
 800176c:	fb82 1203 	smull	r1, r2, r2, r3
 8001770:	1092      	asrs	r2, r2, #2
 8001772:	17db      	asrs	r3, r3, #31
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	73fb      	strb	r3, [r7, #15]
 8001778:	e027      	b.n	80017ca <SX127X_set_ocp+0x8a>
	} else if (current_mA >= 45) {
 800177a:	887b      	ldrh	r3, [r7, #2]
 800177c:	2b2c      	cmp	r3, #44	; 0x2c
 800177e:	d909      	bls.n	8001794 <SX127X_set_ocp+0x54>
		ocp_trim = (current_mA - 45) / 5;
 8001780:	887b      	ldrh	r3, [r7, #2]
 8001782:	3b2d      	subs	r3, #45	; 0x2d
 8001784:	4a25      	ldr	r2, [pc, #148]	; (800181c <SX127X_set_ocp+0xdc>)
 8001786:	fb82 1203 	smull	r1, r2, r2, r3
 800178a:	1052      	asrs	r2, r2, #1
 800178c:	17db      	asrs	r3, r3, #31
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	73fb      	strb	r3, [r7, #15]
 8001792:	e01a      	b.n	80017ca <SX127X_set_ocp+0x8a>
	} else {
		return WRITE_REG(SX127X_REG_OCP, FSK_LORA_OCP_RESET);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 800179e:	687c      	ldr	r4, [r7, #4]
 80017a0:	2164      	movs	r1, #100	; 0x64
 80017a2:	9119      	str	r1, [sp, #100]	; 0x64
 80017a4:	2100      	movs	r1, #0
 80017a6:	9118      	str	r1, [sp, #96]	; 0x60
 80017a8:	210b      	movs	r1, #11
 80017aa:	9117      	str	r1, [sp, #92]	; 0x5c
 80017ac:	9216      	str	r2, [sp, #88]	; 0x58
 80017ae:	9315      	str	r3, [sp, #84]	; 0x54
 80017b0:	4668      	mov	r0, sp
 80017b2:	f104 0310 	add.w	r3, r4, #16
 80017b6:	2254      	movs	r2, #84	; 0x54
 80017b8:	4619      	mov	r1, r3
 80017ba:	f006 f9b5 	bl	8007b28 <memcpy>
 80017be:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80017c2:	f7ff fbb4 	bl	8000f2e <SPI_write_register>
 80017c6:	4603      	mov	r3, r0
 80017c8:	e024      	b.n	8001814 <SX127X_set_ocp+0xd4>
	}

	ocp_val = FSK_OCP_SET(ocp_trim);
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	f003 031f 	and.w	r3, r3, #31
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	f043 0320 	orr.w	r3, r3, #32
 80017d6:	73bb      	strb	r3, [r7, #14]

	// Saving it into the struct:
	SX127X->OcpCurrent = current_mA;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	887a      	ldrh	r2, [r7, #2]
 80017dc:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78

	return WRITE_REG(SX127X_REG_OCP, ocp_val);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 80017ea:	687c      	ldr	r4, [r7, #4]
 80017ec:	2164      	movs	r1, #100	; 0x64
 80017ee:	9119      	str	r1, [sp, #100]	; 0x64
 80017f0:	7bb9      	ldrb	r1, [r7, #14]
 80017f2:	9118      	str	r1, [sp, #96]	; 0x60
 80017f4:	210b      	movs	r1, #11
 80017f6:	9117      	str	r1, [sp, #92]	; 0x5c
 80017f8:	9216      	str	r2, [sp, #88]	; 0x58
 80017fa:	9315      	str	r3, [sp, #84]	; 0x54
 80017fc:	4668      	mov	r0, sp
 80017fe:	f104 0310 	add.w	r3, r4, #16
 8001802:	2254      	movs	r2, #84	; 0x54
 8001804:	4619      	mov	r1, r3
 8001806:	f006 f98f 	bl	8007b28 <memcpy>
 800180a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800180e:	f7ff fb8e 	bl	8000f2e <SPI_write_register>
 8001812:	4603      	mov	r3, r0
}
 8001814:	4618      	mov	r0, r3
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	bd90      	pop	{r4, r7, pc}
 800181c:	66666667 	.word	0x66666667

08001820 <SX127X_set_lna_gain>:

	return(status);
}


HAL_StatusTypeDef SX127X_set_lna_gain(SX127X_t *SX127X, LnaGain_t LnaGain){
 8001820:	b590      	push	{r4, r7, lr}
 8001822:	b09f      	sub	sp, #124	; 0x7c
 8001824:	af1a      	add	r7, sp, #104	; 0x68
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	460b      	mov	r3, r1
 800182a:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef status = HAL_OK;
 800182c:	2300      	movs	r3, #0
 800182e:	73fb      	strb	r3, [r7, #15]
	uint8_t read_value;

	status = READ_REG(SX127X_REG_LNA, &read_value);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 800183a:	687c      	ldr	r4, [r7, #4]
 800183c:	2164      	movs	r1, #100	; 0x64
 800183e:	9119      	str	r1, [sp, #100]	; 0x64
 8001840:	f107 010e 	add.w	r1, r7, #14
 8001844:	9118      	str	r1, [sp, #96]	; 0x60
 8001846:	210c      	movs	r1, #12
 8001848:	9117      	str	r1, [sp, #92]	; 0x5c
 800184a:	9216      	str	r2, [sp, #88]	; 0x58
 800184c:	9315      	str	r3, [sp, #84]	; 0x54
 800184e:	4668      	mov	r0, sp
 8001850:	f104 0310 	add.w	r3, r4, #16
 8001854:	2254      	movs	r2, #84	; 0x54
 8001856:	4619      	mov	r1, r3
 8001858:	f006 f966 	bl	8007b28 <memcpy>
 800185c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001860:	f7ff fb1e 	bl	8000ea0 <SPI_read_register>
 8001864:	4603      	mov	r3, r0
 8001866:	73fb      	strb	r3, [r7, #15]
	RETURN_ON_ERROR(status);
 8001868:	7bfb      	ldrb	r3, [r7, #15]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <SX127X_set_lna_gain+0x52>
 800186e:	7bfb      	ldrb	r3, [r7, #15]
 8001870:	e02e      	b.n	80018d0 <SX127X_set_lna_gain+0xb0>
	status = WRITE_REG(SX127X_REG_LNA,((SX127X_LNA_GAIN_MASK & read_value) | ((uint8_t)LnaGain << 5)));
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 800187c:	7bb9      	ldrb	r1, [r7, #14]
 800187e:	b249      	sxtb	r1, r1
 8001880:	f001 011f 	and.w	r1, r1, #31
 8001884:	b248      	sxtb	r0, r1
 8001886:	78f9      	ldrb	r1, [r7, #3]
 8001888:	0149      	lsls	r1, r1, #5
 800188a:	b249      	sxtb	r1, r1
 800188c:	4301      	orrs	r1, r0
 800188e:	b249      	sxtb	r1, r1
 8001890:	b2c9      	uxtb	r1, r1
 8001892:	687c      	ldr	r4, [r7, #4]
 8001894:	2064      	movs	r0, #100	; 0x64
 8001896:	9019      	str	r0, [sp, #100]	; 0x64
 8001898:	9118      	str	r1, [sp, #96]	; 0x60
 800189a:	210c      	movs	r1, #12
 800189c:	9117      	str	r1, [sp, #92]	; 0x5c
 800189e:	9216      	str	r2, [sp, #88]	; 0x58
 80018a0:	9315      	str	r3, [sp, #84]	; 0x54
 80018a2:	4668      	mov	r0, sp
 80018a4:	f104 0310 	add.w	r3, r4, #16
 80018a8:	2254      	movs	r2, #84	; 0x54
 80018aa:	4619      	mov	r1, r3
 80018ac:	f006 f93c 	bl	8007b28 <memcpy>
 80018b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80018b4:	f7ff fb3b 	bl	8000f2e <SPI_write_register>
 80018b8:	4603      	mov	r3, r0
 80018ba:	73fb      	strb	r3, [r7, #15]
	RETURN_ON_ERROR(status);
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <SX127X_set_lna_gain+0xa6>
 80018c2:	7bfb      	ldrb	r3, [r7, #15]
 80018c4:	e004      	b.n	80018d0 <SX127X_set_lna_gain+0xb0>

	// Saving it into the struct:
	SX127X->LnaGain = LnaGain;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	78fa      	ldrb	r2, [r7, #3]
 80018ca:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

	return(status);
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd90      	pop	{r4, r7, pc}

080018d8 <SX127X_set_lna_boost>:

HAL_StatusTypeDef SX127X_set_lna_boost(SX127X_t *SX127X, bool LnaBoost){
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef status = HAL_OK;
 80018e4:	2300      	movs	r3, #0
 80018e6:	73fb      	strb	r3, [r7, #15]

	if(LnaBoost){
 80018e8:	78fb      	ldrb	r3, [r7, #3]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d007      	beq.n	80018fe <SX127X_set_lna_boost+0x26>
		status = SX127X_set_bits(SX127X, SX127X_REG_LNA, ~SX127X_LNA_BOOST_MASK);
 80018ee:	2203      	movs	r2, #3
 80018f0:	210c      	movs	r1, #12
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 f862 	bl	80019bc <SX127X_set_bits>
 80018f8:	4603      	mov	r3, r0
 80018fa:	73fb      	strb	r3, [r7, #15]
 80018fc:	e006      	b.n	800190c <SX127X_set_lna_boost+0x34>
	}else{
		status = SX127X_clear_bits(SX127X, SX127X_REG_LNA, ~SX127X_LNA_BOOST_MASK);
 80018fe:	2203      	movs	r2, #3
 8001900:	210c      	movs	r1, #12
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f000 f8ad 	bl	8001a62 <SX127X_clear_bits>
 8001908:	4603      	mov	r3, r0
 800190a:	73fb      	strb	r3, [r7, #15]
	}

	// Saving it into the struct:
	SX127X->LnaBoost = LnaBoost;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	78fa      	ldrb	r2, [r7, #3]
 8001910:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b

	return(status);
 8001914:	7bfb      	ldrb	r3, [r7, #15]

}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <SX127X_set_DIO_mapping>:
	return(status);
}


HAL_StatusTypeDef SX127X_set_DIO_mapping(SX127X_t *SX127X, uint8_t DIOMapping1,
		uint8_t DIOMapping2) {
 800191e:	b590      	push	{r4, r7, lr}
 8001920:	b09f      	sub	sp, #124	; 0x7c
 8001922:	af1a      	add	r7, sp, #104	; 0x68
 8001924:	6078      	str	r0, [r7, #4]
 8001926:	460b      	mov	r3, r1
 8001928:	70fb      	strb	r3, [r7, #3]
 800192a:	4613      	mov	r3, r2
 800192c:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 800192e:	2300      	movs	r3, #0
 8001930:	73fb      	strb	r3, [r7, #15]

	status = WRITE_REG(SX127X_REG_DIO_MAPPING_1, DIOMapping1);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 800193c:	687c      	ldr	r4, [r7, #4]
 800193e:	2164      	movs	r1, #100	; 0x64
 8001940:	9119      	str	r1, [sp, #100]	; 0x64
 8001942:	78f9      	ldrb	r1, [r7, #3]
 8001944:	9118      	str	r1, [sp, #96]	; 0x60
 8001946:	2140      	movs	r1, #64	; 0x40
 8001948:	9117      	str	r1, [sp, #92]	; 0x5c
 800194a:	9216      	str	r2, [sp, #88]	; 0x58
 800194c:	9315      	str	r3, [sp, #84]	; 0x54
 800194e:	4668      	mov	r0, sp
 8001950:	f104 0310 	add.w	r3, r4, #16
 8001954:	2254      	movs	r2, #84	; 0x54
 8001956:	4619      	mov	r1, r3
 8001958:	f006 f8e6 	bl	8007b28 <memcpy>
 800195c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001960:	f7ff fae5 	bl	8000f2e <SPI_write_register>
 8001964:	4603      	mov	r3, r0
 8001966:	73fb      	strb	r3, [r7, #15]
	RETURN_ON_ERROR(status);
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <SX127X_set_DIO_mapping+0x54>
 800196e:	7bfb      	ldrb	r3, [r7, #15]
 8001970:	e020      	b.n	80019b4 <SX127X_set_DIO_mapping+0x96>

	status = WRITE_REG(SX127X_REG_DIO_MAPPING_2, DIOMapping2);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 800197c:	687c      	ldr	r4, [r7, #4]
 800197e:	2164      	movs	r1, #100	; 0x64
 8001980:	9119      	str	r1, [sp, #100]	; 0x64
 8001982:	78b9      	ldrb	r1, [r7, #2]
 8001984:	9118      	str	r1, [sp, #96]	; 0x60
 8001986:	2141      	movs	r1, #65	; 0x41
 8001988:	9117      	str	r1, [sp, #92]	; 0x5c
 800198a:	9216      	str	r2, [sp, #88]	; 0x58
 800198c:	9315      	str	r3, [sp, #84]	; 0x54
 800198e:	4668      	mov	r0, sp
 8001990:	f104 0310 	add.w	r3, r4, #16
 8001994:	2254      	movs	r2, #84	; 0x54
 8001996:	4619      	mov	r1, r3
 8001998:	f006 f8c6 	bl	8007b28 <memcpy>
 800199c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80019a0:	f7ff fac5 	bl	8000f2e <SPI_write_register>
 80019a4:	4603      	mov	r3, r0
 80019a6:	73fb      	strb	r3, [r7, #15]
	RETURN_ON_ERROR(status);
 80019a8:	7bfb      	ldrb	r3, [r7, #15]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <SX127X_set_DIO_mapping+0x94>
 80019ae:	7bfb      	ldrb	r3, [r7, #15]
 80019b0:	e000      	b.n	80019b4 <SX127X_set_DIO_mapping+0x96>

	return(status);
 80019b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd90      	pop	{r4, r7, pc}

080019bc <SX127X_set_bits>:

	return(status);
}

// Receives the register and a mask, where 1 shows the bits to be set: 0b00001000 sets the fourth bit.
HAL_StatusTypeDef SX127X_set_bits(SX127X_t *SX127X, uint8_t Reg, uint8_t Mask){
 80019bc:	b590      	push	{r4, r7, lr}
 80019be:	b09f      	sub	sp, #124	; 0x7c
 80019c0:	af1a      	add	r7, sp, #104	; 0x68
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	70fb      	strb	r3, [r7, #3]
 80019c8:	4613      	mov	r3, r2
 80019ca:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 80019cc:	2300      	movs	r3, #0
 80019ce:	73fb      	strb	r3, [r7, #15]
	uint8_t read_value;

	// Setting the required bit:
	status = READ_REG(Reg, &read_value);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 80019da:	687c      	ldr	r4, [r7, #4]
 80019dc:	2164      	movs	r1, #100	; 0x64
 80019de:	9119      	str	r1, [sp, #100]	; 0x64
 80019e0:	f107 010e 	add.w	r1, r7, #14
 80019e4:	9118      	str	r1, [sp, #96]	; 0x60
 80019e6:	78f9      	ldrb	r1, [r7, #3]
 80019e8:	9117      	str	r1, [sp, #92]	; 0x5c
 80019ea:	9216      	str	r2, [sp, #88]	; 0x58
 80019ec:	9315      	str	r3, [sp, #84]	; 0x54
 80019ee:	4668      	mov	r0, sp
 80019f0:	f104 0310 	add.w	r3, r4, #16
 80019f4:	2254      	movs	r2, #84	; 0x54
 80019f6:	4619      	mov	r1, r3
 80019f8:	f006 f896 	bl	8007b28 <memcpy>
 80019fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a00:	f7ff fa4e 	bl	8000ea0 <SPI_read_register>
 8001a04:	4603      	mov	r3, r0
 8001a06:	73fb      	strb	r3, [r7, #15]
	RETURN_ON_ERROR(status);
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <SX127X_set_bits+0x56>
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	e023      	b.n	8001a5a <SX127X_set_bits+0x9e>
	status = WRITE_REG(Reg, (uint8_t)(read_value | Mask));
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8001a1c:	7bb8      	ldrb	r0, [r7, #14]
 8001a1e:	78b9      	ldrb	r1, [r7, #2]
 8001a20:	4301      	orrs	r1, r0
 8001a22:	b2c9      	uxtb	r1, r1
 8001a24:	687c      	ldr	r4, [r7, #4]
 8001a26:	2064      	movs	r0, #100	; 0x64
 8001a28:	9019      	str	r0, [sp, #100]	; 0x64
 8001a2a:	9118      	str	r1, [sp, #96]	; 0x60
 8001a2c:	78f9      	ldrb	r1, [r7, #3]
 8001a2e:	9117      	str	r1, [sp, #92]	; 0x5c
 8001a30:	9216      	str	r2, [sp, #88]	; 0x58
 8001a32:	9315      	str	r3, [sp, #84]	; 0x54
 8001a34:	4668      	mov	r0, sp
 8001a36:	f104 0310 	add.w	r3, r4, #16
 8001a3a:	2254      	movs	r2, #84	; 0x54
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f006 f873 	bl	8007b28 <memcpy>
 8001a42:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a46:	f7ff fa72 	bl	8000f2e <SPI_write_register>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	73fb      	strb	r3, [r7, #15]
	RETURN_ON_ERROR(status);
 8001a4e:	7bfb      	ldrb	r3, [r7, #15]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <SX127X_set_bits+0x9c>
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
 8001a56:	e000      	b.n	8001a5a <SX127X_set_bits+0x9e>

	return(status);
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd90      	pop	{r4, r7, pc}

08001a62 <SX127X_clear_bits>:

// Receives the register and a mask, where 1 shows the bits to be cleared: 0b00001000 clears the fourth bit.
HAL_StatusTypeDef SX127X_clear_bits(SX127X_t *SX127X, uint8_t Reg, uint8_t Mask){
 8001a62:	b590      	push	{r4, r7, lr}
 8001a64:	b09f      	sub	sp, #124	; 0x7c
 8001a66:	af1a      	add	r7, sp, #104	; 0x68
 8001a68:	6078      	str	r0, [r7, #4]
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	70fb      	strb	r3, [r7, #3]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 8001a72:	2300      	movs	r3, #0
 8001a74:	73fb      	strb	r3, [r7, #15]
	uint8_t read_value;

	// Setting the required bit:
	status = READ_REG(Reg, &read_value);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8001a80:	687c      	ldr	r4, [r7, #4]
 8001a82:	2164      	movs	r1, #100	; 0x64
 8001a84:	9119      	str	r1, [sp, #100]	; 0x64
 8001a86:	f107 010e 	add.w	r1, r7, #14
 8001a8a:	9118      	str	r1, [sp, #96]	; 0x60
 8001a8c:	78f9      	ldrb	r1, [r7, #3]
 8001a8e:	9117      	str	r1, [sp, #92]	; 0x5c
 8001a90:	9216      	str	r2, [sp, #88]	; 0x58
 8001a92:	9315      	str	r3, [sp, #84]	; 0x54
 8001a94:	4668      	mov	r0, sp
 8001a96:	f104 0310 	add.w	r3, r4, #16
 8001a9a:	2254      	movs	r2, #84	; 0x54
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f006 f843 	bl	8007b28 <memcpy>
 8001aa2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001aa6:	f7ff f9fb 	bl	8000ea0 <SPI_read_register>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	73fb      	strb	r3, [r7, #15]
	RETURN_ON_ERROR(status);
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <SX127X_clear_bits+0x56>
 8001ab4:	7bfb      	ldrb	r3, [r7, #15]
 8001ab6:	e028      	b.n	8001b0a <SX127X_clear_bits+0xa8>
	status = WRITE_REG(Reg, (uint8_t)(read_value & ~Mask));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8001ac2:	f997 1002 	ldrsb.w	r1, [r7, #2]
 8001ac6:	43c9      	mvns	r1, r1
 8001ac8:	b248      	sxtb	r0, r1
 8001aca:	7bb9      	ldrb	r1, [r7, #14]
 8001acc:	b249      	sxtb	r1, r1
 8001ace:	4001      	ands	r1, r0
 8001ad0:	b249      	sxtb	r1, r1
 8001ad2:	b2c9      	uxtb	r1, r1
 8001ad4:	687c      	ldr	r4, [r7, #4]
 8001ad6:	2064      	movs	r0, #100	; 0x64
 8001ad8:	9019      	str	r0, [sp, #100]	; 0x64
 8001ada:	9118      	str	r1, [sp, #96]	; 0x60
 8001adc:	78f9      	ldrb	r1, [r7, #3]
 8001ade:	9117      	str	r1, [sp, #92]	; 0x5c
 8001ae0:	9216      	str	r2, [sp, #88]	; 0x58
 8001ae2:	9315      	str	r3, [sp, #84]	; 0x54
 8001ae4:	4668      	mov	r0, sp
 8001ae6:	f104 0310 	add.w	r3, r4, #16
 8001aea:	2254      	movs	r2, #84	; 0x54
 8001aec:	4619      	mov	r1, r3
 8001aee:	f006 f81b 	bl	8007b28 <memcpy>
 8001af2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001af6:	f7ff fa1a 	bl	8000f2e <SPI_write_register>
 8001afa:	4603      	mov	r3, r0
 8001afc:	73fb      	strb	r3, [r7, #15]
	RETURN_ON_ERROR(status);
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <SX127X_clear_bits+0xa6>
 8001b04:	7bfb      	ldrb	r3, [r7, #15]
 8001b06:	e000      	b.n	8001b0a <SX127X_clear_bits+0xa8>

	return(status);
 8001b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3714      	adds	r7, #20
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd90      	pop	{r4, r7, pc}

08001b12 <LoRa_set_signal_bandwidth>:

/*
 * LoRa Functions
 */

HAL_StatusTypeDef LoRa_set_signal_bandwidth(SX127X_t* SX127X, uint8_t Bandwidth){
 8001b12:	b590      	push	{r4, r7, lr}
 8001b14:	b09f      	sub	sp, #124	; 0x7c
 8001b16:	af1a      	add	r7, sp, #104	; 0x68
 8001b18:	6078      	str	r0, [r7, #4]
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef status = HAL_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	73fb      	strb	r3, [r7, #15]
	uint8_t read_value = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	73bb      	strb	r3, [r7, #14]

	status = READ_REG(LORA_REG_MODEM_CONFIG_1, &read_value);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8001b30:	687c      	ldr	r4, [r7, #4]
 8001b32:	2164      	movs	r1, #100	; 0x64
 8001b34:	9119      	str	r1, [sp, #100]	; 0x64
 8001b36:	f107 010e 	add.w	r1, r7, #14
 8001b3a:	9118      	str	r1, [sp, #96]	; 0x60
 8001b3c:	211d      	movs	r1, #29
 8001b3e:	9117      	str	r1, [sp, #92]	; 0x5c
 8001b40:	9216      	str	r2, [sp, #88]	; 0x58
 8001b42:	9315      	str	r3, [sp, #84]	; 0x54
 8001b44:	4668      	mov	r0, sp
 8001b46:	f104 0310 	add.w	r3, r4, #16
 8001b4a:	2254      	movs	r2, #84	; 0x54
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f005 ffeb 	bl	8007b28 <memcpy>
 8001b52:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b56:	f7ff f9a3 	bl	8000ea0 <SPI_read_register>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	73fb      	strb	r3, [r7, #15]
	RETURN_ON_ERROR(status);
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <LoRa_set_signal_bandwidth+0x56>
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
 8001b66:	e032      	b.n	8001bce <LoRa_set_signal_bandwidth+0xbc>

	read_value = (LoRa_BW_CLR(read_value))|Bandwidth;
 8001b68:	7bbb      	ldrb	r3, [r7, #14]
 8001b6a:	b25b      	sxtb	r3, r3
 8001b6c:	f003 030f 	and.w	r3, r3, #15
 8001b70:	b25a      	sxtb	r2, r3
 8001b72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	b25b      	sxtb	r3, r3
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	73bb      	strb	r3, [r7, #14]

	status = WRITE_REG(LORA_REG_MODEM_CONFIG_1, read_value);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8001b88:	7bb9      	ldrb	r1, [r7, #14]
 8001b8a:	687c      	ldr	r4, [r7, #4]
 8001b8c:	2064      	movs	r0, #100	; 0x64
 8001b8e:	9019      	str	r0, [sp, #100]	; 0x64
 8001b90:	9118      	str	r1, [sp, #96]	; 0x60
 8001b92:	211d      	movs	r1, #29
 8001b94:	9117      	str	r1, [sp, #92]	; 0x5c
 8001b96:	9216      	str	r2, [sp, #88]	; 0x58
 8001b98:	9315      	str	r3, [sp, #84]	; 0x54
 8001b9a:	4668      	mov	r0, sp
 8001b9c:	f104 0310 	add.w	r3, r4, #16
 8001ba0:	2254      	movs	r2, #84	; 0x54
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	f005 ffc0 	bl	8007b28 <memcpy>
 8001ba8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001bac:	f7ff f9bf 	bl	8000f2e <SPI_write_register>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	73fb      	strb	r3, [r7, #15]
	RETURN_ON_ERROR(status);
 8001bb4:	7bfb      	ldrb	r3, [r7, #15]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <LoRa_set_signal_bandwidth+0xac>
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
 8001bbc:	e007      	b.n	8001bce <LoRa_set_signal_bandwidth+0xbc>

	// Saving it into the struct:
	SX127X->LoRa_Config.Bandwidth = Bandwidth;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	78fa      	ldrb	r2, [r7, #3]
 8001bc2:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2

	return LoRa_set_ldo_flag(SX127X);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f98b 	bl	8001ee2 <LoRa_set_ldo_flag>
 8001bcc:	4603      	mov	r3, r0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd90      	pop	{r4, r7, pc}

08001bd6 <LoRa_set_spreading_factor>:


// PARTIAL - Need to implement Special Case SF6
HAL_StatusTypeDef LoRa_set_spreading_factor(SX127X_t* SX127X, uint8_t sf){
 8001bd6:	b590      	push	{r4, r7, lr}
 8001bd8:	b09f      	sub	sp, #124	; 0x7c
 8001bda:	af1a      	add	r7, sp, #104	; 0x68
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	460b      	mov	r3, r1
 8001be0:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef status = HAL_OK;
 8001be2:	2300      	movs	r3, #0
 8001be4:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_val = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	73bb      	strb	r3, [r7, #14]

	/* Protects against invalid spreading factor values */
	if(sf < 6){
 8001bea:	78fb      	ldrb	r3, [r7, #3]
 8001bec:	2b05      	cmp	r3, #5
 8001bee:	d802      	bhi.n	8001bf6 <LoRa_set_spreading_factor+0x20>
		sf = 6;
 8001bf0:	2306      	movs	r3, #6
 8001bf2:	70fb      	strb	r3, [r7, #3]
 8001bf4:	e004      	b.n	8001c00 <LoRa_set_spreading_factor+0x2a>
	}
	else if(sf > 12){
 8001bf6:	78fb      	ldrb	r3, [r7, #3]
 8001bf8:	2b0c      	cmp	r3, #12
 8001bfa:	d901      	bls.n	8001c00 <LoRa_set_spreading_factor+0x2a>
		sf = 12;
 8001bfc:	230c      	movs	r3, #12
 8001bfe:	70fb      	strb	r3, [r7, #3]
		/* Set bits 2-0 of register detection optimize (address 0x31) to value "0b101" */
		/* Set register detection threshold (address 0x37) to value 0x0C */
	}

	/* Set sf in Register ModemConfig2 */
	status = READ_REG(LORA_REG_MODEM_CONFIG_2, &reg_val);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8001c0a:	687c      	ldr	r4, [r7, #4]
 8001c0c:	2164      	movs	r1, #100	; 0x64
 8001c0e:	9119      	str	r1, [sp, #100]	; 0x64
 8001c10:	f107 010e 	add.w	r1, r7, #14
 8001c14:	9118      	str	r1, [sp, #96]	; 0x60
 8001c16:	211e      	movs	r1, #30
 8001c18:	9117      	str	r1, [sp, #92]	; 0x5c
 8001c1a:	9216      	str	r2, [sp, #88]	; 0x58
 8001c1c:	9315      	str	r3, [sp, #84]	; 0x54
 8001c1e:	4668      	mov	r0, sp
 8001c20:	f104 0310 	add.w	r3, r4, #16
 8001c24:	2254      	movs	r2, #84	; 0x54
 8001c26:	4619      	mov	r1, r3
 8001c28:	f005 ff7e 	bl	8007b28 <memcpy>
 8001c2c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c30:	f7ff f936 	bl	8000ea0 <SPI_read_register>
 8001c34:	4603      	mov	r3, r0
 8001c36:	73fb      	strb	r3, [r7, #15]
	RETURN_ON_ERROR(status);
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <LoRa_set_spreading_factor+0x6c>
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
 8001c40:	e02f      	b.n	8001ca2 <LoRa_set_spreading_factor+0xcc>
	reg_val = LoRa_set_SF(reg_val, sf);
 8001c42:	7bbb      	ldrb	r3, [r7, #14]
 8001c44:	b25b      	sxtb	r3, r3
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	b25a      	sxtb	r2, r3
 8001c4c:	78fb      	ldrb	r3, [r7, #3]
 8001c4e:	011b      	lsls	r3, r3, #4
 8001c50:	b25b      	sxtb	r3, r3
 8001c52:	4313      	orrs	r3, r2
 8001c54:	b25b      	sxtb	r3, r3
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	73bb      	strb	r3, [r7, #14]
	status = WRITE_REG(LORA_REG_MODEM_CONFIG_2, reg_val);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8001c64:	7bb9      	ldrb	r1, [r7, #14]
 8001c66:	687c      	ldr	r4, [r7, #4]
 8001c68:	2064      	movs	r0, #100	; 0x64
 8001c6a:	9019      	str	r0, [sp, #100]	; 0x64
 8001c6c:	9118      	str	r1, [sp, #96]	; 0x60
 8001c6e:	211e      	movs	r1, #30
 8001c70:	9117      	str	r1, [sp, #92]	; 0x5c
 8001c72:	9216      	str	r2, [sp, #88]	; 0x58
 8001c74:	9315      	str	r3, [sp, #84]	; 0x54
 8001c76:	4668      	mov	r0, sp
 8001c78:	f104 0310 	add.w	r3, r4, #16
 8001c7c:	2254      	movs	r2, #84	; 0x54
 8001c7e:	4619      	mov	r1, r3
 8001c80:	f005 ff52 	bl	8007b28 <memcpy>
 8001c84:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c88:	f7ff f951 	bl	8000f2e <SPI_write_register>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	73fb      	strb	r3, [r7, #15]
	RETURN_ON_ERROR(status);
 8001c90:	7bfb      	ldrb	r3, [r7, #15]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <LoRa_set_spreading_factor+0xc4>
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
 8001c98:	e003      	b.n	8001ca2 <LoRa_set_spreading_factor+0xcc>

	return LoRa_set_ldo_flag(SX127X);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f921 	bl	8001ee2 <LoRa_set_ldo_flag>
 8001ca0:	4603      	mov	r3, r0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd90      	pop	{r4, r7, pc}

08001caa <LoRa_set_preamble_lenght>:

HAL_StatusTypeDef LoRa_set_preamble_lenght(SX127X_t* SX127X, uint16_t lenght){
 8001caa:	b590      	push	{r4, r7, lr}
 8001cac:	b09f      	sub	sp, #124	; 0x7c
 8001cae:	af1a      	add	r7, sp, #104	; 0x68
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	73fb      	strb	r3, [r7, #15]

	status = WRITE_REG(LORA_REG_PREAMBLE_LSB, (uint8_t)(lenght));
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8001cc4:	8879      	ldrh	r1, [r7, #2]
 8001cc6:	b2c9      	uxtb	r1, r1
 8001cc8:	687c      	ldr	r4, [r7, #4]
 8001cca:	2064      	movs	r0, #100	; 0x64
 8001ccc:	9019      	str	r0, [sp, #100]	; 0x64
 8001cce:	9118      	str	r1, [sp, #96]	; 0x60
 8001cd0:	2121      	movs	r1, #33	; 0x21
 8001cd2:	9117      	str	r1, [sp, #92]	; 0x5c
 8001cd4:	9216      	str	r2, [sp, #88]	; 0x58
 8001cd6:	9315      	str	r3, [sp, #84]	; 0x54
 8001cd8:	4668      	mov	r0, sp
 8001cda:	f104 0310 	add.w	r3, r4, #16
 8001cde:	2254      	movs	r2, #84	; 0x54
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	f005 ff21 	bl	8007b28 <memcpy>
 8001ce6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001cea:	f7ff f920 	bl	8000f2e <SPI_write_register>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	73fb      	strb	r3, [r7, #15]
	RETURN_ON_ERROR(status);
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <LoRa_set_preamble_lenght+0x52>
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
 8001cfa:	e01e      	b.n	8001d3a <LoRa_set_preamble_lenght+0x90>
	status = WRITE_REG(LORA_REG_PREAMBLE_MSB, (uint8_t)(lenght>>8));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8001d06:	8879      	ldrh	r1, [r7, #2]
 8001d08:	0a09      	lsrs	r1, r1, #8
 8001d0a:	b289      	uxth	r1, r1
 8001d0c:	b2c9      	uxtb	r1, r1
 8001d0e:	687c      	ldr	r4, [r7, #4]
 8001d10:	2064      	movs	r0, #100	; 0x64
 8001d12:	9019      	str	r0, [sp, #100]	; 0x64
 8001d14:	9118      	str	r1, [sp, #96]	; 0x60
 8001d16:	2120      	movs	r1, #32
 8001d18:	9117      	str	r1, [sp, #92]	; 0x5c
 8001d1a:	9216      	str	r2, [sp, #88]	; 0x58
 8001d1c:	9315      	str	r3, [sp, #84]	; 0x54
 8001d1e:	4668      	mov	r0, sp
 8001d20:	f104 0310 	add.w	r3, r4, #16
 8001d24:	2254      	movs	r2, #84	; 0x54
 8001d26:	4619      	mov	r1, r3
 8001d28:	f005 fefe 	bl	8007b28 <memcpy>
 8001d2c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d30:	f7ff f8fd 	bl	8000f2e <SPI_write_register>
 8001d34:	4603      	mov	r3, r0
 8001d36:	73fb      	strb	r3, [r7, #15]
	return status;
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd90      	pop	{r4, r7, pc}

08001d42 <LoRa_set_sync_word>:

HAL_StatusTypeDef LoRa_set_sync_word(SX127X_t* SX127X, uint8_t sync_word){
 8001d42:	b590      	push	{r4, r7, lr}
 8001d44:	b09d      	sub	sp, #116	; 0x74
 8001d46:	af1a      	add	r7, sp, #104	; 0x68
 8001d48:	6078      	str	r0, [r7, #4]
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	70fb      	strb	r3, [r7, #3]
	return WRITE_REG(LORA_REG_SYNC_WORD, sync_word);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8001d58:	687c      	ldr	r4, [r7, #4]
 8001d5a:	2164      	movs	r1, #100	; 0x64
 8001d5c:	9119      	str	r1, [sp, #100]	; 0x64
 8001d5e:	78f9      	ldrb	r1, [r7, #3]
 8001d60:	9118      	str	r1, [sp, #96]	; 0x60
 8001d62:	2139      	movs	r1, #57	; 0x39
 8001d64:	9117      	str	r1, [sp, #92]	; 0x5c
 8001d66:	9216      	str	r2, [sp, #88]	; 0x58
 8001d68:	9315      	str	r3, [sp, #84]	; 0x54
 8001d6a:	4668      	mov	r0, sp
 8001d6c:	f104 0310 	add.w	r3, r4, #16
 8001d70:	2254      	movs	r2, #84	; 0x54
 8001d72:	4619      	mov	r1, r3
 8001d74:	f005 fed8 	bl	8007b28 <memcpy>
 8001d78:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d7c:	f7ff f8d7 	bl	8000f2e <SPI_write_register>
 8001d80:	4603      	mov	r3, r0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd90      	pop	{r4, r7, pc}

08001d8a <LoRa_set_coding_rate>:

// Need to test & protect macros against wrong values
HAL_StatusTypeDef LoRa_set_coding_rate(SX127X_t* SX127X, uint8_t coding_rate){
 8001d8a:	b590      	push	{r4, r7, lr}
 8001d8c:	b09f      	sub	sp, #124	; 0x7c
 8001d8e:	af1a      	add	r7, sp, #104	; 0x68
 8001d90:	6078      	str	r0, [r7, #4]
 8001d92:	460b      	mov	r3, r1
 8001d94:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef status = HAL_OK;
 8001d96:	2300      	movs	r3, #0
 8001d98:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_value = 0;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	73bb      	strb	r3, [r7, #14]
	status = READ_REG(LORA_REG_MODEM_CONFIG_1, &reg_value);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8001da8:	687c      	ldr	r4, [r7, #4]
 8001daa:	2164      	movs	r1, #100	; 0x64
 8001dac:	9119      	str	r1, [sp, #100]	; 0x64
 8001dae:	f107 010e 	add.w	r1, r7, #14
 8001db2:	9118      	str	r1, [sp, #96]	; 0x60
 8001db4:	211d      	movs	r1, #29
 8001db6:	9117      	str	r1, [sp, #92]	; 0x5c
 8001db8:	9216      	str	r2, [sp, #88]	; 0x58
 8001dba:	9315      	str	r3, [sp, #84]	; 0x54
 8001dbc:	4668      	mov	r0, sp
 8001dbe:	f104 0310 	add.w	r3, r4, #16
 8001dc2:	2254      	movs	r2, #84	; 0x54
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f005 feaf 	bl	8007b28 <memcpy>
 8001dca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001dce:	f7ff f867 	bl	8000ea0 <SPI_read_register>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	73fb      	strb	r3, [r7, #15]
	RETURN_ON_ERROR(status);
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <LoRa_set_coding_rate+0x56>
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
 8001dde:	e02e      	b.n	8001e3e <LoRa_set_coding_rate+0xb4>
	reg_value = LoRa_set_CR(reg_value, coding_rate);
 8001de0:	7bbb      	ldrb	r3, [r7, #14]
 8001de2:	b25b      	sxtb	r3, r3
 8001de4:	f023 030e 	bic.w	r3, r3, #14
 8001de8:	b25a      	sxtb	r2, r3
 8001dea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	b25b      	sxtb	r3, r3
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	73bb      	strb	r3, [r7, #14]
	status = WRITE_REG(LORA_REG_MODEM_CONFIG_1, reg_value);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8001e00:	7bb9      	ldrb	r1, [r7, #14]
 8001e02:	687c      	ldr	r4, [r7, #4]
 8001e04:	2064      	movs	r0, #100	; 0x64
 8001e06:	9019      	str	r0, [sp, #100]	; 0x64
 8001e08:	9118      	str	r1, [sp, #96]	; 0x60
 8001e0a:	211d      	movs	r1, #29
 8001e0c:	9117      	str	r1, [sp, #92]	; 0x5c
 8001e0e:	9216      	str	r2, [sp, #88]	; 0x58
 8001e10:	9315      	str	r3, [sp, #84]	; 0x54
 8001e12:	4668      	mov	r0, sp
 8001e14:	f104 0310 	add.w	r3, r4, #16
 8001e18:	2254      	movs	r2, #84	; 0x54
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	f005 fe84 	bl	8007b28 <memcpy>
 8001e20:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e24:	f7ff f883 	bl	8000f2e <SPI_write_register>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	73fb      	strb	r3, [r7, #15]
	RETURN_ON_ERROR(status);
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <LoRa_set_coding_rate+0xac>
 8001e32:	7bfb      	ldrb	r3, [r7, #15]
 8001e34:	e003      	b.n	8001e3e <LoRa_set_coding_rate+0xb4>

	return LoRa_set_ldo_flag(SX127X);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f853 	bl	8001ee2 <LoRa_set_ldo_flag>
 8001e3c:	4603      	mov	r3, r0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd90      	pop	{r4, r7, pc}

08001e46 <LoRa_enable_crc>:


HAL_StatusTypeDef LoRa_enable_crc(SX127X_t* SX127X){
 8001e46:	b590      	push	{r4, r7, lr}
 8001e48:	b09f      	sub	sp, #124	; 0x7c
 8001e4a:	af1a      	add	r7, sp, #104	; 0x68
 8001e4c:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	73fb      	strb	r3, [r7, #15]
	uint8_t read_value = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	73bb      	strb	r3, [r7, #14]

	status = READ_REG(LORA_REG_MODEM_CONFIG_2, &read_value);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8001e60:	687c      	ldr	r4, [r7, #4]
 8001e62:	2164      	movs	r1, #100	; 0x64
 8001e64:	9119      	str	r1, [sp, #100]	; 0x64
 8001e66:	f107 010e 	add.w	r1, r7, #14
 8001e6a:	9118      	str	r1, [sp, #96]	; 0x60
 8001e6c:	211e      	movs	r1, #30
 8001e6e:	9117      	str	r1, [sp, #92]	; 0x5c
 8001e70:	9216      	str	r2, [sp, #88]	; 0x58
 8001e72:	9315      	str	r3, [sp, #84]	; 0x54
 8001e74:	4668      	mov	r0, sp
 8001e76:	f104 0310 	add.w	r3, r4, #16
 8001e7a:	2254      	movs	r2, #84	; 0x54
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f005 fe53 	bl	8007b28 <memcpy>
 8001e82:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e86:	f7ff f80b 	bl	8000ea0 <SPI_read_register>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	73fb      	strb	r3, [r7, #15]
	RETURN_ON_ERROR(status);
 8001e8e:	7bfb      	ldrb	r3, [r7, #15]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <LoRa_enable_crc+0x52>
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	e020      	b.n	8001eda <LoRa_enable_crc+0x94>
	read_value = LoRa_CRC_SET(read_value);
 8001e98:	7bbb      	ldrb	r3, [r7, #14]
 8001e9a:	f043 0304 	orr.w	r3, r3, #4
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	73bb      	strb	r3, [r7, #14]
	status = WRITE_REG(LORA_REG_MODEM_CONFIG_2, read_value);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8001eac:	7bb9      	ldrb	r1, [r7, #14]
 8001eae:	687c      	ldr	r4, [r7, #4]
 8001eb0:	2064      	movs	r0, #100	; 0x64
 8001eb2:	9019      	str	r0, [sp, #100]	; 0x64
 8001eb4:	9118      	str	r1, [sp, #96]	; 0x60
 8001eb6:	211e      	movs	r1, #30
 8001eb8:	9117      	str	r1, [sp, #92]	; 0x5c
 8001eba:	9216      	str	r2, [sp, #88]	; 0x58
 8001ebc:	9315      	str	r3, [sp, #84]	; 0x54
 8001ebe:	4668      	mov	r0, sp
 8001ec0:	f104 0310 	add.w	r3, r4, #16
 8001ec4:	2254      	movs	r2, #84	; 0x54
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	f005 fe2e 	bl	8007b28 <memcpy>
 8001ecc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ed0:	f7ff f82d 	bl	8000f2e <SPI_write_register>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	73fb      	strb	r3, [r7, #15]
	return status;
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd90      	pop	{r4, r7, pc}

08001ee2 <LoRa_set_ldo_flag>:
	status = WRITE_REG(LORA_REG_MODEM_CONFIG_1, reg_value);
	return status;
}

// DONE - Need to test
HAL_StatusTypeDef LoRa_set_ldo_flag(SX127X_t* SX127X){
 8001ee2:	b590      	push	{r4, r7, lr}
 8001ee4:	b0a1      	sub	sp, #132	; 0x84
 8001ee6:	af1a      	add	r7, sp, #104	; 0x68
 8001ee8:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 8001eea:	2300      	movs	r3, #0
 8001eec:	75fb      	strb	r3, [r7, #23]
	long sbw = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
	uint8_t sf = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	72fb      	strb	r3, [r7, #11]
	long symbol_duration;
	uint8_t reg_config3_val = 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	72bb      	strb	r3, [r7, #10]

	/* Read arguments from registers*/
	status = LoRa_get_signal_bandwidth(SX127X, &sbw);
 8001efa:	f107 030c 	add.w	r3, r7, #12
 8001efe:	4619      	mov	r1, r3
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f8d6 	bl	80020b2 <LoRa_get_signal_bandwidth>
 8001f06:	4603      	mov	r3, r0
 8001f08:	75fb      	strb	r3, [r7, #23]
	RETURN_ON_ERROR(status);
 8001f0a:	7dfb      	ldrb	r3, [r7, #23]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <LoRa_set_ldo_flag+0x32>
 8001f10:	7dfb      	ldrb	r3, [r7, #23]
 8001f12:	e061      	b.n	8001fd8 <LoRa_set_ldo_flag+0xf6>
	status = LoRa_get_spreading_factor(SX127X, &sf);
 8001f14:	f107 030b 	add.w	r3, r7, #11
 8001f18:	4619      	mov	r1, r3
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f860 	bl	8001fe0 <LoRa_get_spreading_factor>
 8001f20:	4603      	mov	r3, r0
 8001f22:	75fb      	strb	r3, [r7, #23]
	RETURN_ON_ERROR(status);
 8001f24:	7dfb      	ldrb	r3, [r7, #23]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <LoRa_set_ldo_flag+0x4c>
 8001f2a:	7dfb      	ldrb	r3, [r7, #23]
 8001f2c:	e054      	b.n	8001fd8 <LoRa_set_ldo_flag+0xf6>
	status = READ_REG(LORA_REG_MODEM_CONFIG_3, &reg_config3_val);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8001f38:	687c      	ldr	r4, [r7, #4]
 8001f3a:	2164      	movs	r1, #100	; 0x64
 8001f3c:	9119      	str	r1, [sp, #100]	; 0x64
 8001f3e:	f107 010a 	add.w	r1, r7, #10
 8001f42:	9118      	str	r1, [sp, #96]	; 0x60
 8001f44:	2126      	movs	r1, #38	; 0x26
 8001f46:	9117      	str	r1, [sp, #92]	; 0x5c
 8001f48:	9216      	str	r2, [sp, #88]	; 0x58
 8001f4a:	9315      	str	r3, [sp, #84]	; 0x54
 8001f4c:	4668      	mov	r0, sp
 8001f4e:	f104 0310 	add.w	r3, r4, #16
 8001f52:	2254      	movs	r2, #84	; 0x54
 8001f54:	4619      	mov	r1, r3
 8001f56:	f005 fde7 	bl	8007b28 <memcpy>
 8001f5a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f5e:	f7fe ff9f 	bl	8000ea0 <SPI_read_register>
 8001f62:	4603      	mov	r3, r0
 8001f64:	75fb      	strb	r3, [r7, #23]
	RETURN_ON_ERROR(status);
 8001f66:	7dfb      	ldrb	r3, [r7, #23]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <LoRa_set_ldo_flag+0x8e>
 8001f6c:	7dfb      	ldrb	r3, [r7, #23]
 8001f6e:	e033      	b.n	8001fd8 <LoRa_set_ldo_flag+0xf6>

	/* Calculates and sets ldo value */
	symbol_duration = 1000/(sbw/(1L << sf)) ; // Section 4.1.1.5 and 4.1.1.6
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	7afb      	ldrb	r3, [r7, #11]
 8001f74:	4619      	mov	r1, r3
 8001f76:	2301      	movs	r3, #1
 8001f78:	408b      	lsls	r3, r1
 8001f7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f82:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f86:	613b      	str	r3, [r7, #16]
	if(symbol_duration > 16){
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	2b10      	cmp	r3, #16
 8001f8c:	dd05      	ble.n	8001f9a <LoRa_set_ldo_flag+0xb8>
		reg_config3_val = LoRa_LDO_SET(reg_config3_val);
 8001f8e:	7abb      	ldrb	r3, [r7, #10]
 8001f90:	f043 0308 	orr.w	r3, r3, #8
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	72bb      	strb	r3, [r7, #10]
 8001f98:	e004      	b.n	8001fa4 <LoRa_set_ldo_flag+0xc2>
	}
	else{
		reg_config3_val = LoRa_LDO_RESET(reg_config3_val);
 8001f9a:	7abb      	ldrb	r3, [r7, #10]
 8001f9c:	f023 0308 	bic.w	r3, r3, #8
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	72bb      	strb	r3, [r7, #10]
	}

	return WRITE_REG(LORA_REG_MODEM_CONFIG_3, reg_config3_val);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8001fae:	7ab9      	ldrb	r1, [r7, #10]
 8001fb0:	687c      	ldr	r4, [r7, #4]
 8001fb2:	2064      	movs	r0, #100	; 0x64
 8001fb4:	9019      	str	r0, [sp, #100]	; 0x64
 8001fb6:	9118      	str	r1, [sp, #96]	; 0x60
 8001fb8:	2126      	movs	r1, #38	; 0x26
 8001fba:	9117      	str	r1, [sp, #92]	; 0x5c
 8001fbc:	9216      	str	r2, [sp, #88]	; 0x58
 8001fbe:	9315      	str	r3, [sp, #84]	; 0x54
 8001fc0:	4668      	mov	r0, sp
 8001fc2:	f104 0310 	add.w	r3, r4, #16
 8001fc6:	2254      	movs	r2, #84	; 0x54
 8001fc8:	4619      	mov	r1, r3
 8001fca:	f005 fdad 	bl	8007b28 <memcpy>
 8001fce:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001fd2:	f7fe ffac 	bl	8000f2e <SPI_write_register>
 8001fd6:	4603      	mov	r3, r0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	371c      	adds	r7, #28
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd90      	pop	{r4, r7, pc}

08001fe0 <LoRa_get_spreading_factor>:
	*snr = read_value*0.25;
	return HAL_OK;
}

// DONE - Need to test
HAL_StatusTypeDef LoRa_get_spreading_factor(SX127X_t* SX127X, uint8_t* sf){
 8001fe0:	b590      	push	{r4, r7, lr}
 8001fe2:	b09f      	sub	sp, #124	; 0x7c
 8001fe4:	af1a      	add	r7, sp, #104	; 0x68
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	73fb      	strb	r3, [r7, #15]
	uint8_t read_value = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	73bb      	strb	r3, [r7, #14]

	status = READ_REG(LORA_REG_MODEM_CONFIG_2, &read_value);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8001ffc:	687c      	ldr	r4, [r7, #4]
 8001ffe:	2164      	movs	r1, #100	; 0x64
 8002000:	9119      	str	r1, [sp, #100]	; 0x64
 8002002:	f107 010e 	add.w	r1, r7, #14
 8002006:	9118      	str	r1, [sp, #96]	; 0x60
 8002008:	211e      	movs	r1, #30
 800200a:	9117      	str	r1, [sp, #92]	; 0x5c
 800200c:	9216      	str	r2, [sp, #88]	; 0x58
 800200e:	9315      	str	r3, [sp, #84]	; 0x54
 8002010:	4668      	mov	r0, sp
 8002012:	f104 0310 	add.w	r3, r4, #16
 8002016:	2254      	movs	r2, #84	; 0x54
 8002018:	4619      	mov	r1, r3
 800201a:	f005 fd85 	bl	8007b28 <memcpy>
 800201e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002022:	f7fe ff3d 	bl	8000ea0 <SPI_read_register>
 8002026:	4603      	mov	r3, r0
 8002028:	73fb      	strb	r3, [r7, #15]
	RETURN_ON_ERROR(status);
 800202a:	7bfb      	ldrb	r3, [r7, #15]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <LoRa_get_spreading_factor+0x54>
 8002030:	7bfb      	ldrb	r3, [r7, #15]
 8002032:	e005      	b.n	8002040 <LoRa_get_spreading_factor+0x60>
	*sf = read_value >> 4;
 8002034:	7bbb      	ldrb	r3, [r7, #14]
 8002036:	091b      	lsrs	r3, r3, #4
 8002038:	b2da      	uxtb	r2, r3
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	701a      	strb	r2, [r3, #0]
	return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	bd90      	pop	{r4, r7, pc}

08002048 <LoRa_get_raw_signal_bandwidth>:

// DONE - Need to test
HAL_StatusTypeDef LoRa_get_raw_signal_bandwidth(SX127X_t* SX127X, uint8_t* raw_sbw){
 8002048:	b590      	push	{r4, r7, lr}
 800204a:	b09f      	sub	sp, #124	; 0x7c
 800204c:	af1a      	add	r7, sp, #104	; 0x68
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002052:	2300      	movs	r3, #0
 8002054:	73fb      	strb	r3, [r7, #15]
	uint8_t read_value = 0;
 8002056:	2300      	movs	r3, #0
 8002058:	73bb      	strb	r3, [r7, #14]

	status = READ_REG(LORA_REG_MODEM_CONFIG_1, &read_value);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8002064:	687c      	ldr	r4, [r7, #4]
 8002066:	2164      	movs	r1, #100	; 0x64
 8002068:	9119      	str	r1, [sp, #100]	; 0x64
 800206a:	f107 010e 	add.w	r1, r7, #14
 800206e:	9118      	str	r1, [sp, #96]	; 0x60
 8002070:	211d      	movs	r1, #29
 8002072:	9117      	str	r1, [sp, #92]	; 0x5c
 8002074:	9216      	str	r2, [sp, #88]	; 0x58
 8002076:	9315      	str	r3, [sp, #84]	; 0x54
 8002078:	4668      	mov	r0, sp
 800207a:	f104 0310 	add.w	r3, r4, #16
 800207e:	2254      	movs	r2, #84	; 0x54
 8002080:	4619      	mov	r1, r3
 8002082:	f005 fd51 	bl	8007b28 <memcpy>
 8002086:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800208a:	f7fe ff09 	bl	8000ea0 <SPI_read_register>
 800208e:	4603      	mov	r3, r0
 8002090:	73fb      	strb	r3, [r7, #15]
	RETURN_ON_ERROR(status);
 8002092:	7bfb      	ldrb	r3, [r7, #15]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <LoRa_get_raw_signal_bandwidth+0x54>
 8002098:	7bfb      	ldrb	r3, [r7, #15]
 800209a:	e006      	b.n	80020aa <LoRa_get_raw_signal_bandwidth+0x62>
	*raw_sbw = LoRa_BW_MASK(read_value);
 800209c:	7bbb      	ldrb	r3, [r7, #14]
 800209e:	f023 030f 	bic.w	r3, r3, #15
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	701a      	strb	r2, [r3, #0]
	return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}	
 80020aa:	4618      	mov	r0, r3
 80020ac:	3714      	adds	r7, #20
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd90      	pop	{r4, r7, pc}

080020b2 <LoRa_get_signal_bandwidth>:

// DONE - Need to test
HAL_StatusTypeDef LoRa_get_signal_bandwidth(SX127X_t* SX127X, long* sbw){
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b084      	sub	sp, #16
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80020bc:	2300      	movs	r3, #0
 80020be:	73fb      	strb	r3, [r7, #15]
	uint8_t raw_sbw = 0;
 80020c0:	2300      	movs	r3, #0
 80020c2:	73bb      	strb	r3, [r7, #14]

	status = LoRa_get_raw_signal_bandwidth(SX127X, &raw_sbw);
 80020c4:	f107 030e 	add.w	r3, r7, #14
 80020c8:	4619      	mov	r1, r3
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7ff ffbc 	bl	8002048 <LoRa_get_raw_signal_bandwidth>
 80020d0:	4603      	mov	r3, r0
 80020d2:	73fb      	strb	r3, [r7, #15]
	RETURN_ON_ERROR(status);
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <LoRa_get_signal_bandwidth+0x2c>
 80020da:	7bfb      	ldrb	r3, [r7, #15]
 80020dc:	e007      	b.n	80020ee <LoRa_get_signal_bandwidth+0x3c>
	status = LoRa_raw_sbw_to_long(raw_sbw, sbw);
 80020de:	7bbb      	ldrb	r3, [r7, #14]
 80020e0:	6839      	ldr	r1, [r7, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 f808 	bl	80020f8 <LoRa_raw_sbw_to_long>
 80020e8:	4603      	mov	r3, r0
 80020ea:	73fb      	strb	r3, [r7, #15]
	return status;
 80020ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
	...

080020f8 <LoRa_raw_sbw_to_long>:

// DONE - Need to test
HAL_StatusTypeDef LoRa_raw_sbw_to_long(uint8_t raw_sbw, long* sbw){
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	6039      	str	r1, [r7, #0]
 8002102:	71fb      	strb	r3, [r7, #7]
	switch(raw_sbw){
 8002104:	79fb      	ldrb	r3, [r7, #7]
 8002106:	2b90      	cmp	r3, #144	; 0x90
 8002108:	d056      	beq.n	80021b8 <LoRa_raw_sbw_to_long+0xc0>
 800210a:	2b90      	cmp	r3, #144	; 0x90
 800210c:	dc59      	bgt.n	80021c2 <LoRa_raw_sbw_to_long+0xca>
 800210e:	2b80      	cmp	r3, #128	; 0x80
 8002110:	d04d      	beq.n	80021ae <LoRa_raw_sbw_to_long+0xb6>
 8002112:	2b80      	cmp	r3, #128	; 0x80
 8002114:	dc55      	bgt.n	80021c2 <LoRa_raw_sbw_to_long+0xca>
 8002116:	2b70      	cmp	r3, #112	; 0x70
 8002118:	d044      	beq.n	80021a4 <LoRa_raw_sbw_to_long+0xac>
 800211a:	2b70      	cmp	r3, #112	; 0x70
 800211c:	dc51      	bgt.n	80021c2 <LoRa_raw_sbw_to_long+0xca>
 800211e:	2b60      	cmp	r3, #96	; 0x60
 8002120:	d03a      	beq.n	8002198 <LoRa_raw_sbw_to_long+0xa0>
 8002122:	2b60      	cmp	r3, #96	; 0x60
 8002124:	dc4d      	bgt.n	80021c2 <LoRa_raw_sbw_to_long+0xca>
 8002126:	2b50      	cmp	r3, #80	; 0x50
 8002128:	d030      	beq.n	800218c <LoRa_raw_sbw_to_long+0x94>
 800212a:	2b50      	cmp	r3, #80	; 0x50
 800212c:	dc49      	bgt.n	80021c2 <LoRa_raw_sbw_to_long+0xca>
 800212e:	2b40      	cmp	r3, #64	; 0x40
 8002130:	d026      	beq.n	8002180 <LoRa_raw_sbw_to_long+0x88>
 8002132:	2b40      	cmp	r3, #64	; 0x40
 8002134:	dc45      	bgt.n	80021c2 <LoRa_raw_sbw_to_long+0xca>
 8002136:	2b30      	cmp	r3, #48	; 0x30
 8002138:	d01c      	beq.n	8002174 <LoRa_raw_sbw_to_long+0x7c>
 800213a:	2b30      	cmp	r3, #48	; 0x30
 800213c:	dc41      	bgt.n	80021c2 <LoRa_raw_sbw_to_long+0xca>
 800213e:	2b20      	cmp	r3, #32
 8002140:	d012      	beq.n	8002168 <LoRa_raw_sbw_to_long+0x70>
 8002142:	2b20      	cmp	r3, #32
 8002144:	dc3d      	bgt.n	80021c2 <LoRa_raw_sbw_to_long+0xca>
 8002146:	2b00      	cmp	r3, #0
 8002148:	d002      	beq.n	8002150 <LoRa_raw_sbw_to_long+0x58>
 800214a:	2b10      	cmp	r3, #16
 800214c:	d006      	beq.n	800215c <LoRa_raw_sbw_to_long+0x64>
 800214e:	e038      	b.n	80021c2 <LoRa_raw_sbw_to_long+0xca>
	case LoRa_BW_7_8:
		*sbw = 7.8E3;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	f641 6278 	movw	r2, #7800	; 0x1e78
 8002156:	601a      	str	r2, [r3, #0]
		return HAL_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	e033      	b.n	80021c4 <LoRa_raw_sbw_to_long+0xcc>
	case LoRa_BW_10_4:
		*sbw = 10.4E3;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	f642 02a0 	movw	r2, #10400	; 0x28a0
 8002162:	601a      	str	r2, [r3, #0]
		return HAL_OK;
 8002164:	2300      	movs	r3, #0
 8002166:	e02d      	b.n	80021c4 <LoRa_raw_sbw_to_long+0xcc>
	case LoRa_BW_15_6:
		*sbw = 15.6E3;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	f643 42f0 	movw	r2, #15600	; 0x3cf0
 800216e:	601a      	str	r2, [r3, #0]
		return HAL_OK;
 8002170:	2300      	movs	r3, #0
 8002172:	e027      	b.n	80021c4 <LoRa_raw_sbw_to_long+0xcc>
	case LoRa_BW_20_8:
		*sbw = 20.8E3;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	f245 1240 	movw	r2, #20800	; 0x5140
 800217a:	601a      	str	r2, [r3, #0]
		return HAL_OK;
 800217c:	2300      	movs	r3, #0
 800217e:	e021      	b.n	80021c4 <LoRa_raw_sbw_to_long+0xcc>
	case LoRa_BW_31_25:
		*sbw = 31.25E3;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	f647 2212 	movw	r2, #31250	; 0x7a12
 8002186:	601a      	str	r2, [r3, #0]
		return HAL_OK;
 8002188:	2300      	movs	r3, #0
 800218a:	e01b      	b.n	80021c4 <LoRa_raw_sbw_to_long+0xcc>
	case LoRa_BW_41_7:
		*sbw = 41.7E3;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	f24a 22e4 	movw	r2, #41700	; 0xa2e4
 8002192:	601a      	str	r2, [r3, #0]
		return HAL_OK;
 8002194:	2300      	movs	r3, #0
 8002196:	e015      	b.n	80021c4 <LoRa_raw_sbw_to_long+0xcc>
	case LoRa_BW_62_5:
		*sbw = 62.5E3;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	f24f 4224 	movw	r2, #62500	; 0xf424
 800219e:	601a      	str	r2, [r3, #0]
		return HAL_OK;
 80021a0:	2300      	movs	r3, #0
 80021a2:	e00f      	b.n	80021c4 <LoRa_raw_sbw_to_long+0xcc>
	case LoRa_BW_125:
		*sbw = 125E3;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	4a0a      	ldr	r2, [pc, #40]	; (80021d0 <LoRa_raw_sbw_to_long+0xd8>)
 80021a8:	601a      	str	r2, [r3, #0]
		return HAL_OK;
 80021aa:	2300      	movs	r3, #0
 80021ac:	e00a      	b.n	80021c4 <LoRa_raw_sbw_to_long+0xcc>
	case LoRa_BW_250:
		*sbw = 250E3;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	4a08      	ldr	r2, [pc, #32]	; (80021d4 <LoRa_raw_sbw_to_long+0xdc>)
 80021b2:	601a      	str	r2, [r3, #0]
		return HAL_OK;
 80021b4:	2300      	movs	r3, #0
 80021b6:	e005      	b.n	80021c4 <LoRa_raw_sbw_to_long+0xcc>
	case LoRa_BW_500:
		*sbw = 500E3;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	4a07      	ldr	r2, [pc, #28]	; (80021d8 <LoRa_raw_sbw_to_long+0xe0>)
 80021bc:	601a      	str	r2, [r3, #0]
		return HAL_OK;
 80021be:	2300      	movs	r3, #0
 80021c0:	e000      	b.n	80021c4 <LoRa_raw_sbw_to_long+0xcc>
	}
	return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	0001e848 	.word	0x0001e848
 80021d4:	0003d090 	.word	0x0003d090
 80021d8:	0007a120 	.word	0x0007a120

080021dc <LoRa_Transmit>:
	return READ_REG(LORA_REG_RSSI_WIDEBAND, random);
}


// DONE - Need to test. Depending on SPI burst read/write
HAL_StatusTypeDef LoRa_Transmit(SX127X_t* SX127X, void* packet, uint8_t length){
 80021dc:	b590      	push	{r4, r7, lr}
 80021de:	b0a1      	sub	sp, #132	; 0x84
 80021e0:	af1a      	add	r7, sp, #104	; 0x68
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	4613      	mov	r3, r2
 80021e8:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status = HAL_OK;
 80021ea:	2300      	movs	r3, #0
 80021ec:	74fb      	strb	r3, [r7, #19]
	uint8_t reg_op_val = 0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	747b      	strb	r3, [r7, #17]
	uint8_t fifo_addr_ptr = 0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	743b      	strb	r3, [r7, #16]
	uint8_t read_value = 0;
 80021f6:	2300      	movs	r3, #0
 80021f8:	74bb      	strb	r3, [r7, #18]

	/* Verifies if is not transmiting */
	status = READ_REG(SX127X_REG_OP_MODE, &reg_op_val);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8002204:	68fc      	ldr	r4, [r7, #12]
 8002206:	2164      	movs	r1, #100	; 0x64
 8002208:	9119      	str	r1, [sp, #100]	; 0x64
 800220a:	f107 0111 	add.w	r1, r7, #17
 800220e:	9118      	str	r1, [sp, #96]	; 0x60
 8002210:	2101      	movs	r1, #1
 8002212:	9117      	str	r1, [sp, #92]	; 0x5c
 8002214:	9216      	str	r2, [sp, #88]	; 0x58
 8002216:	9315      	str	r3, [sp, #84]	; 0x54
 8002218:	4668      	mov	r0, sp
 800221a:	f104 0310 	add.w	r3, r4, #16
 800221e:	2254      	movs	r2, #84	; 0x54
 8002220:	4619      	mov	r1, r3
 8002222:	f005 fc81 	bl	8007b28 <memcpy>
 8002226:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800222a:	f7fe fe39 	bl	8000ea0 <SPI_read_register>
 800222e:	4603      	mov	r3, r0
 8002230:	74fb      	strb	r3, [r7, #19]
	RETURN_ON_ERROR(status);
 8002232:	7cfb      	ldrb	r3, [r7, #19]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <LoRa_Transmit+0x60>
 8002238:	7cfb      	ldrb	r3, [r7, #19]
 800223a:	e0e6      	b.n	800240a <LoRa_Transmit+0x22e>
	reg_op_val = LoRa_get_MODE(reg_op_val);
 800223c:	7c7b      	ldrb	r3, [r7, #17]
 800223e:	f023 0378 	bic.w	r3, r3, #120	; 0x78
 8002242:	b2db      	uxtb	r3, r3
 8002244:	747b      	strb	r3, [r7, #17]
	if(reg_op_val != LoRa_MODE_SLEEP && reg_op_val != LoRa_MODE_STANDBY){
 8002246:	7c7b      	ldrb	r3, [r7, #17]
 8002248:	2b80      	cmp	r3, #128	; 0x80
		//HAL_UART_Transmit(&huart2, (uint8_t*)"O SX127X nao esta em Sleep ou Standby\n", sizeof("O SX127X nao esta em Sleep ou Standby\n"), HAL_MAX_DELAY);
		//return HAL_ERROR;
	}

	/* Set Standby Mode */
	status = SX127X_set_op_mode(SX127X, LoRa_MODE_STANDBY);
 800224a:	2181      	movs	r1, #129	; 0x81
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f7fe fec9 	bl	8000fe4 <SX127X_set_op_mode>
 8002252:	4603      	mov	r3, r0
 8002254:	74fb      	strb	r3, [r7, #19]
	if(status != HAL_OK){
		//HAL_UART_Transmit(&huart2, (uint8_t*)"Erro ao colocar o SX127X em Standby\n", sizeof("Erro ao colocar o SX127X em Standby\n"), HAL_MAX_DELAY);
	}
	RETURN_ON_ERROR(status);
 8002256:	7cfb      	ldrb	r3, [r7, #19]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <LoRa_Transmit+0x84>
 800225c:	7cfb      	ldrb	r3, [r7, #19]
 800225e:	e0d4      	b.n	800240a <LoRa_Transmit+0x22e>

	/* Tx Init */
	status = READ_REG(LORA_REG_FIFO_TX_BASE_ADDR, &fifo_addr_ptr);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 800226a:	68fc      	ldr	r4, [r7, #12]
 800226c:	2164      	movs	r1, #100	; 0x64
 800226e:	9119      	str	r1, [sp, #100]	; 0x64
 8002270:	f107 0110 	add.w	r1, r7, #16
 8002274:	9118      	str	r1, [sp, #96]	; 0x60
 8002276:	210e      	movs	r1, #14
 8002278:	9117      	str	r1, [sp, #92]	; 0x5c
 800227a:	9216      	str	r2, [sp, #88]	; 0x58
 800227c:	9315      	str	r3, [sp, #84]	; 0x54
 800227e:	4668      	mov	r0, sp
 8002280:	f104 0310 	add.w	r3, r4, #16
 8002284:	2254      	movs	r2, #84	; 0x54
 8002286:	4619      	mov	r1, r3
 8002288:	f005 fc4e 	bl	8007b28 <memcpy>
 800228c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002290:	f7fe fe06 	bl	8000ea0 <SPI_read_register>
 8002294:	4603      	mov	r3, r0
 8002296:	74fb      	strb	r3, [r7, #19]
	if(status != HAL_OK){
		//HAL_UART_Transmit(&huart2, (uint8_t*)"Erro ao ler o registrador 'LORA_REG_FIFO_TX_BASE_ADDR'\n", sizeof("Erro ao ler o resgistrador 'LORA_REG_FIFO_TX_BASE_ADDR'\n"), HAL_MAX_DELAY);
	}
	RETURN_ON_ERROR(status);
 8002298:	7cfb      	ldrb	r3, [r7, #19]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <LoRa_Transmit+0xc6>
 800229e:	7cfb      	ldrb	r3, [r7, #19]
 80022a0:	e0b3      	b.n	800240a <LoRa_Transmit+0x22e>
	status = WRITE_REG(LORA_REG_FIFO_ADDR_PTR, fifo_addr_ptr);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 80022ac:	7c39      	ldrb	r1, [r7, #16]
 80022ae:	68fc      	ldr	r4, [r7, #12]
 80022b0:	2064      	movs	r0, #100	; 0x64
 80022b2:	9019      	str	r0, [sp, #100]	; 0x64
 80022b4:	9118      	str	r1, [sp, #96]	; 0x60
 80022b6:	210d      	movs	r1, #13
 80022b8:	9117      	str	r1, [sp, #92]	; 0x5c
 80022ba:	9216      	str	r2, [sp, #88]	; 0x58
 80022bc:	9315      	str	r3, [sp, #84]	; 0x54
 80022be:	4668      	mov	r0, sp
 80022c0:	f104 0310 	add.w	r3, r4, #16
 80022c4:	2254      	movs	r2, #84	; 0x54
 80022c6:	4619      	mov	r1, r3
 80022c8:	f005 fc2e 	bl	8007b28 <memcpy>
 80022cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80022d0:	f7fe fe2d 	bl	8000f2e <SPI_write_register>
 80022d4:	4603      	mov	r3, r0
 80022d6:	74fb      	strb	r3, [r7, #19]
	if(status != HAL_OK){
		//HAL_UART_Transmit(&huart2, (uint8_t*)"Erro ao escrever no registrador 'LORA_REG_FIFO_ADDR_PTR'\n", sizeof("Erro ao escrever no registrador 'LORA_REG_FIFO_ADDR_PTR'\n"), HAL_MAX_DELAY);
	}
	RETURN_ON_ERROR(status);
 80022d8:	7cfb      	ldrb	r3, [r7, #19]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <LoRa_Transmit+0x106>
 80022de:	7cfb      	ldrb	r3, [r7, #19]
 80022e0:	e093      	b.n	800240a <LoRa_Transmit+0x22e>

	status = WRITE_REG(LORA_REG_PAYLOAD_LENGTH, length + 1);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 80022ec:	79f9      	ldrb	r1, [r7, #7]
 80022ee:	3101      	adds	r1, #1
 80022f0:	b2c9      	uxtb	r1, r1
 80022f2:	68fc      	ldr	r4, [r7, #12]
 80022f4:	2064      	movs	r0, #100	; 0x64
 80022f6:	9019      	str	r0, [sp, #100]	; 0x64
 80022f8:	9118      	str	r1, [sp, #96]	; 0x60
 80022fa:	2122      	movs	r1, #34	; 0x22
 80022fc:	9117      	str	r1, [sp, #92]	; 0x5c
 80022fe:	9216      	str	r2, [sp, #88]	; 0x58
 8002300:	9315      	str	r3, [sp, #84]	; 0x54
 8002302:	4668      	mov	r0, sp
 8002304:	f104 0310 	add.w	r3, r4, #16
 8002308:	2254      	movs	r2, #84	; 0x54
 800230a:	4619      	mov	r1, r3
 800230c:	f005 fc0c 	bl	8007b28 <memcpy>
 8002310:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002314:	f7fe fe0b 	bl	8000f2e <SPI_write_register>
 8002318:	4603      	mov	r3, r0
 800231a:	74fb      	strb	r3, [r7, #19]
	if(status != HAL_OK){
		//HAL_UART_Transmit(&huart2, (uint8_t*)"Erro ao escrever no registrador 'LORA_REG_PAYLOAD_LENGTH'\n", sizeof("Erro ao escrever no registrador 'LORA_REG_PAYLOAD_LENGTH'\n"), HAL_MAX_DELAY);
	}
	RETURN_ON_ERROR(status);
 800231c:	7cfb      	ldrb	r3, [r7, #19]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <LoRa_Transmit+0x14a>
 8002322:	7cfb      	ldrb	r3, [r7, #19]
 8002324:	e071      	b.n	800240a <LoRa_Transmit+0x22e>
	status = WRITE_REG(SX127X_REG_FIFO, length);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8002330:	68fc      	ldr	r4, [r7, #12]
 8002332:	2164      	movs	r1, #100	; 0x64
 8002334:	9119      	str	r1, [sp, #100]	; 0x64
 8002336:	79f9      	ldrb	r1, [r7, #7]
 8002338:	9118      	str	r1, [sp, #96]	; 0x60
 800233a:	2100      	movs	r1, #0
 800233c:	9117      	str	r1, [sp, #92]	; 0x5c
 800233e:	9216      	str	r2, [sp, #88]	; 0x58
 8002340:	9315      	str	r3, [sp, #84]	; 0x54
 8002342:	4668      	mov	r0, sp
 8002344:	f104 0310 	add.w	r3, r4, #16
 8002348:	2254      	movs	r2, #84	; 0x54
 800234a:	4619      	mov	r1, r3
 800234c:	f005 fbec 	bl	8007b28 <memcpy>
 8002350:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002354:	f7fe fdeb 	bl	8000f2e <SPI_write_register>
 8002358:	4603      	mov	r3, r0
 800235a:	74fb      	strb	r3, [r7, #19]
	if(status != HAL_OK){
		//HAL_UART_Transmit(&huart2, (uint8_t*)"Erro ao escrever no registrador 'LORA_REG_FIFO'\n", sizeof("Erro ao escrever no registrador 'LORA_REG_FIFO'\n"), HAL_MAX_DELAY);
	}
	RETURN_ON_ERROR(status);
 800235c:	7cfb      	ldrb	r3, [r7, #19]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <LoRa_Transmit+0x18a>
 8002362:	7cfb      	ldrb	r3, [r7, #19]
 8002364:	e051      	b.n	800240a <LoRa_Transmit+0x22e>

	/* Write Data FIFO */
	for(int i = 0; i <= length; i++){
 8002366:	2300      	movs	r3, #0
 8002368:	617b      	str	r3, [r7, #20]
 800236a:	e025      	b.n	80023b8 <LoRa_Transmit+0x1dc>
		status = WRITE_REG(SX127X_REG_FIFO, (((uint8_t*)packet)[i]));
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8002376:	6979      	ldr	r1, [r7, #20]
 8002378:	68b8      	ldr	r0, [r7, #8]
 800237a:	4401      	add	r1, r0
 800237c:	7809      	ldrb	r1, [r1, #0]
 800237e:	68fc      	ldr	r4, [r7, #12]
 8002380:	2064      	movs	r0, #100	; 0x64
 8002382:	9019      	str	r0, [sp, #100]	; 0x64
 8002384:	9118      	str	r1, [sp, #96]	; 0x60
 8002386:	2100      	movs	r1, #0
 8002388:	9117      	str	r1, [sp, #92]	; 0x5c
 800238a:	9216      	str	r2, [sp, #88]	; 0x58
 800238c:	9315      	str	r3, [sp, #84]	; 0x54
 800238e:	4668      	mov	r0, sp
 8002390:	f104 0310 	add.w	r3, r4, #16
 8002394:	2254      	movs	r2, #84	; 0x54
 8002396:	4619      	mov	r1, r3
 8002398:	f005 fbc6 	bl	8007b28 <memcpy>
 800239c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80023a0:	f7fe fdc5 	bl	8000f2e <SPI_write_register>
 80023a4:	4603      	mov	r3, r0
 80023a6:	74fb      	strb	r3, [r7, #19]
		if(status != HAL_OK){
	//		HAL_UART_Transmit(&huart2, (uint8_t*)"Erro ao escrever no FIFO\n", sizeof("Erro ao escrever no FIFO\n"), HAL_MAX_DELAY);
		}
		RETURN_ON_ERROR(status);
 80023a8:	7cfb      	ldrb	r3, [r7, #19]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <LoRa_Transmit+0x1d6>
 80023ae:	7cfb      	ldrb	r3, [r7, #19]
 80023b0:	e02b      	b.n	800240a <LoRa_Transmit+0x22e>
	for(int i = 0; i <= length; i++){
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	3301      	adds	r3, #1
 80023b6:	617b      	str	r3, [r7, #20]
 80023b8:	79fb      	ldrb	r3, [r7, #7]
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	429a      	cmp	r2, r3
 80023be:	ddd5      	ble.n	800236c <LoRa_Transmit+0x190>
	}

	/* Set Tx Mode */
	status = WRITE_REG(LORA_REG_IRQ_FLAGS, 0b00001000);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 80023ca:	68fc      	ldr	r4, [r7, #12]
 80023cc:	2164      	movs	r1, #100	; 0x64
 80023ce:	9119      	str	r1, [sp, #100]	; 0x64
 80023d0:	2108      	movs	r1, #8
 80023d2:	9118      	str	r1, [sp, #96]	; 0x60
 80023d4:	2112      	movs	r1, #18
 80023d6:	9117      	str	r1, [sp, #92]	; 0x5c
 80023d8:	9216      	str	r2, [sp, #88]	; 0x58
 80023da:	9315      	str	r3, [sp, #84]	; 0x54
 80023dc:	4668      	mov	r0, sp
 80023de:	f104 0310 	add.w	r3, r4, #16
 80023e2:	2254      	movs	r2, #84	; 0x54
 80023e4:	4619      	mov	r1, r3
 80023e6:	f005 fb9f 	bl	8007b28 <memcpy>
 80023ea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80023ee:	f7fe fd9e 	bl	8000f2e <SPI_write_register>
 80023f2:	4603      	mov	r3, r0
 80023f4:	74fb      	strb	r3, [r7, #19]
	RETURN_ON_ERROR(status);
 80023f6:	7cfb      	ldrb	r3, [r7, #19]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <LoRa_Transmit+0x224>
 80023fc:	7cfb      	ldrb	r3, [r7, #19]
 80023fe:	e004      	b.n	800240a <LoRa_Transmit+0x22e>

	return SX127X_set_op_mode(SX127X, LoRa_MODE_TX);
 8002400:	2183      	movs	r1, #131	; 0x83
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f7fe fdee 	bl	8000fe4 <SX127X_set_op_mode>
 8002408:	4603      	mov	r3, r0
	//
	//	status = LoRa_Op_Mode_Check(SX127X, &read_value);
	//	UART_print(huart2,"The current operation mode is not TX, it is: %d", read_value);
	//
	//	return HAL_OK;
}
 800240a:	4618      	mov	r0, r3
 800240c:	371c      	adds	r7, #28
 800240e:	46bd      	mov	sp, r7
 8002410:	bd90      	pop	{r4, r7, pc}

08002412 <LoRa_set_FIFO_base_address>:
	if((iqr_val & 0b01100000) != 0b01000000){
		return HAL_ERROR;
	}
}

HAL_StatusTypeDef LoRa_set_FIFO_base_address (SX127X_t* SX127X, uint8_t RxAddress, uint8_t TxAddress){
 8002412:	b590      	push	{r4, r7, lr}
 8002414:	b09f      	sub	sp, #124	; 0x7c
 8002416:	af1a      	add	r7, sp, #104	; 0x68
 8002418:	6078      	str	r0, [r7, #4]
 800241a:	460b      	mov	r3, r1
 800241c:	70fb      	strb	r3, [r7, #3]
 800241e:	4613      	mov	r3, r2
 8002420:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 8002422:	2300      	movs	r3, #0
 8002424:	73fb      	strb	r3, [r7, #15]

	/* Set Base address */
	status = WRITE_REG(LORA_REG_FIFO_RX_BASE_ADDR, RxAddress);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8002430:	687c      	ldr	r4, [r7, #4]
 8002432:	2164      	movs	r1, #100	; 0x64
 8002434:	9119      	str	r1, [sp, #100]	; 0x64
 8002436:	78f9      	ldrb	r1, [r7, #3]
 8002438:	9118      	str	r1, [sp, #96]	; 0x60
 800243a:	210f      	movs	r1, #15
 800243c:	9117      	str	r1, [sp, #92]	; 0x5c
 800243e:	9216      	str	r2, [sp, #88]	; 0x58
 8002440:	9315      	str	r3, [sp, #84]	; 0x54
 8002442:	4668      	mov	r0, sp
 8002444:	f104 0310 	add.w	r3, r4, #16
 8002448:	2254      	movs	r2, #84	; 0x54
 800244a:	4619      	mov	r1, r3
 800244c:	f005 fb6c 	bl	8007b28 <memcpy>
 8002450:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002454:	f7fe fd6b 	bl	8000f2e <SPI_write_register>
 8002458:	4603      	mov	r3, r0
 800245a:	73fb      	strb	r3, [r7, #15]
	RETURN_ON_ERROR(status);
 800245c:	7bfb      	ldrb	r3, [r7, #15]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <LoRa_set_FIFO_base_address+0x54>
 8002462:	7bfb      	ldrb	r3, [r7, #15]
 8002464:	e01f      	b.n	80024a6 <LoRa_set_FIFO_base_address+0x94>

	status = WRITE_REG(LORA_REG_FIFO_TX_BASE_ADDR, TxAddress);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8002470:	687c      	ldr	r4, [r7, #4]
 8002472:	2164      	movs	r1, #100	; 0x64
 8002474:	9119      	str	r1, [sp, #100]	; 0x64
 8002476:	78b9      	ldrb	r1, [r7, #2]
 8002478:	9118      	str	r1, [sp, #96]	; 0x60
 800247a:	210e      	movs	r1, #14
 800247c:	9117      	str	r1, [sp, #92]	; 0x5c
 800247e:	9216      	str	r2, [sp, #88]	; 0x58
 8002480:	9315      	str	r3, [sp, #84]	; 0x54
 8002482:	4668      	mov	r0, sp
 8002484:	f104 0310 	add.w	r3, r4, #16
 8002488:	2254      	movs	r2, #84	; 0x54
 800248a:	4619      	mov	r1, r3
 800248c:	f005 fb4c 	bl	8007b28 <memcpy>
 8002490:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002494:	f7fe fd4b 	bl	8000f2e <SPI_write_register>
 8002498:	4603      	mov	r3, r0
 800249a:	73fb      	strb	r3, [r7, #15]
	RETURN_ON_ERROR(status);
 800249c:	7bfb      	ldrb	r3, [r7, #15]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <LoRa_set_FIFO_base_address+0x94>
 80024a2:	7bfb      	ldrb	r3, [r7, #15]
 80024a4:	e7ff      	b.n	80024a6 <LoRa_set_FIFO_base_address+0x94>
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd90      	pop	{r4, r7, pc}
	...

080024b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08a      	sub	sp, #40	; 0x28
 80024b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b6:	f107 0314 	add.w	r3, r7, #20
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	605a      	str	r2, [r3, #4]
 80024c0:	609a      	str	r2, [r3, #8]
 80024c2:	60da      	str	r2, [r3, #12]
 80024c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024c6:	4b5b      	ldr	r3, [pc, #364]	; (8002634 <MX_GPIO_Init+0x184>)
 80024c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ca:	4a5a      	ldr	r2, [pc, #360]	; (8002634 <MX_GPIO_Init+0x184>)
 80024cc:	f043 0304 	orr.w	r3, r3, #4
 80024d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024d2:	4b58      	ldr	r3, [pc, #352]	; (8002634 <MX_GPIO_Init+0x184>)
 80024d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d6:	f003 0304 	and.w	r3, r3, #4
 80024da:	613b      	str	r3, [r7, #16]
 80024dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024de:	4b55      	ldr	r3, [pc, #340]	; (8002634 <MX_GPIO_Init+0x184>)
 80024e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e2:	4a54      	ldr	r2, [pc, #336]	; (8002634 <MX_GPIO_Init+0x184>)
 80024e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024ea:	4b52      	ldr	r3, [pc, #328]	; (8002634 <MX_GPIO_Init+0x184>)
 80024ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f6:	4b4f      	ldr	r3, [pc, #316]	; (8002634 <MX_GPIO_Init+0x184>)
 80024f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fa:	4a4e      	ldr	r2, [pc, #312]	; (8002634 <MX_GPIO_Init+0x184>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002502:	4b4c      	ldr	r3, [pc, #304]	; (8002634 <MX_GPIO_Init+0x184>)
 8002504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	60bb      	str	r3, [r7, #8]
 800250c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800250e:	4b49      	ldr	r3, [pc, #292]	; (8002634 <MX_GPIO_Init+0x184>)
 8002510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002512:	4a48      	ldr	r2, [pc, #288]	; (8002634 <MX_GPIO_Init+0x184>)
 8002514:	f043 0302 	orr.w	r3, r3, #2
 8002518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800251a:	4b46      	ldr	r3, [pc, #280]	; (8002634 <MX_GPIO_Init+0x184>)
 800251c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	607b      	str	r3, [r7, #4]
 8002524:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RESET_COMM_RX_Pin|EXTERNAL_GPIO_Pin, GPIO_PIN_RESET);
 8002526:	2200      	movs	r2, #0
 8002528:	f241 0110 	movw	r1, #4112	; 0x1010
 800252c:	4842      	ldr	r0, [pc, #264]	; (8002638 <MX_GPIO_Init+0x188>)
 800252e:	f001 fec3 	bl	80042b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_COMM_RX_GPIO_Port, SS_COMM_RX_Pin, GPIO_PIN_SET);
 8002532:	2201      	movs	r2, #1
 8002534:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002538:	483f      	ldr	r0, [pc, #252]	; (8002638 <MX_GPIO_Init+0x188>)
 800253a:	f001 febd 	bl	80042b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|RESET_COMM_TX_Pin, GPIO_PIN_RESET);
 800253e:	2200      	movs	r2, #0
 8002540:	f44f 7110 	mov.w	r1, #576	; 0x240
 8002544:	483d      	ldr	r0, [pc, #244]	; (800263c <MX_GPIO_Init+0x18c>)
 8002546:	f001 feb7 	bl	80042b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_COMM_TX_GPIO_Port, SS_COMM_TX_Pin, GPIO_PIN_SET);
 800254a:	2201      	movs	r2, #1
 800254c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002554:	f001 feb0 	bl	80042b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002558:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800255c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800255e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002564:	2300      	movs	r3, #0
 8002566:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002568:	f107 0314 	add.w	r3, r7, #20
 800256c:	4619      	mov	r1, r3
 800256e:	4833      	ldr	r0, [pc, #204]	; (800263c <MX_GPIO_Init+0x18c>)
 8002570:	f001 fcf8 	bl	8003f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RESET_COMM_RX_Pin|SS_COMM_RX_Pin|EXTERNAL_GPIO_Pin;
 8002574:	f243 0310 	movw	r3, #12304	; 0x3010
 8002578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800257a:	2301      	movs	r3, #1
 800257c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257e:	2300      	movs	r3, #0
 8002580:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002582:	2300      	movs	r3, #0
 8002584:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002586:	f107 0314 	add.w	r3, r7, #20
 800258a:	4619      	mov	r1, r3
 800258c:	482a      	ldr	r0, [pc, #168]	; (8002638 <MX_GPIO_Init+0x188>)
 800258e:	f001 fce9 	bl	8003f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_COMM_RX_Pin;
 8002592:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002598:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800259c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259e:	2300      	movs	r3, #0
 80025a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_COMM_RX_GPIO_Port, &GPIO_InitStruct);
 80025a2:	f107 0314 	add.w	r3, r7, #20
 80025a6:	4619      	mov	r1, r3
 80025a8:	4823      	ldr	r0, [pc, #140]	; (8002638 <MX_GPIO_Init+0x188>)
 80025aa:	f001 fcdb 	bl	8003f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|RESET_COMM_TX_Pin;
 80025ae:	f44f 7310 	mov.w	r3, #576	; 0x240
 80025b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025b4:	2301      	movs	r3, #1
 80025b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025bc:	2300      	movs	r3, #0
 80025be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025c0:	f107 0314 	add.w	r3, r7, #20
 80025c4:	4619      	mov	r1, r3
 80025c6:	481d      	ldr	r0, [pc, #116]	; (800263c <MX_GPIO_Init+0x18c>)
 80025c8:	f001 fccc 	bl	8003f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SS_COMM_TX_Pin;
 80025cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025d2:	2301      	movs	r3, #1
 80025d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d6:	2300      	movs	r3, #0
 80025d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025da:	2300      	movs	r3, #0
 80025dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SS_COMM_TX_GPIO_Port, &GPIO_InitStruct);
 80025de:	f107 0314 	add.w	r3, r7, #20
 80025e2:	4619      	mov	r1, r3
 80025e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025e8:	f001 fcbc 	bl	8003f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_COMM_TX_Pin;
 80025ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80025f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_COMM_TX_GPIO_Port, &GPIO_InitStruct);
 80025fc:	f107 0314 	add.w	r3, r7, #20
 8002600:	4619      	mov	r1, r3
 8002602:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002606:	f001 fcad 	bl	8003f64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800260a:	2200      	movs	r2, #0
 800260c:	2100      	movs	r1, #0
 800260e:	2017      	movs	r0, #23
 8002610:	f001 fbf3 	bl	8003dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002614:	2017      	movs	r0, #23
 8002616:	f001 fc0c 	bl	8003e32 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800261a:	2200      	movs	r2, #0
 800261c:	2100      	movs	r1, #0
 800261e:	2028      	movs	r0, #40	; 0x28
 8002620:	f001 fbeb 	bl	8003dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002624:	2028      	movs	r0, #40	; 0x28
 8002626:	f001 fc04 	bl	8003e32 <HAL_NVIC_EnableIRQ>

}
 800262a:	bf00      	nop
 800262c:	3728      	adds	r7, #40	; 0x28
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40021000 	.word	0x40021000
 8002638:	48000400 	.word	0x48000400
 800263c:	48000800 	.word	0x48000800

08002640 <LoRa_Config>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


HAL_StatusTypeDef LoRa_Config(SX127X_t* SX127X) {
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 8002648:	2300      	movs	r3, #0
 800264a:	73bb      	strb	r3, [r7, #14]
	uint8_t InitErrorCounter = 0;
 800264c:	2300      	movs	r3, #0
 800264e:	73fb      	strb	r3, [r7, #15]
	 * Also, Fdev + (BitRate/2) <= 250 kHz   and   600 Hz < Fdev < 200kHz
	 * BitRate must also respect: BitRate < 2*Bandwidth
	 */

	// Basic stuff first:
	SX127X->spi_bus = hspi2;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a74      	ldr	r2, [pc, #464]	; (8002824 <LoRa_Config+0x1e4>)
 8002654:	4618      	mov	r0, r3
 8002656:	4611      	mov	r1, r2
 8002658:	2364      	movs	r3, #100	; 0x64
 800265a:	461a      	mov	r2, r3
 800265c:	f005 fa64 	bl	8007b28 <memcpy>
	SX127X->ss_gpio_port = SS_COMM_TX_GPIO_Port;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002666:	665a      	str	r2, [r3, #100]	; 0x64
	SX127X->ss_pin = SS_COMM_TX_Pin;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800266e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	SX127X->reset_gpio_port =RESET_COMM_TX_GPIO_Port;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a6c      	ldr	r2, [pc, #432]	; (8002828 <LoRa_Config+0x1e8>)
 8002676:	66da      	str	r2, [r3, #108]	; 0x6c
	SX127X->reset_pin = RESET_COMM_TX_Pin;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800267e:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70

	status = SX127X_Reset(SX127X);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7fe fc8b 	bl	8000f9e <SX127X_Reset>
 8002688:	4603      	mov	r3, r0
 800268a:	73bb      	strb	r3, [r7, #14]
	if (status != HAL_OK) InitErrorCounter++;
 800268c:	7bbb      	ldrb	r3, [r7, #14]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d002      	beq.n	8002698 <LoRa_Config+0x58>
 8002692:	7bfb      	ldrb	r3, [r7, #15]
 8002694:	3301      	adds	r3, #1
 8002696:	73fb      	strb	r3, [r7, #15]

	status = SX127X_set_op_mode(SX127X, SLEEP);
 8002698:	2100      	movs	r1, #0
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7fe fca2 	bl	8000fe4 <SX127X_set_op_mode>
 80026a0:	4603      	mov	r3, r0
 80026a2:	73bb      	strb	r3, [r7, #14]
	if (status != HAL_OK) InitErrorCounter++;
 80026a4:	7bbb      	ldrb	r3, [r7, #14]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d002      	beq.n	80026b0 <LoRa_Config+0x70>
 80026aa:	7bfb      	ldrb	r3, [r7, #15]
 80026ac:	3301      	adds	r3, #1
 80026ae:	73fb      	strb	r3, [r7, #15]

	status = SX127X_set_modulation(SX127X, LORA_Modulation);
 80026b0:	2180      	movs	r1, #128	; 0x80
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7fe fd24 	bl	8001100 <SX127X_set_modulation>
 80026b8:	4603      	mov	r3, r0
 80026ba:	73bb      	strb	r3, [r7, #14]
	if (status != HAL_OK) InitErrorCounter++;
 80026bc:	7bbb      	ldrb	r3, [r7, #14]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d002      	beq.n	80026c8 <LoRa_Config+0x88>
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	3301      	adds	r3, #1
 80026c6:	73fb      	strb	r3, [r7, #15]

	status = SX127X_set_frequency(SX127X, 916E6); // remember to put the LoWFrequencyModeOn bit to its correct position
 80026c8:	4958      	ldr	r1, [pc, #352]	; (800282c <LoRa_Config+0x1ec>)
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7fe fda6 	bl	800121c <SX127X_set_frequency>
 80026d0:	4603      	mov	r3, r0
 80026d2:	73bb      	strb	r3, [r7, #14]
	if (status != HAL_OK) InitErrorCounter++;
 80026d4:	7bbb      	ldrb	r3, [r7, #14]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d002      	beq.n	80026e0 <LoRa_Config+0xa0>
 80026da:	7bfb      	ldrb	r3, [r7, #15]
 80026dc:	3301      	adds	r3, #1
 80026de:	73fb      	strb	r3, [r7, #15]

	status = SX127X_set_lna_gain(SX127X, LnaGainG1);
 80026e0:	2120      	movs	r1, #32
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7ff f89c 	bl	8001820 <SX127X_set_lna_gain>
 80026e8:	4603      	mov	r3, r0
 80026ea:	73bb      	strb	r3, [r7, #14]
	if (status != HAL_OK) InitErrorCounter++;
 80026ec:	7bbb      	ldrb	r3, [r7, #14]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d002      	beq.n	80026f8 <LoRa_Config+0xb8>
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
 80026f4:	3301      	adds	r3, #1
 80026f6:	73fb      	strb	r3, [r7, #15]

	status = SX127X_set_lna_boost(SX127X, false);
 80026f8:	2100      	movs	r1, #0
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7ff f8ec 	bl	80018d8 <SX127X_set_lna_boost>
 8002700:	4603      	mov	r3, r0
 8002702:	73bb      	strb	r3, [r7, #14]
	if (status != HAL_OK) InitErrorCounter++;
 8002704:	7bbb      	ldrb	r3, [r7, #14]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d002      	beq.n	8002710 <LoRa_Config+0xd0>
 800270a:	7bfb      	ldrb	r3, [r7, #15]
 800270c:	3301      	adds	r3, #1
 800270e:	73fb      	strb	r3, [r7, #15]

	// TX Config:

	status = SX127X_set_pa_output(SX127X, PA_BOOST_Pin);
 8002710:	2101      	movs	r1, #1
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7fe fe92 	bl	800143c <SX127X_set_pa_output>
 8002718:	4603      	mov	r3, r0
 800271a:	73bb      	strb	r3, [r7, #14]
	if (status != HAL_OK) InitErrorCounter++;
 800271c:	7bbb      	ldrb	r3, [r7, #14]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <LoRa_Config+0xe8>
 8002722:	7bfb      	ldrb	r3, [r7, #15]
 8002724:	3301      	adds	r3, #1
 8002726:	73fb      	strb	r3, [r7, #15]

	status = SX127X_set_tx_power(SX127X, 20);
 8002728:	2114      	movs	r1, #20
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7fe fea9 	bl	8001482 <SX127X_set_tx_power>
 8002730:	4603      	mov	r3, r0
 8002732:	73bb      	strb	r3, [r7, #14]
	if (status != HAL_OK) InitErrorCounter++;
 8002734:	7bbb      	ldrb	r3, [r7, #14]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d002      	beq.n	8002740 <LoRa_Config+0x100>
 800273a:	7bfb      	ldrb	r3, [r7, #15]
 800273c:	3301      	adds	r3, #1
 800273e:	73fb      	strb	r3, [r7, #15]

	// Specific Config:

	status = LoRa_set_FIFO_base_address(SX127X, 0x00, 0x00);
 8002740:	2200      	movs	r2, #0
 8002742:	2100      	movs	r1, #0
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f7ff fe64 	bl	8002412 <LoRa_set_FIFO_base_address>
 800274a:	4603      	mov	r3, r0
 800274c:	73bb      	strb	r3, [r7, #14]
	if (status != HAL_OK) InitErrorCounter++;
 800274e:	7bbb      	ldrb	r3, [r7, #14]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d002      	beq.n	800275a <LoRa_Config+0x11a>
 8002754:	7bfb      	ldrb	r3, [r7, #15]
 8002756:	3301      	adds	r3, #1
 8002758:	73fb      	strb	r3, [r7, #15]

	status = LoRa_set_signal_bandwidth(SX127X, LoRa_BW_125);
 800275a:	2170      	movs	r1, #112	; 0x70
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7ff f9d8 	bl	8001b12 <LoRa_set_signal_bandwidth>
 8002762:	4603      	mov	r3, r0
 8002764:	73bb      	strb	r3, [r7, #14]
	if (status != HAL_OK) InitErrorCounter++;
 8002766:	7bbb      	ldrb	r3, [r7, #14]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d002      	beq.n	8002772 <LoRa_Config+0x132>
 800276c:	7bfb      	ldrb	r3, [r7, #15]
 800276e:	3301      	adds	r3, #1
 8002770:	73fb      	strb	r3, [r7, #15]

	status = LoRa_set_spreading_factor(SX127X, 11);
 8002772:	210b      	movs	r1, #11
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7ff fa2e 	bl	8001bd6 <LoRa_set_spreading_factor>
 800277a:	4603      	mov	r3, r0
 800277c:	73bb      	strb	r3, [r7, #14]
	if (status != HAL_OK) InitErrorCounter++;
 800277e:	7bbb      	ldrb	r3, [r7, #14]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d002      	beq.n	800278a <LoRa_Config+0x14a>
 8002784:	7bfb      	ldrb	r3, [r7, #15]
 8002786:	3301      	adds	r3, #1
 8002788:	73fb      	strb	r3, [r7, #15]

	status = LoRa_set_coding_rate(SX127X, LoRa_CR_4_5);
 800278a:	2102      	movs	r1, #2
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7ff fafc 	bl	8001d8a <LoRa_set_coding_rate>
 8002792:	4603      	mov	r3, r0
 8002794:	73bb      	strb	r3, [r7, #14]
	if (status != HAL_OK) InitErrorCounter++;
 8002796:	7bbb      	ldrb	r3, [r7, #14]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d002      	beq.n	80027a2 <LoRa_Config+0x162>
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	3301      	adds	r3, #1
 80027a0:	73fb      	strb	r3, [r7, #15]

	status = LoRa_set_preamble_lenght(SX127X, 8);
 80027a2:	2108      	movs	r1, #8
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7ff fa80 	bl	8001caa <LoRa_set_preamble_lenght>
 80027aa:	4603      	mov	r3, r0
 80027ac:	73bb      	strb	r3, [r7, #14]
	if (status != HAL_OK) InitErrorCounter++;
 80027ae:	7bbb      	ldrb	r3, [r7, #14]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d002      	beq.n	80027ba <LoRa_Config+0x17a>
 80027b4:	7bfb      	ldrb	r3, [r7, #15]
 80027b6:	3301      	adds	r3, #1
 80027b8:	73fb      	strb	r3, [r7, #15]

	status = LoRa_set_sync_word(SX127X, 'A');
 80027ba:	2141      	movs	r1, #65	; 0x41
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7ff fac0 	bl	8001d42 <LoRa_set_sync_word>
 80027c2:	4603      	mov	r3, r0
 80027c4:	73bb      	strb	r3, [r7, #14]
	if (status != HAL_OK) InitErrorCounter++;
 80027c6:	7bbb      	ldrb	r3, [r7, #14]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d002      	beq.n	80027d2 <LoRa_Config+0x192>
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
 80027ce:	3301      	adds	r3, #1
 80027d0:	73fb      	strb	r3, [r7, #15]

	status = LoRa_enable_crc(SX127X);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7ff fb37 	bl	8001e46 <LoRa_enable_crc>
 80027d8:	4603      	mov	r3, r0
 80027da:	73bb      	strb	r3, [r7, #14]
	if (status != HAL_OK) InitErrorCounter++;
 80027dc:	7bbb      	ldrb	r3, [r7, #14]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d002      	beq.n	80027e8 <LoRa_Config+0x1a8>
 80027e2:	7bfb      	ldrb	r3, [r7, #15]
 80027e4:	3301      	adds	r3, #1
 80027e6:	73fb      	strb	r3, [r7, #15]

	status = SX127X_set_DIO_mapping(SX127X, 0b01000000, 0b00000000);
 80027e8:	2200      	movs	r2, #0
 80027ea:	2140      	movs	r1, #64	; 0x40
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7ff f896 	bl	800191e <SX127X_set_DIO_mapping>
 80027f2:	4603      	mov	r3, r0
 80027f4:	73bb      	strb	r3, [r7, #14]
	if (status != HAL_OK) InitErrorCounter++;
 80027f6:	7bbb      	ldrb	r3, [r7, #14]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d002      	beq.n	8002802 <LoRa_Config+0x1c2>
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
 80027fe:	3301      	adds	r3, #1
 8002800:	73fb      	strb	r3, [r7, #15]

	status = SX127X_set_op_mode(SX127X, STANDBY);
 8002802:	2101      	movs	r1, #1
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7fe fbed 	bl	8000fe4 <SX127X_set_op_mode>
 800280a:	4603      	mov	r3, r0
 800280c:	73bb      	strb	r3, [r7, #14]
	if (status != HAL_OK) InitErrorCounter++;
 800280e:	7bbb      	ldrb	r3, [r7, #14]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d002      	beq.n	800281a <LoRa_Config+0x1da>
 8002814:	7bfb      	ldrb	r3, [r7, #15]
 8002816:	3301      	adds	r3, #1
 8002818:	73fb      	strb	r3, [r7, #15]

	return status;
 800281a:	7bbb      	ldrb	r3, [r7, #14]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20000540 	.word	0x20000540
 8002828:	48000800 	.word	0x48000800
 800282c:	36990d00 	.word	0x36990d00

08002830 <get_gps_data>:
	if (status != HAL_OK) InitErrorCounter++;

	return status;
}

HAL_StatusTypeDef get_gps_data(ublox_gps_t gps, ublox_pvt_t *pvt, telemetry_packet_t *packet){
 8002830:	b5b0      	push	{r4, r5, r7, lr}
 8002832:	b08c      	sub	sp, #48	; 0x30
 8002834:	af02      	add	r7, sp, #8
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
	telemetry_packet_values_t packet_values;
	uint8_t attempts = 0;
 800283c:	2300      	movs	r3, #0
 800283e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	printf("\nCollecting GPS data.");
 8002842:	4864      	ldr	r0, [pc, #400]	; (80029d4 <get_gps_data+0x1a4>)
 8002844:	f005 fe9a 	bl	800857c <iprintf>

	while(ublox_get(gps, pvt) && attempts < 5){
 8002848:	e00c      	b.n	8002864 <get_gps_data+0x34>
		printf("\nFailed to collect GPS packet :(. %d out of 5 attempts.", attempts++);
 800284a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800284e:	1c5a      	adds	r2, r3, #1
 8002850:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8002854:	4619      	mov	r1, r3
 8002856:	4860      	ldr	r0, [pc, #384]	; (80029d8 <get_gps_data+0x1a8>)
 8002858:	f005 fe90 	bl	800857c <iprintf>
		HAL_Delay(1000);
 800285c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002860:	f001 f9cc 	bl	8003bfc <HAL_Delay>
	while(ublox_get(gps, pvt) && attempts < 5){
 8002864:	68b9      	ldr	r1, [r7, #8]
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 fe62 	bl	8003530 <ublox_get>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <get_gps_data+0x4a>
 8002872:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002876:	2b04      	cmp	r3, #4
 8002878:	d9e7      	bls.n	800284a <get_gps_data+0x1a>
	}

	if (attempts < 5) { // Check for errors
 800287a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800287e:	2b04      	cmp	r3, #4
 8002880:	f200 809f 	bhi.w	80029c2 <get_gps_data+0x192>
		packet_values.latitude = (float) pvt->lat / 1e7;
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	ee07 3a90 	vmov	s15, r3
 800288c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002890:	eddf 6a52 	vldr	s13, [pc, #328]	; 80029dc <get_gps_data+0x1ac>
 8002894:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002898:	edc7 7a05 	vstr	s15, [r7, #20]
		packet_values.longitude = (float) pvt->lng / 1e7;
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	ee07 3a90 	vmov	s15, r3
 80028a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028a8:	eddf 6a4c 	vldr	s13, [pc, #304]	; 80029dc <get_gps_data+0x1ac>
 80028ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028b0:	edc7 7a06 	vstr	s15, [r7, #24]
		packet_values.altitude = (float) pvt->hMSL / 1e3;
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b8:	ee07 3a90 	vmov	s15, r3
 80028bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028c0:	eddf 6a47 	vldr	s13, [pc, #284]	; 80029e0 <get_gps_data+0x1b0>
 80028c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028c8:	edc7 7a07 	vstr	s15, [r7, #28]
		packet_values.hours = pvt->hour;
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	7a1b      	ldrb	r3, [r3, #8]
 80028d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		packet_values.minutes = pvt->minute;
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	7a5b      	ldrb	r3, [r3, #9]
 80028d8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		packet_values.seconds = pvt->second;
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	7a9b      	ldrb	r3, [r3, #10]
 80028e0:	f887 3020 	strb.w	r3, [r7, #32]
		packet->values = packet_values;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	461d      	mov	r5, r3
 80028e8:	f107 0414 	add.w	r4, r7, #20
 80028ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028ee:	6028      	str	r0, [r5, #0]
 80028f0:	6069      	str	r1, [r5, #4]
 80028f2:	60aa      	str	r2, [r5, #8]
 80028f4:	60eb      	str	r3, [r5, #12]
 80028f6:	7823      	ldrb	r3, [r4, #0]
 80028f8:	742b      	strb	r3, [r5, #16]

		printf("\nCollected data:");
 80028fa:	483a      	ldr	r0, [pc, #232]	; (80029e4 <get_gps_data+0x1b4>)
 80028fc:	f005 fe3e 	bl	800857c <iprintf>
		printf("\nCoordiates (Lat,Long): %f,%f",packet_values.latitude, packet_values.longitude);
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	4618      	mov	r0, r3
 8002904:	f7fd fe20 	bl	8000548 <__aeabi_f2d>
 8002908:	4604      	mov	r4, r0
 800290a:	460d      	mov	r5, r1
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	4618      	mov	r0, r3
 8002910:	f7fd fe1a 	bl	8000548 <__aeabi_f2d>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	e9cd 2300 	strd	r2, r3, [sp]
 800291c:	4622      	mov	r2, r4
 800291e:	462b      	mov	r3, r5
 8002920:	4831      	ldr	r0, [pc, #196]	; (80029e8 <get_gps_data+0x1b8>)
 8002922:	f005 fe2b 	bl	800857c <iprintf>
		printf("\nAltitude: %f", packet_values.altitude);
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	4618      	mov	r0, r3
 800292a:	f7fd fe0d 	bl	8000548 <__aeabi_f2d>
 800292e:	4602      	mov	r2, r0
 8002930:	460b      	mov	r3, r1
 8002932:	482e      	ldr	r0, [pc, #184]	; (80029ec <get_gps_data+0x1bc>)
 8002934:	f005 fe22 	bl	800857c <iprintf>
		printf("\nCurrent Time: ");
 8002938:	482d      	ldr	r0, [pc, #180]	; (80029f0 <get_gps_data+0x1c0>)
 800293a:	f005 fe1f 	bl	800857c <iprintf>
		if(((packet_values.hours + TIMEZONE_OFFSET + 24) % 24 ) < 10) printf("0");
 800293e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002942:	f103 0115 	add.w	r1, r3, #21
 8002946:	4b2b      	ldr	r3, [pc, #172]	; (80029f4 <get_gps_data+0x1c4>)
 8002948:	fb83 2301 	smull	r2, r3, r3, r1
 800294c:	109a      	asrs	r2, r3, #2
 800294e:	17cb      	asrs	r3, r1, #31
 8002950:	1ad2      	subs	r2, r2, r3
 8002952:	4613      	mov	r3, r2
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	4413      	add	r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	1aca      	subs	r2, r1, r3
 800295c:	2a09      	cmp	r2, #9
 800295e:	dc02      	bgt.n	8002966 <get_gps_data+0x136>
 8002960:	2030      	movs	r0, #48	; 0x30
 8002962:	f005 fe23 	bl	80085ac <putchar>
		printf("%d:",(packet_values.hours + TIMEZONE_OFFSET + 24) % 24 );
 8002966:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800296a:	f103 0215 	add.w	r2, r3, #21
 800296e:	4b21      	ldr	r3, [pc, #132]	; (80029f4 <get_gps_data+0x1c4>)
 8002970:	fb83 1302 	smull	r1, r3, r3, r2
 8002974:	1099      	asrs	r1, r3, #2
 8002976:	17d3      	asrs	r3, r2, #31
 8002978:	1ac9      	subs	r1, r1, r3
 800297a:	460b      	mov	r3, r1
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	440b      	add	r3, r1
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	1ad1      	subs	r1, r2, r3
 8002984:	481c      	ldr	r0, [pc, #112]	; (80029f8 <get_gps_data+0x1c8>)
 8002986:	f005 fdf9 	bl	800857c <iprintf>
		if(packet_values.minutes < 10) printf("0");
 800298a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800298e:	2b09      	cmp	r3, #9
 8002990:	d802      	bhi.n	8002998 <get_gps_data+0x168>
 8002992:	2030      	movs	r0, #48	; 0x30
 8002994:	f005 fe0a 	bl	80085ac <putchar>
		printf("%d:",packet_values.minutes);
 8002998:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800299c:	4619      	mov	r1, r3
 800299e:	4816      	ldr	r0, [pc, #88]	; (80029f8 <get_gps_data+0x1c8>)
 80029a0:	f005 fdec 	bl	800857c <iprintf>
		if(packet_values.seconds < 10) printf("0");
 80029a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80029a8:	2b09      	cmp	r3, #9
 80029aa:	d802      	bhi.n	80029b2 <get_gps_data+0x182>
 80029ac:	2030      	movs	r0, #48	; 0x30
 80029ae:	f005 fdfd 	bl	80085ac <putchar>
		printf("%d\n",packet_values.seconds);
 80029b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80029b6:	4619      	mov	r1, r3
 80029b8:	4810      	ldr	r0, [pc, #64]	; (80029fc <get_gps_data+0x1cc>)
 80029ba:	f005 fddf 	bl	800857c <iprintf>
		return HAL_OK;
 80029be:	2300      	movs	r3, #0
 80029c0:	e003      	b.n	80029ca <get_gps_data+0x19a>

	}else{
		printf("\nFailed to collect GPS packet for real :(");
 80029c2:	480f      	ldr	r0, [pc, #60]	; (8002a00 <get_gps_data+0x1d0>)
 80029c4:	f005 fdda 	bl	800857c <iprintf>
		return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
	}
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3728      	adds	r7, #40	; 0x28
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bdb0      	pop	{r4, r5, r7, pc}
 80029d2:	bf00      	nop
 80029d4:	0800a6c0 	.word	0x0800a6c0
 80029d8:	0800a6d8 	.word	0x0800a6d8
 80029dc:	4b189680 	.word	0x4b189680
 80029e0:	447a0000 	.word	0x447a0000
 80029e4:	0800a710 	.word	0x0800a710
 80029e8:	0800a724 	.word	0x0800a724
 80029ec:	0800a744 	.word	0x0800a744
 80029f0:	0800a754 	.word	0x0800a754
 80029f4:	2aaaaaab 	.word	0x2aaaaaab
 80029f8:	0800a764 	.word	0x0800a764
 80029fc:	0800a768 	.word	0x0800a768
 8002a00:	0800a76c 	.word	0x0800a76c

08002a04 <telemetry_transmit>:

HAL_StatusTypeDef telemetry_transmit(SX127X_t *SX127X, telemetry_packet_t packet){
 8002a04:	b084      	sub	sp, #16
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b084      	sub	sp, #16
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
 8002a0e:	f107 001c 	add.w	r0, r7, #28
 8002a12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	HAL_StatusTypeDef status = HAL_OK;
 8002a16:	2300      	movs	r3, #0
 8002a18:	73fb      	strb	r3, [r7, #15]
	unsigned long time_stamp = HAL_GetTick();
 8002a1a:	f001 f8e3 	bl	8003be4 <HAL_GetTick>
 8002a1e:	60b8      	str	r0, [r7, #8]

	status = LoRa_Transmit(SX127X, packet.raw, sizeof(packet.raw));
 8002a20:	f107 031c 	add.w	r3, r7, #28
 8002a24:	2211      	movs	r2, #17
 8002a26:	4619      	mov	r1, r3
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f7ff fbd7 	bl	80021dc <LoRa_Transmit>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return HAL_ERROR;
 8002a32:	7bfb      	ldrb	r3, [r7, #15]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <telemetry_transmit+0x38>
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e03a      	b.n	8002ab2 <telemetry_transmit+0xae>

	status = HAL_BUSY;
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	73fb      	strb	r3, [r7, #15]

	while(!DIO0){ // wait for the radio to finish transmitting. Yes I'm aware this is polling and shit :)
 8002a40:	e00d      	b.n	8002a5e <telemetry_transmit+0x5a>
		if(HAL_GetTick() - time_stamp > TRANSMISSION_TIMEOUT){
 8002a42:	f001 f8cf 	bl	8003be4 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002a50:	d902      	bls.n	8002a58 <telemetry_transmit+0x54>
			status = HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	73fb      	strb	r3, [r7, #15]
			break;
 8002a56:	e009      	b.n	8002a6c <telemetry_transmit+0x68>
		}

		HAL_Delay(10);
 8002a58:	200a      	movs	r0, #10
 8002a5a:	f001 f8cf 	bl	8003bfc <HAL_Delay>
	while(!DIO0){ // wait for the radio to finish transmitting. Yes I'm aware this is polling and shit :)
 8002a5e:	4b18      	ldr	r3, [pc, #96]	; (8002ac0 <telemetry_transmit+0xbc>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	f083 0301 	eor.w	r3, r3, #1
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1ea      	bne.n	8002a42 <telemetry_transmit+0x3e>
	}

	if(DIO0 && status == HAL_BUSY) {
 8002a6c:	4b14      	ldr	r3, [pc, #80]	; (8002ac0 <telemetry_transmit+0xbc>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d007      	beq.n	8002a84 <telemetry_transmit+0x80>
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d104      	bne.n	8002a84 <telemetry_transmit+0x80>
		printf("\nPacket has been sent successfully! :)");
 8002a7a:	4812      	ldr	r0, [pc, #72]	; (8002ac4 <telemetry_transmit+0xc0>)
 8002a7c:	f005 fd7e 	bl	800857c <iprintf>
		return HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	e016      	b.n	8002ab2 <telemetry_transmit+0xae>
	}else{
		printf("\nRadio took way too long, something went wrong :(");
 8002a84:	4810      	ldr	r0, [pc, #64]	; (8002ac8 <telemetry_transmit+0xc4>)
 8002a86:	f005 fd79 	bl	800857c <iprintf>
		printf("\nReseting and reconfiguring the radio for the next time around.");
 8002a8a:	4810      	ldr	r0, [pc, #64]	; (8002acc <telemetry_transmit+0xc8>)
 8002a8c:	f005 fd76 	bl	800857c <iprintf>
		SX127X_Reset(SX127X);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f7fe fa84 	bl	8000f9e <SX127X_Reset>
		if(LoRa_Config(SX127X) == HAL_OK) printf( "\nAll configurations succeeded :)\n");
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7ff fdd2 	bl	8002640 <LoRa_Config>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d103      	bne.n	8002aaa <telemetry_transmit+0xa6>
 8002aa2:	480b      	ldr	r0, [pc, #44]	; (8002ad0 <telemetry_transmit+0xcc>)
 8002aa4:	f005 fe06 	bl	80086b4 <puts>
 8002aa8:	e002      	b.n	8002ab0 <telemetry_transmit+0xac>
		else printf( "\nErrors were found during configuration. Fuck.\n");
 8002aaa:	480a      	ldr	r0, [pc, #40]	; (8002ad4 <telemetry_transmit+0xd0>)
 8002aac:	f005 fe02 	bl	80086b4 <puts>
		return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
	}
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002abc:	b004      	add	sp, #16
 8002abe:	4770      	bx	lr
 8002ac0:	20000314 	.word	0x20000314
 8002ac4:	0800a798 	.word	0x0800a798
 8002ac8:	0800a7c0 	.word	0x0800a7c0
 8002acc:	0800a7f4 	.word	0x0800a7f4
 8002ad0:	0800a834 	.word	0x0800a834
 8002ad4:	0800a858 	.word	0x0800a858

08002ad8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ada:	b0d3      	sub	sp, #332	; 0x14c
 8002adc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ade:	f001 f811 	bl	8003b04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ae2:	f000 f97b 	bl	8002ddc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ae6:	f7ff fce3 	bl	80024b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002aea:	f000 ff09 	bl	8003900 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8002aee:	f000 f9df 	bl	8002eb0 <MX_SPI2_Init>
  MX_UART4_Init();
 8002af2:	f000 fecd 	bl	8003890 <MX_UART4_Init>

	//  HAL_UARTEx_ReceiveToIdle_DMA(huart, pData, Size)



	printf("\n\n ------------------------------------------------------\r\n");
 8002af6:	4899      	ldr	r0, [pc, #612]	; (8002d5c <main+0x284>)
 8002af8:	f005 fddc 	bl	80086b4 <puts>
	printf(" ----- Caurin Tracker - Zenith GPS Tracker v.1.0  -----\r\n");
 8002afc:	4898      	ldr	r0, [pc, #608]	; (8002d60 <main+0x288>)
 8002afe:	f005 fdd9 	bl	80086b4 <puts>
	printf(" ------------------------------------------------------\r\n\n\n");
 8002b02:	4898      	ldr	r0, [pc, #608]	; (8002d64 <main+0x28c>)
 8002b04:	f005 fdd6 	bl	80086b4 <puts>



	printf("Configuring GPS Module.\r\n");
 8002b08:	4897      	ldr	r0, [pc, #604]	; (8002d68 <main+0x290>)
 8002b0a:	f005 fdd3 	bl	80086b4 <puts>
	uart_connection_t conn = { .uart = &huart4 };
 8002b0e:	4b97      	ldr	r3, [pc, #604]	; (8002d6c <main+0x294>)
 8002b10:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	ublox_gps_t gps = { .conn = conn };
 8002b14:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002b18:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	ublox_pvt_t pvt;
	ublox_init(gps);
 8002b1c:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 8002b20:	f000 fe0c 	bl	800373c <ublox_init>
	HAL_Delay(3000);
 8002b24:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002b28:	f001 f868 	bl	8003bfc <HAL_Delay>

	MX_UART4_Init();
 8002b2c:	f000 feb0 	bl	8003890 <MX_UART4_Init>

	ublox_nav_status_t gps_status;

	ublox_power_mode_setup(gps, BALANCED, 0, 0);
 8002b30:	2300      	movs	r3, #0
 8002b32:	2200      	movs	r2, #0
 8002b34:	2101      	movs	r1, #1
 8002b36:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 8002b3a:	f000 fe11 	bl	8003760 <ublox_power_mode_setup>

	printf("Configuring Radio (LoRa).\r\n");
 8002b3e:	488c      	ldr	r0, [pc, #560]	; (8002d70 <main+0x298>)
 8002b40:	f005 fdb8 	bl	80086b4 <puts>
	SX127X_t SX127X;
	if(LoRa_Config(&SX127X) == HAL_OK) printf( "\nAll configurations succeeded :)\r\n");
 8002b44:	463b      	mov	r3, r7
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff fd7a 	bl	8002640 <LoRa_Config>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d103      	bne.n	8002b5a <main+0x82>
 8002b52:	4888      	ldr	r0, [pc, #544]	; (8002d74 <main+0x29c>)
 8002b54:	f005 fdae 	bl	80086b4 <puts>
 8002b58:	e002      	b.n	8002b60 <main+0x88>
	else printf( "\nErrors were found during configurations. Fuck.\r\n");
 8002b5a:	4887      	ldr	r0, [pc, #540]	; (8002d78 <main+0x2a0>)
 8002b5c:	f005 fdaa 	bl	80086b4 <puts>

	printf("\nWaiting for GPS fix.\r\n");
 8002b60:	4886      	ldr	r0, [pc, #536]	; (8002d7c <main+0x2a4>)
 8002b62:	f005 fda7 	bl	80086b4 <puts>
    /* USER CODE BEGIN 3 */

		while(1){

			//MX_UART4_Init();
			fixed = ublox_check_fix(gps, &gps_status);
 8002b66:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 8002b70:	f000 fd6a 	bl	8003648 <ublox_check_fix>
 8002b74:	4603      	mov	r3, r0
 8002b76:	461a      	mov	r2, r3
 8002b78:	4b81      	ldr	r3, [pc, #516]	; (8002d80 <main+0x2a8>)
 8002b7a:	701a      	strb	r2, [r3, #0]

			HAL_Delay(1000);
 8002b7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b80:	f001 f83c 	bl	8003bfc <HAL_Delay>
			printf(".\r\n");
 8002b84:	487f      	ldr	r0, [pc, #508]	; (8002d84 <main+0x2ac>)
 8002b86:	f005 fd95 	bl	80086b4 <puts>
			printf("Time: %d\r\n", gps_status.time);
 8002b8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b8e:	4619      	mov	r1, r3
 8002b90:	487d      	ldr	r0, [pc, #500]	; (8002d88 <main+0x2b0>)
 8002b92:	f005 fcf3 	bl	800857c <iprintf>
			printf("Fix type: %d\r\n", gps_status.fixType);
 8002b96:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	487b      	ldr	r0, [pc, #492]	; (8002d8c <main+0x2b4>)
 8002b9e:	f005 fced 	bl	800857c <iprintf>
			printf("Flags: %d\r\n", gps_status.flags);
 8002ba2:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4879      	ldr	r0, [pc, #484]	; (8002d90 <main+0x2b8>)
 8002baa:	f005 fce7 	bl	800857c <iprintf>
			printf("FixStat: %d\r\n", gps_status.fixStat);
 8002bae:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4877      	ldr	r0, [pc, #476]	; (8002d94 <main+0x2bc>)
 8002bb6:	f005 fce1 	bl	800857c <iprintf>
			printf("Flags2: %d\r\n", gps_status.flags2);
 8002bba:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4875      	ldr	r0, [pc, #468]	; (8002d98 <main+0x2c0>)
 8002bc2:	f005 fcdb 	bl	800857c <iprintf>
			printf("ttff: %d\r\n", gps_status.ttff);
 8002bc6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4873      	ldr	r0, [pc, #460]	; (8002d9c <main+0x2c4>)
 8002bce:	f005 fcd5 	bl	800857c <iprintf>
			printf("msss: %d\r\n\n", gps_status.msss);
 8002bd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4871      	ldr	r0, [pc, #452]	; (8002da0 <main+0x2c8>)
 8002bda:	f005 fccf 	bl	800857c <iprintf>

			if(HAL_GetTick() - fix_search_time_stamp < FIX_SEARCH_TIMEOUT && fixed == true){
 8002bde:	f001 f801 	bl	8003be4 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	4b6f      	ldr	r3, [pc, #444]	; (8002da4 <main+0x2cc>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	4a6f      	ldr	r2, [pc, #444]	; (8002da8 <main+0x2d0>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d807      	bhi.n	8002c00 <main+0x128>
 8002bf0:	4b63      	ldr	r3, [pc, #396]	; (8002d80 <main+0x2a8>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <main+0x128>
				state_machine_status = HAL_OK;
 8002bf8:	4b6c      	ldr	r3, [pc, #432]	; (8002dac <main+0x2d4>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	701a      	strb	r2, [r3, #0]
				break;
 8002bfe:	e019      	b.n	8002c34 <main+0x15c>
			} else if(HAL_GetTick() - fix_search_time_stamp > FIX_SEARCH_TIMEOUT){
 8002c00:	f000 fff0 	bl	8003be4 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	4b67      	ldr	r3, [pc, #412]	; (8002da4 <main+0x2cc>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	4a68      	ldr	r2, [pc, #416]	; (8002db0 <main+0x2d8>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d90c      	bls.n	8002c2c <main+0x154>
				printf("Fix search timeout. Sleeping for one minute.\r\n");
 8002c12:	4868      	ldr	r0, [pc, #416]	; (8002db4 <main+0x2dc>)
 8002c14:	f005 fd4e 	bl	80086b4 <puts>
				state_machine_status = HAL_TIMEOUT;
 8002c18:	4b64      	ldr	r3, [pc, #400]	; (8002dac <main+0x2d4>)
 8002c1a:	2203      	movs	r2, #3
 8002c1c:	701a      	strb	r2, [r3, #0]
				ublox_power_management_request(gps, 60000); // Sleep GPS for 60 seconds
 8002c1e:	f64e 2160 	movw	r1, #60000	; 0xea60
 8002c22:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 8002c26:	f000 fdef 	bl	8003808 <ublox_power_management_request>
				break;
 8002c2a:	e003      	b.n	8002c34 <main+0x15c>
			}else{
				state_machine_status = HAL_OK;
 8002c2c:	4b5f      	ldr	r3, [pc, #380]	; (8002dac <main+0x2d4>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	701a      	strb	r2, [r3, #0]
			fixed = ublox_check_fix(gps, &gps_status);
 8002c32:	e798      	b.n	8002b66 <main+0x8e>
			}
		}


		if(state_machine_status != HAL_TIMEOUT){ // GPS data was acquired successfully, lets transmit
 8002c34:	4b5d      	ldr	r3, [pc, #372]	; (8002dac <main+0x2d4>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b03      	cmp	r3, #3
 8002c3a:	d078      	beq.n	8002d2e <main+0x256>
			printf("\nGPS fixed! Putting the GPS to sleep and transmitting packet six times.\r\n");
 8002c3c:	485e      	ldr	r0, [pc, #376]	; (8002db8 <main+0x2e0>)
 8002c3e:	f005 fd39 	bl	80086b4 <puts>
			get_gps_data(gps, &pvt, &telemetry_packet);
 8002c42:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002c46:	4a5d      	ldr	r2, [pc, #372]	; (8002dbc <main+0x2e4>)
 8002c48:	4619      	mov	r1, r3
 8002c4a:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 8002c4e:	f7ff fdef 	bl	8002830 <get_gps_data>
			ublox_power_management_request(gps, 60000); // Sleep GPS for 60 seconds
 8002c52:	f64e 2160 	movw	r1, #60000	; 0xea60
 8002c56:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 8002c5a:	f000 fdd5 	bl	8003808 <ublox_power_management_request>
			telemetry_packet.values.packet_id = packet_counter ++;
 8002c5e:	4b58      	ldr	r3, [pc, #352]	; (8002dc0 <main+0x2e8>)
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	1c5a      	adds	r2, r3, #1
 8002c64:	b291      	uxth	r1, r2
 8002c66:	4a56      	ldr	r2, [pc, #344]	; (8002dc0 <main+0x2e8>)
 8002c68:	8011      	strh	r1, [r2, #0]
 8002c6a:	4a54      	ldr	r2, [pc, #336]	; (8002dbc <main+0x2e4>)
 8002c6c:	f8a2 300f 	strh.w	r3, [r2, #15]
			for(uint8_t i = 0; i < 6; i++){
 8002c70:	2300      	movs	r3, #0
 8002c72:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8002c76:	e044      	b.n	8002d02 <main+0x22a>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8002c78:	2201      	movs	r2, #1
 8002c7a:	2140      	movs	r1, #64	; 0x40
 8002c7c:	4851      	ldr	r0, [pc, #324]	; (8002dc4 <main+0x2ec>)
 8002c7e:	f001 fb1b 	bl	80042b8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EXTERNAL_GPIO_GPIO_Port, EXTERNAL_GPIO_Pin, GPIO_PIN_SET);
 8002c82:	2201      	movs	r2, #1
 8002c84:	2110      	movs	r1, #16
 8002c86:	4850      	ldr	r0, [pc, #320]	; (8002dc8 <main+0x2f0>)
 8002c88:	f001 fb16 	bl	80042b8 <HAL_GPIO_WritePin>
				transmitter_status = telemetry_transmit(&SX127X, telemetry_packet);
 8002c8c:	4b4b      	ldr	r3, [pc, #300]	; (8002dbc <main+0x2e4>)
 8002c8e:	463c      	mov	r4, r7
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	2100      	movs	r1, #0
 8002c94:	4611      	mov	r1, r2
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	2600      	movs	r6, #0
 8002c9a:	4616      	mov	r6, r2
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	2500      	movs	r5, #0
 8002ca0:	4615      	mov	r5, r2
 8002ca2:	466a      	mov	r2, sp
 8002ca4:	330c      	adds	r3, #12
 8002ca6:	6818      	ldr	r0, [r3, #0]
 8002ca8:	6010      	str	r0, [r2, #0]
 8002caa:	791b      	ldrb	r3, [r3, #4]
 8002cac:	7113      	strb	r3, [r2, #4]
 8002cae:	4632      	mov	r2, r6
 8002cb0:	462b      	mov	r3, r5
 8002cb2:	4620      	mov	r0, r4
 8002cb4:	f7ff fea6 	bl	8002a04 <telemetry_transmit>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	461a      	mov	r2, r3
 8002cbc:	4b43      	ldr	r3, [pc, #268]	; (8002dcc <main+0x2f4>)
 8002cbe:	701a      	strb	r2, [r3, #0]
				if(transmitter_status == HAL_OK) printf(" Packet number %d sent!\r\n", packet_counter);
 8002cc0:	4b42      	ldr	r3, [pc, #264]	; (8002dcc <main+0x2f4>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d106      	bne.n	8002cd6 <main+0x1fe>
 8002cc8:	4b3d      	ldr	r3, [pc, #244]	; (8002dc0 <main+0x2e8>)
 8002cca:	881b      	ldrh	r3, [r3, #0]
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4840      	ldr	r0, [pc, #256]	; (8002dd0 <main+0x2f8>)
 8002cd0:	f005 fc54 	bl	800857c <iprintf>
 8002cd4:	e002      	b.n	8002cdc <main+0x204>
				else printf("Error transmitting message.\r\n");
 8002cd6:	483f      	ldr	r0, [pc, #252]	; (8002dd4 <main+0x2fc>)
 8002cd8:	f005 fcec 	bl	80086b4 <puts>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002cdc:	2200      	movs	r2, #0
 8002cde:	2140      	movs	r1, #64	; 0x40
 8002ce0:	4838      	ldr	r0, [pc, #224]	; (8002dc4 <main+0x2ec>)
 8002ce2:	f001 fae9 	bl	80042b8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EXTERNAL_GPIO_GPIO_Port, EXTERNAL_GPIO_Pin, GPIO_PIN_RESET);
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2110      	movs	r1, #16
 8002cea:	4837      	ldr	r0, [pc, #220]	; (8002dc8 <main+0x2f0>)
 8002cec:	f001 fae4 	bl	80042b8 <HAL_GPIO_WritePin>
				HAL_Delay(14000);
 8002cf0:	f243 60b0 	movw	r0, #14000	; 0x36b0
 8002cf4:	f000 ff82 	bl	8003bfc <HAL_Delay>
			for(uint8_t i = 0; i < 6; i++){
 8002cf8:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8002d02:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8002d06:	2b05      	cmp	r3, #5
 8002d08:	d9b6      	bls.n	8002c78 <main+0x1a0>
			}

			HAL_Delay(1000);
 8002d0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d0e:	f000 ff75 	bl	8003bfc <HAL_Delay>
			printf("\nBeginning new fix search.\r\n");
 8002d12:	4831      	ldr	r0, [pc, #196]	; (8002dd8 <main+0x300>)
 8002d14:	f005 fcce 	bl	80086b4 <puts>
			ublox_init(gps);
 8002d18:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 8002d1c:	f000 fd0e 	bl	800373c <ublox_init>
			HAL_Delay(4000);
 8002d20:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002d24:	f000 ff6a 	bl	8003bfc <HAL_Delay>
			MX_UART4_Init();
 8002d28:	f000 fdb2 	bl	8003890 <MX_UART4_Init>
 8002d2c:	e010      	b.n	8002d50 <main+0x278>

		}else{
			HAL_Delay(61000); // Wait for the next search session
 8002d2e:	f64e 6048 	movw	r0, #61000	; 0xee48
 8002d32:	f000 ff63 	bl	8003bfc <HAL_Delay>
			printf("\nBeginning new fix search.\r\n");
 8002d36:	4828      	ldr	r0, [pc, #160]	; (8002dd8 <main+0x300>)
 8002d38:	f005 fcbc 	bl	80086b4 <puts>
			ublox_init(gps);
 8002d3c:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 8002d40:	f000 fcfc 	bl	800373c <ublox_init>
			HAL_Delay(4000);
 8002d44:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002d48:	f000 ff58 	bl	8003bfc <HAL_Delay>
			MX_UART4_Init();
 8002d4c:	f000 fda0 	bl	8003890 <MX_UART4_Init>
		}

		fix_search_time_stamp = HAL_GetTick();
 8002d50:	f000 ff48 	bl	8003be4 <HAL_GetTick>
 8002d54:	4603      	mov	r3, r0
 8002d56:	4a13      	ldr	r2, [pc, #76]	; (8002da4 <main+0x2cc>)
 8002d58:	6013      	str	r3, [r2, #0]
	while (1)
 8002d5a:	e704      	b.n	8002b66 <main+0x8e>
 8002d5c:	0800a888 	.word	0x0800a888
 8002d60:	0800a8c4 	.word	0x0800a8c4
 8002d64:	0800a900 	.word	0x0800a900
 8002d68:	0800a93c 	.word	0x0800a93c
 8002d6c:	200005a4 	.word	0x200005a4
 8002d70:	0800a958 	.word	0x0800a958
 8002d74:	0800a974 	.word	0x0800a974
 8002d78:	0800a998 	.word	0x0800a998
 8002d7c:	0800a9cc 	.word	0x0800a9cc
 8002d80:	20000222 	.word	0x20000222
 8002d84:	0800a9e4 	.word	0x0800a9e4
 8002d88:	0800a9e8 	.word	0x0800a9e8
 8002d8c:	0800a9f4 	.word	0x0800a9f4
 8002d90:	0800aa04 	.word	0x0800aa04
 8002d94:	0800aa10 	.word	0x0800aa10
 8002d98:	0800aa20 	.word	0x0800aa20
 8002d9c:	0800aa30 	.word	0x0800aa30
 8002da0:	0800aa3c 	.word	0x0800aa3c
 8002da4:	20000224 	.word	0x20000224
 8002da8:	0001d4bf 	.word	0x0001d4bf
 8002dac:	20000220 	.word	0x20000220
 8002db0:	0001d4c0 	.word	0x0001d4c0
 8002db4:	0800aa48 	.word	0x0800aa48
 8002db8:	0800aa78 	.word	0x0800aa78
 8002dbc:	2000042c 	.word	0x2000042c
 8002dc0:	20000000 	.word	0x20000000
 8002dc4:	48000800 	.word	0x48000800
 8002dc8:	48000400 	.word	0x48000400
 8002dcc:	20000221 	.word	0x20000221
 8002dd0:	0800aac4 	.word	0x0800aac4
 8002dd4:	0800aae0 	.word	0x0800aae0
 8002dd8:	0800ab00 	.word	0x0800ab00

08002ddc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b096      	sub	sp, #88	; 0x58
 8002de0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002de2:	f107 0314 	add.w	r3, r7, #20
 8002de6:	2244      	movs	r2, #68	; 0x44
 8002de8:	2100      	movs	r1, #0
 8002dea:	4618      	mov	r0, r3
 8002dec:	f004 feaa 	bl	8007b44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002df0:	463b      	mov	r3, r7
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	605a      	str	r2, [r3, #4]
 8002df8:	609a      	str	r2, [r3, #8]
 8002dfa:	60da      	str	r2, [r3, #12]
 8002dfc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002dfe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002e02:	f001 faa3 	bl	800434c <HAL_PWREx_ControlVoltageScaling>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002e0c:	f000 f84a 	bl	8002ea4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e10:	2302      	movs	r3, #2
 8002e12:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e18:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e1a:	2310      	movs	r3, #16
 8002e1c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e1e:	2302      	movs	r3, #2
 8002e20:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002e22:	2302      	movs	r3, #2
 8002e24:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002e26:	2301      	movs	r3, #1
 8002e28:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002e2a:	230a      	movs	r3, #10
 8002e2c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002e2e:	2307      	movs	r3, #7
 8002e30:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002e32:	2302      	movs	r3, #2
 8002e34:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8002e36:	2304      	movs	r3, #4
 8002e38:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e3a:	f107 0314 	add.w	r3, r7, #20
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f001 fada 	bl	80043f8 <HAL_RCC_OscConfig>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002e4a:	f000 f82b 	bl	8002ea4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e4e:	230f      	movs	r3, #15
 8002e50:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e52:	2303      	movs	r3, #3
 8002e54:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e56:	2300      	movs	r3, #0
 8002e58:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e62:	463b      	mov	r3, r7
 8002e64:	2102      	movs	r1, #2
 8002e66:	4618      	mov	r0, r3
 8002e68:	f001 fea0 	bl	8004bac <HAL_RCC_ClockConfig>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002e72:	f000 f817 	bl	8002ea4 <Error_Handler>
  }
}
 8002e76:	bf00      	nop
 8002e78:	3758      	adds	r7, #88	; 0x58
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8002e88:	1d39      	adds	r1, r7, #4
 8002e8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e8e:	2201      	movs	r2, #1
 8002e90:	4803      	ldr	r0, [pc, #12]	; (8002ea0 <__io_putchar+0x20>)
 8002e92:	f003 fcc9 	bl	8006828 <HAL_UART_Transmit>

	return ch;
 8002e96:	687b      	ldr	r3, [r7, #4]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	20000628 	.word	0x20000628

08002ea4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ea8:	b672      	cpsid	i
}
 8002eaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002eac:	e7fe      	b.n	8002eac <Error_Handler+0x8>
	...

08002eb0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002eb4:	4b1b      	ldr	r3, [pc, #108]	; (8002f24 <MX_SPI2_Init+0x74>)
 8002eb6:	4a1c      	ldr	r2, [pc, #112]	; (8002f28 <MX_SPI2_Init+0x78>)
 8002eb8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002eba:	4b1a      	ldr	r3, [pc, #104]	; (8002f24 <MX_SPI2_Init+0x74>)
 8002ebc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ec0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002ec2:	4b18      	ldr	r3, [pc, #96]	; (8002f24 <MX_SPI2_Init+0x74>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ec8:	4b16      	ldr	r3, [pc, #88]	; (8002f24 <MX_SPI2_Init+0x74>)
 8002eca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ece:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ed0:	4b14      	ldr	r3, [pc, #80]	; (8002f24 <MX_SPI2_Init+0x74>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ed6:	4b13      	ldr	r3, [pc, #76]	; (8002f24 <MX_SPI2_Init+0x74>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002edc:	4b11      	ldr	r3, [pc, #68]	; (8002f24 <MX_SPI2_Init+0x74>)
 8002ede:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ee2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002ee4:	4b0f      	ldr	r3, [pc, #60]	; (8002f24 <MX_SPI2_Init+0x74>)
 8002ee6:	2208      	movs	r2, #8
 8002ee8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002eea:	4b0e      	ldr	r3, [pc, #56]	; (8002f24 <MX_SPI2_Init+0x74>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ef0:	4b0c      	ldr	r3, [pc, #48]	; (8002f24 <MX_SPI2_Init+0x74>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ef6:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <MX_SPI2_Init+0x74>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002efc:	4b09      	ldr	r3, [pc, #36]	; (8002f24 <MX_SPI2_Init+0x74>)
 8002efe:	2207      	movs	r2, #7
 8002f00:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002f02:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <MX_SPI2_Init+0x74>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002f08:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <MX_SPI2_Init+0x74>)
 8002f0a:	2208      	movs	r2, #8
 8002f0c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002f0e:	4805      	ldr	r0, [pc, #20]	; (8002f24 <MX_SPI2_Init+0x74>)
 8002f10:	f002 fd2c 	bl	800596c <HAL_SPI_Init>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002f1a:	f7ff ffc3 	bl	8002ea4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002f1e:	bf00      	nop
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20000540 	.word	0x20000540
 8002f28:	40003800 	.word	0x40003800

08002f2c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08a      	sub	sp, #40	; 0x28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f34:	f107 0314 	add.w	r3, r7, #20
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	605a      	str	r2, [r3, #4]
 8002f3e:	609a      	str	r2, [r3, #8]
 8002f40:	60da      	str	r2, [r3, #12]
 8002f42:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a25      	ldr	r2, [pc, #148]	; (8002fe0 <HAL_SPI_MspInit+0xb4>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d144      	bne.n	8002fd8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f4e:	4b25      	ldr	r3, [pc, #148]	; (8002fe4 <HAL_SPI_MspInit+0xb8>)
 8002f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f52:	4a24      	ldr	r2, [pc, #144]	; (8002fe4 <HAL_SPI_MspInit+0xb8>)
 8002f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f58:	6593      	str	r3, [r2, #88]	; 0x58
 8002f5a:	4b22      	ldr	r3, [pc, #136]	; (8002fe4 <HAL_SPI_MspInit+0xb8>)
 8002f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f62:	613b      	str	r3, [r7, #16]
 8002f64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f66:	4b1f      	ldr	r3, [pc, #124]	; (8002fe4 <HAL_SPI_MspInit+0xb8>)
 8002f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f6a:	4a1e      	ldr	r2, [pc, #120]	; (8002fe4 <HAL_SPI_MspInit+0xb8>)
 8002f6c:	f043 0304 	orr.w	r3, r3, #4
 8002f70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f72:	4b1c      	ldr	r3, [pc, #112]	; (8002fe4 <HAL_SPI_MspInit+0xb8>)
 8002f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f76:	f003 0304 	and.w	r3, r3, #4
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f7e:	4b19      	ldr	r3, [pc, #100]	; (8002fe4 <HAL_SPI_MspInit+0xb8>)
 8002f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f82:	4a18      	ldr	r2, [pc, #96]	; (8002fe4 <HAL_SPI_MspInit+0xb8>)
 8002f84:	f043 0302 	orr.w	r3, r3, #2
 8002f88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f8a:	4b16      	ldr	r3, [pc, #88]	; (8002fe4 <HAL_SPI_MspInit+0xb8>)
 8002f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	60bb      	str	r3, [r7, #8]
 8002f94:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002f96:	230c      	movs	r3, #12
 8002f98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002fa6:	2305      	movs	r3, #5
 8002fa8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002faa:	f107 0314 	add.w	r3, r7, #20
 8002fae:	4619      	mov	r1, r3
 8002fb0:	480d      	ldr	r0, [pc, #52]	; (8002fe8 <HAL_SPI_MspInit+0xbc>)
 8002fb2:	f000 ffd7 	bl	8003f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002fb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002fc8:	2305      	movs	r3, #5
 8002fca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fcc:	f107 0314 	add.w	r3, r7, #20
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4806      	ldr	r0, [pc, #24]	; (8002fec <HAL_SPI_MspInit+0xc0>)
 8002fd4:	f000 ffc6 	bl	8003f64 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002fd8:	bf00      	nop
 8002fda:	3728      	adds	r7, #40	; 0x28
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40003800 	.word	0x40003800
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	48000800 	.word	0x48000800
 8002fec:	48000400 	.word	0x48000400

08002ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ff6:	4b0f      	ldr	r3, [pc, #60]	; (8003034 <HAL_MspInit+0x44>)
 8002ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ffa:	4a0e      	ldr	r2, [pc, #56]	; (8003034 <HAL_MspInit+0x44>)
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	6613      	str	r3, [r2, #96]	; 0x60
 8003002:	4b0c      	ldr	r3, [pc, #48]	; (8003034 <HAL_MspInit+0x44>)
 8003004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	607b      	str	r3, [r7, #4]
 800300c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800300e:	4b09      	ldr	r3, [pc, #36]	; (8003034 <HAL_MspInit+0x44>)
 8003010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003012:	4a08      	ldr	r2, [pc, #32]	; (8003034 <HAL_MspInit+0x44>)
 8003014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003018:	6593      	str	r3, [r2, #88]	; 0x58
 800301a:	4b06      	ldr	r3, [pc, #24]	; (8003034 <HAL_MspInit+0x44>)
 800301c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003022:	603b      	str	r3, [r7, #0]
 8003024:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40021000 	.word	0x40021000

08003038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800303c:	e7fe      	b.n	800303c <NMI_Handler+0x4>

0800303e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800303e:	b480      	push	{r7}
 8003040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003042:	e7fe      	b.n	8003042 <HardFault_Handler+0x4>

08003044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003048:	e7fe      	b.n	8003048 <MemManage_Handler+0x4>

0800304a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800304a:	b480      	push	{r7}
 800304c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800304e:	e7fe      	b.n	800304e <BusFault_Handler+0x4>

08003050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003054:	e7fe      	b.n	8003054 <UsageFault_Handler+0x4>

08003056 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003056:	b480      	push	{r7}
 8003058:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800305a:	bf00      	nop
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003068:	bf00      	nop
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003072:	b480      	push	{r7}
 8003074:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003076:	bf00      	nop
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003084:	f000 fd9a 	bl	8003bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003088:	bf00      	nop
 800308a:	bd80      	pop	{r7, pc}

0800308c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	DIO0 = true;
 8003090:	4b04      	ldr	r3, [pc, #16]	; (80030a4 <EXTI9_5_IRQHandler+0x18>)
 8003092:	2201      	movs	r2, #1
 8003094:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RESET_COMM_TX_Pin);
 8003096:	f44f 7000 	mov.w	r0, #512	; 0x200
 800309a:	f001 f925 	bl	80042e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800309e:	bf00      	nop
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	20000314 	.word	0x20000314

080030a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80030ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80030b0:	f001 f91a 	bl	80042e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIO0_COMM_RX_Pin);
 80030b4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80030b8:	f001 f916 	bl	80042e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80030bc:	bf00      	nop
 80030be:	bd80      	pop	{r7, pc}

080030c0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80030c4:	4802      	ldr	r0, [pc, #8]	; (80030d0 <UART4_IRQHandler+0x10>)
 80030c6:	f003 fd15 	bl	8006af4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80030ca:	bf00      	nop
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	200005a4 	.word	0x200005a4

080030d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
	return 1;
 80030d8:	2301      	movs	r3, #1
}
 80030da:	4618      	mov	r0, r3
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <_kill>:

int _kill(int pid, int sig)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80030ee:	f004 fce9 	bl	8007ac4 <__errno>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2216      	movs	r2, #22
 80030f6:	601a      	str	r2, [r3, #0]
	return -1;
 80030f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <_exit>:

void _exit (int status)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800310c:	f04f 31ff 	mov.w	r1, #4294967295
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f7ff ffe7 	bl	80030e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003116:	e7fe      	b.n	8003116 <_exit+0x12>

08003118 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003124:	2300      	movs	r3, #0
 8003126:	617b      	str	r3, [r7, #20]
 8003128:	e00a      	b.n	8003140 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800312a:	f3af 8000 	nop.w
 800312e:	4601      	mov	r1, r0
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	1c5a      	adds	r2, r3, #1
 8003134:	60ba      	str	r2, [r7, #8]
 8003136:	b2ca      	uxtb	r2, r1
 8003138:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	3301      	adds	r3, #1
 800313e:	617b      	str	r3, [r7, #20]
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	429a      	cmp	r2, r3
 8003146:	dbf0      	blt.n	800312a <_read+0x12>
	}

return len;
 8003148:	687b      	ldr	r3, [r7, #4]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b086      	sub	sp, #24
 8003156:	af00      	add	r7, sp, #0
 8003158:	60f8      	str	r0, [r7, #12]
 800315a:	60b9      	str	r1, [r7, #8]
 800315c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800315e:	2300      	movs	r3, #0
 8003160:	617b      	str	r3, [r7, #20]
 8003162:	e009      	b.n	8003178 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	1c5a      	adds	r2, r3, #1
 8003168:	60ba      	str	r2, [r7, #8]
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff fe87 	bl	8002e80 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	3301      	adds	r3, #1
 8003176:	617b      	str	r3, [r7, #20]
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	429a      	cmp	r2, r3
 800317e:	dbf1      	blt.n	8003164 <_write+0x12>
	}
	return len;
 8003180:	687b      	ldr	r3, [r7, #4]
}
 8003182:	4618      	mov	r0, r3
 8003184:	3718      	adds	r7, #24
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <_close>:

int _close(int file)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
	return -1;
 8003192:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003196:	4618      	mov	r0, r3
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
 80031aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031b2:	605a      	str	r2, [r3, #4]
	return 0;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <_isatty>:

int _isatty(int file)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
	return 1;
 80031ca:	2301      	movs	r3, #1
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
	return 0;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3714      	adds	r7, #20
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
	...

080031f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031fc:	4a14      	ldr	r2, [pc, #80]	; (8003250 <_sbrk+0x5c>)
 80031fe:	4b15      	ldr	r3, [pc, #84]	; (8003254 <_sbrk+0x60>)
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003208:	4b13      	ldr	r3, [pc, #76]	; (8003258 <_sbrk+0x64>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d102      	bne.n	8003216 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003210:	4b11      	ldr	r3, [pc, #68]	; (8003258 <_sbrk+0x64>)
 8003212:	4a12      	ldr	r2, [pc, #72]	; (800325c <_sbrk+0x68>)
 8003214:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003216:	4b10      	ldr	r3, [pc, #64]	; (8003258 <_sbrk+0x64>)
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4413      	add	r3, r2
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	429a      	cmp	r2, r3
 8003222:	d207      	bcs.n	8003234 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003224:	f004 fc4e 	bl	8007ac4 <__errno>
 8003228:	4603      	mov	r3, r0
 800322a:	220c      	movs	r2, #12
 800322c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800322e:	f04f 33ff 	mov.w	r3, #4294967295
 8003232:	e009      	b.n	8003248 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003234:	4b08      	ldr	r3, [pc, #32]	; (8003258 <_sbrk+0x64>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800323a:	4b07      	ldr	r3, [pc, #28]	; (8003258 <_sbrk+0x64>)
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4413      	add	r3, r2
 8003242:	4a05      	ldr	r2, [pc, #20]	; (8003258 <_sbrk+0x64>)
 8003244:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003246:	68fb      	ldr	r3, [r7, #12]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	20018000 	.word	0x20018000
 8003254:	00000400 	.word	0x00000400
 8003258:	20000228 	.word	0x20000228
 800325c:	200006c0 	.word	0x200006c0

08003260 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003264:	4b06      	ldr	r3, [pc, #24]	; (8003280 <SystemInit+0x20>)
 8003266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326a:	4a05      	ldr	r2, [pc, #20]	; (8003280 <SystemInit+0x20>)
 800326c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003270:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003274:	bf00      	nop
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	e000ed00 	.word	0xe000ed00

08003284 <delay_ms>:

#include "select_hal.h"
#define TIMEOUT                                                                \
  HAL_MAX_DELAY // Tempo limite de transações da HAL em milisegundos

EXPORT void delay_ms(uint32_t time) { HAL_Delay(time); }
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 fcb5 	bl	8003bfc <HAL_Delay>
 8003292:	bf00      	nop
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <uart_writeN>:

typedef struct {
  uart_t *uart;
} uart_connection_t;

EXPORT error_t uart_writeN(uart_connection_t conn, buffer_view_t buffer) {
 800329a:	b580      	push	{r7, lr}
 800329c:	b084      	sub	sp, #16
 800329e:	af00      	add	r7, sp, #0
 80032a0:	60f8      	str	r0, [r7, #12]
 80032a2:	1d3b      	adds	r3, r7, #4
 80032a4:	e883 0006 	stmia.w	r3, {r1, r2}
  return HAL_UART_Transmit(conn.uart, buffer.data, buffer.size, HAL_MAX_DELAY);
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	6879      	ldr	r1, [r7, #4]
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	f04f 33ff 	mov.w	r3, #4294967295
 80032b4:	f003 fab8 	bl	8006828 <HAL_UART_Transmit>
 80032b8:	4603      	mov	r3, r0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <uart_readN>:

EXPORT error_t uart_readN(uart_connection_t conn, buffer_view_t buffer) {
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b084      	sub	sp, #16
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	60f8      	str	r0, [r7, #12]
 80032ca:	1d3b      	adds	r3, r7, #4
 80032cc:	e883 0006 	stmia.w	r3, {r1, r2}
  return HAL_UART_Receive(conn.uart, buffer.data, buffer.size, 1000);
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032dc:	f003 fb38 	bl	8006950 <HAL_UART_Receive>
 80032e0:	4603      	mov	r3, r0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <ubx_checksum>:
#include <stdbool.h>
#include "ublox_neo8.h"
#include <math.h>

// Calculate checksum over the packet buffer excluding sync (first two) and checksum chars (last two).
void ubx_checksum(int len, uint8_t packet[len]) {
 80032ea:	b480      	push	{r7}
 80032ec:	b085      	sub	sp, #20
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
 80032f2:	6039      	str	r1, [r7, #0]
	packet[len - 2] = 0x00;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	3b02      	subs	r3, #2
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	4413      	add	r3, r2
 80032fc:	2200      	movs	r2, #0
 80032fe:	701a      	strb	r2, [r3, #0]
	packet[len - 1] = 0x00;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3b01      	subs	r3, #1
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	4413      	add	r3, r2
 8003308:	2200      	movs	r2, #0
 800330a:	701a      	strb	r2, [r3, #0]

	for (uint8_t j = 0; j < len - 4; j++) {
 800330c:	2300      	movs	r3, #0
 800330e:	73fb      	strb	r3, [r7, #15]
 8003310:	e025      	b.n	800335e <ubx_checksum+0x74>
		packet[len - 2] += packet[2 + j];
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	3b02      	subs	r3, #2
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	4413      	add	r3, r2
 800331a:	7819      	ldrb	r1, [r3, #0]
 800331c:	7bfb      	ldrb	r3, [r7, #15]
 800331e:	3302      	adds	r3, #2
 8003320:	461a      	mov	r2, r3
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	4413      	add	r3, r2
 8003326:	781a      	ldrb	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3b02      	subs	r3, #2
 800332c:	6838      	ldr	r0, [r7, #0]
 800332e:	4403      	add	r3, r0
 8003330:	440a      	add	r2, r1
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	701a      	strb	r2, [r3, #0]
		packet[len - 1] += packet[len - 2];
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	3b01      	subs	r3, #1
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	4413      	add	r3, r2
 800333e:	7819      	ldrb	r1, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3b02      	subs	r3, #2
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	4413      	add	r3, r2
 8003348:	781a      	ldrb	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	3b01      	subs	r3, #1
 800334e:	6838      	ldr	r0, [r7, #0]
 8003350:	4403      	add	r3, r0
 8003352:	440a      	add	r2, r1
 8003354:	b2d2      	uxtb	r2, r2
 8003356:	701a      	strb	r2, [r3, #0]
	for (uint8_t j = 0; j < len - 4; j++) {
 8003358:	7bfb      	ldrb	r3, [r7, #15]
 800335a:	3301      	adds	r3, #1
 800335c:	73fb      	strb	r3, [r7, #15]
 800335e:	7bfa      	ldrb	r2, [r7, #15]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3b04      	subs	r3, #4
 8003364:	429a      	cmp	r2, r3
 8003366:	dbd4      	blt.n	8003312 <ubx_checksum+0x28>
	}
}
 8003368:	bf00      	nop
 800336a:	bf00      	nop
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
	...

08003378 <set_protocol>:

/***
 * Seleciona UBX como protocolo principal
 */
static error_t set_protocol(ublox_gps_t gps) {
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
			0x01, 0x00, // size
			// payload
			0x00, 0x00  // checksum
	};

	ubx_checksum(sizeof(message), message);
 8003380:	490b      	ldr	r1, [pc, #44]	; (80033b0 <set_protocol+0x38>)
 8003382:	2008      	movs	r0, #8
 8003384:	f7ff ffb1 	bl	80032ea <ubx_checksum>
	buffer_view_t bv = { .data = message, .size = sizeof(message) };
 8003388:	4a0a      	ldr	r2, [pc, #40]	; (80033b4 <set_protocol+0x3c>)
 800338a:	f107 0308 	add.w	r3, r7, #8
 800338e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003392:	e883 0003 	stmia.w	r3, {r0, r1}


	return gps_transmit(gps.conn, bv);
 8003396:	f107 0308 	add.w	r3, r7, #8
 800339a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7ff ff7b 	bl	800329a <uart_writeN>
 80033a4:	4603      	mov	r3, r0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	20000008 	.word	0x20000008
 80033b4:	0800ab1c 	.word	0x0800ab1c

080033b8 <set_model_mode>:

/***
 * Seleciona Modelo de calculo para High Altitude 1G
 * ideal para sondas
 */
static error_t set_model_mode(ublox_gps_t gps) {
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
	static const  uint8_t message[] = { 0xB5, 0x62, 0x06, 0x24, 0x24, 0x00, 0xFF, 0xFF, 0x06,
			0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x05, 0x00,
			0xFA, 0x00, 0xFA, 0x00, 0x64, 0x00, 0x2C, 0x01, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x16, 0xDC };
	buffer_view_t bv = { .data = message, .size = sizeof(message) };
 80033c0:	4a09      	ldr	r2, [pc, #36]	; (80033e8 <set_model_mode+0x30>)
 80033c2:	f107 0308 	add.w	r3, r7, #8
 80033c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033ca:	e883 0003 	stmia.w	r3, {r0, r1}
	return gps_transmit(gps.conn, bv);
 80033ce:	f107 0308 	add.w	r3, r7, #8
 80033d2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7ff ff5f 	bl	800329a <uart_writeN>
 80033dc:	4603      	mov	r3, r0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	0800ab24 	.word	0x0800ab24

080033ec <disableNmea>:

static void disableNmea(ublox_gps_t gps) {
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b08a      	sub	sp, #40	; 0x28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
			0x06, 0x01, // class and id
			0x03, 0x00, // length
			0x00, 0x00, 0x00, // payload (not changed in the case)
			0x00, 0x00, // checksum
	};
	int packetSize = sizeof(packet);
 80033f4:	230b      	movs	r3, #11
 80033f6:	61fb      	str	r3, [r7, #28]
	int messageSize = sizeof(messages[0]);
 80033f8:	2302      	movs	r3, #2
 80033fa:	61bb      	str	r3, [r7, #24]
	int messageCount = sizeof(messages) / messageSize;
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	2228      	movs	r2, #40	; 0x28
 8003400:	fbb2 f3f3 	udiv	r3, r2, r3
 8003404:	617b      	str	r3, [r7, #20]
	int payloadOffset = 6;
 8003406:	2306      	movs	r3, #6
 8003408:	613b      	str	r3, [r7, #16]

	// Iterate over the messages array.
	for (int i = 0; i < messageCount; i++) {
 800340a:	2300      	movs	r3, #0
 800340c:	627b      	str	r3, [r7, #36]	; 0x24
 800340e:	e02a      	b.n	8003466 <disableNmea+0x7a>
		for (int j = 0; j < messageSize; j++) {
 8003410:	2300      	movs	r3, #0
 8003412:	623b      	str	r3, [r7, #32]
 8003414:	e00e      	b.n	8003434 <disableNmea+0x48>
			packet[payloadOffset + j] = messages[i][j];
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	6a3b      	ldr	r3, [r7, #32]
 800341a:	4413      	add	r3, r2
 800341c:	4916      	ldr	r1, [pc, #88]	; (8003478 <disableNmea+0x8c>)
 800341e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003420:	0052      	lsls	r2, r2, #1
 8003422:	4411      	add	r1, r2
 8003424:	6a3a      	ldr	r2, [r7, #32]
 8003426:	440a      	add	r2, r1
 8003428:	7811      	ldrb	r1, [r2, #0]
 800342a:	4a14      	ldr	r2, [pc, #80]	; (800347c <disableNmea+0x90>)
 800342c:	54d1      	strb	r1, [r2, r3]
		for (int j = 0; j < messageSize; j++) {
 800342e:	6a3b      	ldr	r3, [r7, #32]
 8003430:	3301      	adds	r3, #1
 8003432:	623b      	str	r3, [r7, #32]
 8003434:	6a3a      	ldr	r2, [r7, #32]
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	429a      	cmp	r2, r3
 800343a:	dbec      	blt.n	8003416 <disableNmea+0x2a>
		}
		ubx_checksum(sizeof(packet), packet);
 800343c:	490f      	ldr	r1, [pc, #60]	; (800347c <disableNmea+0x90>)
 800343e:	200b      	movs	r0, #11
 8003440:	f7ff ff53 	bl	80032ea <ubx_checksum>
		buffer_view_t bv = { .data = packet, .size = packetSize };
 8003444:	4b0d      	ldr	r3, [pc, #52]	; (800347c <disableNmea+0x90>)
 8003446:	60bb      	str	r3, [r7, #8]
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	60fb      	str	r3, [r7, #12]


		gps_transmit(gps.conn, bv);
 800344c:	f107 0308 	add.w	r3, r7, #8
 8003450:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7ff ff20 	bl	800329a <uart_writeN>


		delay_ms(1);
 800345a:	2001      	movs	r0, #1
 800345c:	f7ff ff12 	bl	8003284 <delay_ms>
	for (int i = 0; i < messageCount; i++) {
 8003460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003462:	3301      	adds	r3, #1
 8003464:	627b      	str	r3, [r7, #36]	; 0x24
 8003466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	429a      	cmp	r2, r3
 800346c:	dbd0      	blt.n	8003410 <disableNmea+0x24>
	}
}
 800346e:	bf00      	nop
 8003470:	bf00      	nop
 8003472:	3728      	adds	r7, #40	; 0x28
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	0800abb0 	.word	0x0800abb0
 800347c:	20000010 	.word	0x20000010

08003480 <trigger>:

/***
 * Requisita um pacote PVT
 */
static error_t trigger(ublox_gps_t gps) {
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
			0x01, 0x07, // class and id
			0x00, 0x00, // size little endian
			// payload
			0x00, 0x00  // checksum (to be defined)
	};
	ubx_checksum(sizeof(message), message);
 8003488:	490b      	ldr	r1, [pc, #44]	; (80034b8 <trigger+0x38>)
 800348a:	2008      	movs	r0, #8
 800348c:	f7ff ff2d 	bl	80032ea <ubx_checksum>
	buffer_view_t bv = { .data = message, .size = sizeof(message) };
 8003490:	4a0a      	ldr	r2, [pc, #40]	; (80034bc <trigger+0x3c>)
 8003492:	f107 0308 	add.w	r3, r7, #8
 8003496:	e892 0003 	ldmia.w	r2, {r0, r1}
 800349a:	e883 0003 	stmia.w	r3, {r0, r1}
	return gps_transmit(gps.conn, bv);
 800349e:	f107 0308 	add.w	r3, r7, #8
 80034a2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7ff fef7 	bl	800329a <uart_writeN>
 80034ac:	4603      	mov	r3, r0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	2000001c 	.word	0x2000001c
 80034bc:	0800ab2c 	.word	0x0800ab2c

080034c0 <get>:


static uint8_t get(ublox_gps_t gps){
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
	uint8_t x = 0;
 80034c8:	2300      	movs	r3, #0
 80034ca:	75fb      	strb	r3, [r7, #23]
	buffer_view_t data_v = {.data=&x, sizeof(x)};
 80034cc:	f107 0317 	add.w	r3, r7, #23
 80034d0:	60fb      	str	r3, [r7, #12]
 80034d2:	2301      	movs	r3, #1
 80034d4:	613b      	str	r3, [r7, #16]
	gps_receive(gps.conn, data_v);
 80034d6:	f107 030c 	add.w	r3, r7, #12
 80034da:	e893 0006 	ldmia.w	r3, {r1, r2}
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7ff feef 	bl	80032c2 <uart_readN>
	return x;
 80034e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3718      	adds	r7, #24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <wait_for>:

uint8_t wait_for(ublox_gps_t gps, uint8_t data, uint32_t attempts){
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b086      	sub	sp, #24
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	60f8      	str	r0, [r7, #12]
 80034f6:	460b      	mov	r3, r1
 80034f8:	607a      	str	r2, [r7, #4]
 80034fa:	72fb      	strb	r3, [r7, #11]
	while (attempts--) {
 80034fc:	e00a      	b.n	8003514 <wait_for+0x26>
		uint8_t x = get(gps);
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f7ff ffde 	bl	80034c0 <get>
 8003504:	4603      	mov	r3, r0
 8003506:	75fb      	strb	r3, [r7, #23]
		if(x == data) return x;
 8003508:	7dfa      	ldrb	r2, [r7, #23]
 800350a:	7afb      	ldrb	r3, [r7, #11]
 800350c:	429a      	cmp	r2, r3
 800350e:	d101      	bne.n	8003514 <wait_for+0x26>
 8003510:	7dfb      	ldrb	r3, [r7, #23]
 8003512:	e006      	b.n	8003522 <wait_for+0x34>
	while (attempts--) {
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	1e5a      	subs	r2, r3, #1
 8003518:	607a      	str	r2, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1ef      	bne.n	80034fe <wait_for+0x10>
		//		delay_ms(1);
	}
	return attempts;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	b2db      	uxtb	r3, r3
}
 8003522:	4618      	mov	r0, r3
 8003524:	3718      	adds	r7, #24
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	0000      	movs	r0, r0
 800352c:	0000      	movs	r0, r0
	...

08003530 <ublox_get>:

/***
 * Pede pacote e decodifica
 */
error_t ublox_get(ublox_gps_t gps, ublox_pvt_t *pvt) {
 8003530:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003534:	b084      	sub	sp, #16
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
 800353a:	6039      	str	r1, [r7, #0]

	MX_UART4_Init();
 800353c:	f000 f9a8 	bl	8003890 <MX_UART4_Init>

	trigger(gps);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7ff ff9d 	bl	8003480 <trigger>
	if(e){
		return e;
	}

#endif
	wait_for(gps, 0xB5, 150);
 8003546:	2296      	movs	r2, #150	; 0x96
 8003548:	21b5      	movs	r1, #181	; 0xb5
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7ff ffcf 	bl	80034ee <wait_for>
	wait_for(gps, 0x62, 1);
 8003550:	2201      	movs	r2, #1
 8003552:	2162      	movs	r1, #98	; 0x62
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7ff ffca 	bl	80034ee <wait_for>
	wait_for(gps, 0x01, 1);
 800355a:	2201      	movs	r2, #1
 800355c:	2101      	movs	r1, #1
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7ff ffc5 	bl	80034ee <wait_for>
	wait_for(gps, 0x07, 1);
 8003564:	2201      	movs	r2, #1
 8003566:	2107      	movs	r1, #7
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7ff ffc0 	bl	80034ee <wait_for>
	wait_for(gps, 0x5C, 1);
 800356e:	2201      	movs	r2, #1
 8003570:	215c      	movs	r1, #92	; 0x5c
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7ff ffbb 	bl	80034ee <wait_for>
	wait_for(gps, 0x00, 1);
 8003578:	2201      	movs	r2, #1
 800357a:	2100      	movs	r1, #0
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f7ff ffb6 	bl	80034ee <wait_for>

	static uint8_t message[92+2] = {0};
	for(int i = 0; i < sizeof(message); ++i){
 8003582:	2300      	movs	r3, #0
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	e00c      	b.n	80035a2 <ublox_get+0x72>
		uint8_t received = get(gps);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f7ff ff99 	bl	80034c0 <get>
 800358e:	4603      	mov	r3, r0
 8003590:	72fb      	strb	r3, [r7, #11]
		message[i] = received;
 8003592:	4a2b      	ldr	r2, [pc, #172]	; (8003640 <ublox_get+0x110>)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	4413      	add	r3, r2
 8003598:	7afa      	ldrb	r2, [r7, #11]
 800359a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(message); ++i){
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	3301      	adds	r3, #1
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2b5d      	cmp	r3, #93	; 0x5d
 80035a6:	d9ef      	bls.n	8003588 <ublox_get+0x58>
	}

	static ubx_pvt_parser_t data = {0};
	memcpy(data.raw, message, sizeof(data.raw));
 80035a8:	4a26      	ldr	r2, [pc, #152]	; (8003644 <ublox_get+0x114>)
 80035aa:	4b25      	ldr	r3, [pc, #148]	; (8003640 <ublox_get+0x110>)
 80035ac:	4610      	mov	r0, r2
 80035ae:	4619      	mov	r1, r3
 80035b0:	2359      	movs	r3, #89	; 0x59
 80035b2:	461a      	mov	r2, r3
 80035b4:	f004 fab8 	bl	8007b28 <memcpy>
	*pvt = data.values;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	4a22      	ldr	r2, [pc, #136]	; (8003644 <ublox_get+0x114>)
 80035bc:	4618      	mov	r0, r3
 80035be:	4611      	mov	r1, r2
 80035c0:	2359      	movs	r3, #89	; 0x59
 80035c2:	461a      	mov	r2, r3
 80035c4:	f004 fab0 	bl	8007b28 <memcpy>

	if((pvt->valid & 0x07) != 0x07){
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	7adb      	ldrb	r3, [r3, #11]
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	2b07      	cmp	r3, #7
 80035d2:	d001      	beq.n	80035d8 <ublox_get+0xa8>
		return 2;
 80035d4:	2302      	movs	r3, #2
 80035d6:	e02a      	b.n	800362e <ublox_get+0xfe>
	}

	if(fabs(pvt->lat) < 1e-9 || fabs(pvt->lng) < 1e-9){
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fc ffa1 	bl	8000524 <__aeabi_i2d>
 80035e2:	4602      	mov	r2, r0
 80035e4:	460b      	mov	r3, r1
 80035e6:	4690      	mov	r8, r2
 80035e8:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80035ec:	a312      	add	r3, pc, #72	; (adr r3, 8003638 <ublox_get+0x108>)
 80035ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f2:	4640      	mov	r0, r8
 80035f4:	4649      	mov	r1, r9
 80035f6:	f7fd fa71 	bl	8000adc <__aeabi_dcmplt>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d113      	bne.n	8003628 <ublox_get+0xf8>
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	4618      	mov	r0, r3
 8003606:	f7fc ff8d 	bl	8000524 <__aeabi_i2d>
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	4614      	mov	r4, r2
 8003610:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8003614:	a308      	add	r3, pc, #32	; (adr r3, 8003638 <ublox_get+0x108>)
 8003616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361a:	4620      	mov	r0, r4
 800361c:	4629      	mov	r1, r5
 800361e:	f7fd fa5d 	bl	8000adc <__aeabi_dcmplt>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <ublox_get+0xfc>
		return 2;
 8003628:	2302      	movs	r3, #2
 800362a:	e000      	b.n	800362e <ublox_get+0xfe>
	}

	return 0;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003638:	e826d695 	.word	0xe826d695
 800363c:	3e112e0b 	.word	0x3e112e0b
 8003640:	2000022c 	.word	0x2000022c
 8003644:	2000028c 	.word	0x2000028c

08003648 <ublox_check_fix>:


/***
 * Pede pacote de receiver navigation status e decodifica
 */
bool ublox_check_fix(ublox_gps_t gps, ublox_nav_status_t *status) {
 8003648:	b5b0      	push	{r4, r5, r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]

	MX_UART4_Init();
 8003652:	f000 f91d 	bl	8003890 <MX_UART4_Init>
			0x01, 0x03, // class and id
			0x00, 0x00, // size little endian
			// payload
			0x00, 0x00  // checksum (to be defined)
	};
	ubx_checksum(sizeof(tx_message), tx_message);
 8003656:	4935      	ldr	r1, [pc, #212]	; (800372c <ublox_check_fix+0xe4>)
 8003658:	2008      	movs	r0, #8
 800365a:	f7ff fe46 	bl	80032ea <ubx_checksum>
	buffer_view_t bv = { .data = tx_message, .size = sizeof(tx_message) };
 800365e:	4a34      	ldr	r2, [pc, #208]	; (8003730 <ublox_check_fix+0xe8>)
 8003660:	f107 0308 	add.w	r3, r7, #8
 8003664:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003668:	e883 0003 	stmia.w	r3, {r0, r1}
	gps_transmit(gps.conn, bv);
 800366c:	f107 0308 	add.w	r3, r7, #8
 8003670:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7ff fe10 	bl	800329a <uart_writeN>
		return e;
	}

#endif

	wait_for(gps, 0xB5, 150);
 800367a:	2296      	movs	r2, #150	; 0x96
 800367c:	21b5      	movs	r1, #181	; 0xb5
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f7ff ff35 	bl	80034ee <wait_for>
	wait_for(gps, 0x62, 1);
 8003684:	2201      	movs	r2, #1
 8003686:	2162      	movs	r1, #98	; 0x62
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7ff ff30 	bl	80034ee <wait_for>
	wait_for(gps, 0x01, 1);
 800368e:	2201      	movs	r2, #1
 8003690:	2101      	movs	r1, #1
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7ff ff2b 	bl	80034ee <wait_for>
	wait_for(gps, 0x03, 1);
 8003698:	2201      	movs	r2, #1
 800369a:	2103      	movs	r1, #3
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7ff ff26 	bl	80034ee <wait_for>
	wait_for(gps, 0x10, 1);
 80036a2:	2201      	movs	r2, #1
 80036a4:	2110      	movs	r1, #16
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff ff21 	bl	80034ee <wait_for>
	wait_for(gps, 0x00, 1);
 80036ac:	2201      	movs	r2, #1
 80036ae:	2100      	movs	r1, #0
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7ff ff1c 	bl	80034ee <wait_for>

	static uint8_t message[16+2] = {0};
	for(int i = 0; i < sizeof(message); ++i){
 80036b6:	2300      	movs	r3, #0
 80036b8:	617b      	str	r3, [r7, #20]
 80036ba:	e00c      	b.n	80036d6 <ublox_check_fix+0x8e>
		uint8_t received = get(gps);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7ff feff 	bl	80034c0 <get>
 80036c2:	4603      	mov	r3, r0
 80036c4:	74fb      	strb	r3, [r7, #19]
		message[i] = received;
 80036c6:	4a1b      	ldr	r2, [pc, #108]	; (8003734 <ublox_check_fix+0xec>)
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	4413      	add	r3, r2
 80036cc:	7cfa      	ldrb	r2, [r7, #19]
 80036ce:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(message); ++i){
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	3301      	adds	r3, #1
 80036d4:	617b      	str	r3, [r7, #20]
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	2b11      	cmp	r3, #17
 80036da:	d9ef      	bls.n	80036bc <ublox_check_fix+0x74>
//			printf("%.02X ",message[i]);
//		}

	//ublox_nav_status_t status;
	static ubx_nav_status_parser_t data = {0};
	memcpy(data.raw, message, sizeof(data.raw));
 80036dc:	4a16      	ldr	r2, [pc, #88]	; (8003738 <ublox_check_fix+0xf0>)
 80036de:	4b15      	ldr	r3, [pc, #84]	; (8003734 <ublox_check_fix+0xec>)
 80036e0:	4614      	mov	r4, r2
 80036e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	*status = data.values;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	4a13      	ldr	r2, [pc, #76]	; (8003738 <ublox_check_fix+0xf0>)
 80036ec:	461c      	mov	r4, r3
 80036ee:	4615      	mov	r5, r2
 80036f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036f2:	6020      	str	r0, [r4, #0]
 80036f4:	6061      	str	r1, [r4, #4]
 80036f6:	60a2      	str	r2, [r4, #8]
 80036f8:	60e3      	str	r3, [r4, #12]
//	printf("Flags2: %d\r\n", status->flags2);
//	printf("ttff: %d\r\n", status->ttff);
//	printf("msss: %d\r\n", status->msss);
//	printf(" --------------------------------- \r\n\n");

	if(((status->fixType & 0x0F) > 0) && ((status->fixType & 0x0F) < 5) && ((status->flags & 0x01) == 0x01)){
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	791b      	ldrb	r3, [r3, #4]
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	2b00      	cmp	r3, #0
 8003704:	dd0d      	ble.n	8003722 <ublox_check_fix+0xda>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	791b      	ldrb	r3, [r3, #4]
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	2b04      	cmp	r3, #4
 8003710:	dc07      	bgt.n	8003722 <ublox_check_fix+0xda>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	795b      	ldrb	r3, [r3, #5]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <ublox_check_fix+0xda>
		return true;
 800371e:	2301      	movs	r3, #1
 8003720:	e000      	b.n	8003724 <ublox_check_fix+0xdc>
	}else return false;
 8003722:	2300      	movs	r3, #0

}
 8003724:	4618      	mov	r0, r3
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bdb0      	pop	{r4, r5, r7, pc}
 800372c:	20000024 	.word	0x20000024
 8003730:	0800ab34 	.word	0x0800ab34
 8003734:	200002e8 	.word	0x200002e8
 8003738:	200002fc 	.word	0x200002fc

0800373c <ublox_init>:

/***
 * Inicializa GPS ublox com o protocolo binario UBX
 */
error_t ublox_init(ublox_gps_t gps) {
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
	disableNmea(gps);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f7ff fe51 	bl	80033ec <disableNmea>
	set_protocol(gps);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7ff fe14 	bl	8003378 <set_protocol>
	set_model_mode(gps);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7ff fe31 	bl	80033b8 <set_model_mode>
	return 0;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <ublox_power_mode_setup>:

/*
 * Modifica parametros de energia para reduzir o consumo do modulo
 */

error_t ublox_power_mode_setup(ublox_gps_t gps, power_setup_t power_setup, uint16_t period, uint16_t on_time){
 8003760:	b580      	push	{r7, lr}
 8003762:	b08a      	sub	sp, #40	; 0x28
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	4608      	mov	r0, r1
 800376a:	4611      	mov	r1, r2
 800376c:	461a      	mov	r2, r3
 800376e:	4603      	mov	r3, r0
 8003770:	72fb      	strb	r3, [r7, #11]
 8003772:	460b      	mov	r3, r1
 8003774:	813b      	strh	r3, [r7, #8]
 8003776:	4613      	mov	r3, r2
 8003778:	80fb      	strh	r3, [r7, #6]
	uint8_t message[] = { 0xB5, 0x62, // sync
 800377a:	23b5      	movs	r3, #181	; 0xb5
 800377c:	763b      	strb	r3, [r7, #24]
 800377e:	2362      	movs	r3, #98	; 0x62
 8003780:	767b      	strb	r3, [r7, #25]
 8003782:	2306      	movs	r3, #6
 8003784:	76bb      	strb	r3, [r7, #26]
 8003786:	2386      	movs	r3, #134	; 0x86
 8003788:	76fb      	strb	r3, [r7, #27]
 800378a:	2308      	movs	r3, #8
 800378c:	773b      	strb	r3, [r7, #28]
 800378e:	2300      	movs	r3, #0
 8003790:	777b      	strb	r3, [r7, #29]
 8003792:	2300      	movs	r3, #0
 8003794:	77bb      	strb	r3, [r7, #30]
 8003796:	7afb      	ldrb	r3, [r7, #11]
 8003798:	77fb      	strb	r3, [r7, #31]
			0x06, 0x86, // class and id
			0x08, 0x00, // size
			0x00, // version
			(uint8_t)power_setup, // power setup
			(uint8_t)(period), (uint8_t)(period >> 8), // period
 800379a:	893b      	ldrh	r3, [r7, #8]
 800379c:	b2db      	uxtb	r3, r3
	uint8_t message[] = { 0xB5, 0x62, // sync
 800379e:	f887 3020 	strb.w	r3, [r7, #32]
			(uint8_t)(period), (uint8_t)(period >> 8), // period
 80037a2:	893b      	ldrh	r3, [r7, #8]
 80037a4:	0a1b      	lsrs	r3, r3, #8
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	b2db      	uxtb	r3, r3
	uint8_t message[] = { 0xB5, 0x62, // sync
 80037aa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			(uint8_t)(on_time), (uint8_t)(on_time >> 8), // on time
 80037ae:	88fb      	ldrh	r3, [r7, #6]
 80037b0:	b2db      	uxtb	r3, r3
	uint8_t message[] = { 0xB5, 0x62, // sync
 80037b2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			(uint8_t)(on_time), (uint8_t)(on_time >> 8), // on time
 80037b6:	88fb      	ldrh	r3, [r7, #6]
 80037b8:	0a1b      	lsrs	r3, r3, #8
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	b2db      	uxtb	r3, r3
	uint8_t message[] = { 0xB5, 0x62, // sync
 80037be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037c2:	2300      	movs	r3, #0
 80037c4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80037c8:	2300      	movs	r3, #0
 80037ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80037ce:	2300      	movs	r3, #0
 80037d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80037d4:	2300      	movs	r3, #0
 80037d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			0x00, 0x00, // reserved
			0x00, 0x00 // checksum
	};

	ubx_checksum(sizeof(message), message);
 80037da:	f107 0318 	add.w	r3, r7, #24
 80037de:	4619      	mov	r1, r3
 80037e0:	2010      	movs	r0, #16
 80037e2:	f7ff fd82 	bl	80032ea <ubx_checksum>
	buffer_view_t bv = { .data = message, .size = sizeof(message) };
 80037e6:	f107 0318 	add.w	r3, r7, #24
 80037ea:	613b      	str	r3, [r7, #16]
 80037ec:	2310      	movs	r3, #16
 80037ee:	617b      	str	r3, [r7, #20]
	return uart_writeN(gps.conn, bv);
 80037f0:	f107 0310 	add.w	r3, r7, #16
 80037f4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f7ff fd4e 	bl	800329a <uart_writeN>
 80037fe:	4603      	mov	r3, r0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3728      	adds	r7, #40	; 0x28
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <ublox_power_management_request>:

error_t ublox_power_management_request(ublox_gps_t gps, uint32_t period){
 8003808:	b580      	push	{r7, lr}
 800380a:	b088      	sub	sp, #32
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
	uint8_t message[] = { 0xB5, 0x62, // sync
 8003812:	23b5      	movs	r3, #181	; 0xb5
 8003814:	743b      	strb	r3, [r7, #16]
 8003816:	2362      	movs	r3, #98	; 0x62
 8003818:	747b      	strb	r3, [r7, #17]
 800381a:	2302      	movs	r3, #2
 800381c:	74bb      	strb	r3, [r7, #18]
 800381e:	2341      	movs	r3, #65	; 0x41
 8003820:	74fb      	strb	r3, [r7, #19]
 8003822:	2308      	movs	r3, #8
 8003824:	753b      	strb	r3, [r7, #20]
 8003826:	2300      	movs	r3, #0
 8003828:	757b      	strb	r3, [r7, #21]
			0x02, 0x41, // class and id
			0x08, 0x00, // size
			(uint8_t)(period), (uint8_t)(period >> 8), (uint8_t)(period >> 16), (uint8_t)(period >> 32),  // period
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	b2db      	uxtb	r3, r3
	uint8_t message[] = { 0xB5, 0x62, // sync
 800382e:	75bb      	strb	r3, [r7, #22]
			(uint8_t)(period), (uint8_t)(period >> 8), (uint8_t)(period >> 16), (uint8_t)(period >> 32),  // period
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	0a1b      	lsrs	r3, r3, #8
 8003834:	b2db      	uxtb	r3, r3
	uint8_t message[] = { 0xB5, 0x62, // sync
 8003836:	75fb      	strb	r3, [r7, #23]
			(uint8_t)(period), (uint8_t)(period >> 8), (uint8_t)(period >> 16), (uint8_t)(period >> 32),  // period
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	0c1b      	lsrs	r3, r3, #16
 800383c:	b2db      	uxtb	r3, r3
	uint8_t message[] = { 0xB5, 0x62, // sync
 800383e:	763b      	strb	r3, [r7, #24]
			(uint8_t)(period), (uint8_t)(period >> 8), (uint8_t)(period >> 16), (uint8_t)(period >> 32),  // period
 8003840:	2220      	movs	r2, #32
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	40d3      	lsrs	r3, r2
 8003846:	b2db      	uxtb	r3, r3
	uint8_t message[] = { 0xB5, 0x62, // sync
 8003848:	767b      	strb	r3, [r7, #25]
 800384a:	2302      	movs	r3, #2
 800384c:	76bb      	strb	r3, [r7, #26]
 800384e:	2300      	movs	r3, #0
 8003850:	76fb      	strb	r3, [r7, #27]
 8003852:	2300      	movs	r3, #0
 8003854:	773b      	strb	r3, [r7, #28]
 8003856:	2300      	movs	r3, #0
 8003858:	777b      	strb	r3, [r7, #29]
 800385a:	2300      	movs	r3, #0
 800385c:	77bb      	strb	r3, [r7, #30]
 800385e:	2300      	movs	r3, #0
 8003860:	77fb      	strb	r3, [r7, #31]
			0x02, 0x00, 0x00, 0x00, // task flags
			0x00, 0x00 // checksum
	};

	ubx_checksum(sizeof(message), message);
 8003862:	f107 0310 	add.w	r3, r7, #16
 8003866:	4619      	mov	r1, r3
 8003868:	2010      	movs	r0, #16
 800386a:	f7ff fd3e 	bl	80032ea <ubx_checksum>
	buffer_view_t bv = { .data = message, .size = sizeof(message) };
 800386e:	f107 0310 	add.w	r3, r7, #16
 8003872:	60bb      	str	r3, [r7, #8]
 8003874:	2310      	movs	r3, #16
 8003876:	60fb      	str	r3, [r7, #12]
	return uart_writeN(gps.conn, bv);
 8003878:	f107 0308 	add.w	r3, r7, #8
 800387c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f7ff fd0a 	bl	800329a <uart_writeN>
 8003886:	4603      	mov	r3, r0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3720      	adds	r7, #32
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003894:	4b18      	ldr	r3, [pc, #96]	; (80038f8 <MX_UART4_Init+0x68>)
 8003896:	4a19      	ldr	r2, [pc, #100]	; (80038fc <MX_UART4_Init+0x6c>)
 8003898:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800389a:	4b17      	ldr	r3, [pc, #92]	; (80038f8 <MX_UART4_Init+0x68>)
 800389c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80038a0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80038a2:	4b15      	ldr	r3, [pc, #84]	; (80038f8 <MX_UART4_Init+0x68>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80038a8:	4b13      	ldr	r3, [pc, #76]	; (80038f8 <MX_UART4_Init+0x68>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80038ae:	4b12      	ldr	r3, [pc, #72]	; (80038f8 <MX_UART4_Init+0x68>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80038b4:	4b10      	ldr	r3, [pc, #64]	; (80038f8 <MX_UART4_Init+0x68>)
 80038b6:	220c      	movs	r2, #12
 80038b8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038ba:	4b0f      	ldr	r3, [pc, #60]	; (80038f8 <MX_UART4_Init+0x68>)
 80038bc:	2200      	movs	r2, #0
 80038be:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80038c0:	4b0d      	ldr	r3, [pc, #52]	; (80038f8 <MX_UART4_Init+0x68>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80038c6:	4b0c      	ldr	r3, [pc, #48]	; (80038f8 <MX_UART4_Init+0x68>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80038cc:	4b0a      	ldr	r3, [pc, #40]	; (80038f8 <MX_UART4_Init+0x68>)
 80038ce:	2228      	movs	r2, #40	; 0x28
 80038d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80038d2:	4b09      	ldr	r3, [pc, #36]	; (80038f8 <MX_UART4_Init+0x68>)
 80038d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80038d8:	635a      	str	r2, [r3, #52]	; 0x34
  huart4.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80038da:	4b07      	ldr	r3, [pc, #28]	; (80038f8 <MX_UART4_Init+0x68>)
 80038dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80038e0:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80038e2:	4805      	ldr	r0, [pc, #20]	; (80038f8 <MX_UART4_Init+0x68>)
 80038e4:	f002 ff52 	bl	800678c <HAL_UART_Init>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <MX_UART4_Init+0x62>
  {
    Error_Handler();
 80038ee:	f7ff fad9 	bl	8002ea4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80038f2:	bf00      	nop
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	200005a4 	.word	0x200005a4
 80038fc:	40004c00 	.word	0x40004c00

08003900 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003904:	4b14      	ldr	r3, [pc, #80]	; (8003958 <MX_USART2_UART_Init+0x58>)
 8003906:	4a15      	ldr	r2, [pc, #84]	; (800395c <MX_USART2_UART_Init+0x5c>)
 8003908:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800390a:	4b13      	ldr	r3, [pc, #76]	; (8003958 <MX_USART2_UART_Init+0x58>)
 800390c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003910:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003912:	4b11      	ldr	r3, [pc, #68]	; (8003958 <MX_USART2_UART_Init+0x58>)
 8003914:	2200      	movs	r2, #0
 8003916:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003918:	4b0f      	ldr	r3, [pc, #60]	; (8003958 <MX_USART2_UART_Init+0x58>)
 800391a:	2200      	movs	r2, #0
 800391c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800391e:	4b0e      	ldr	r3, [pc, #56]	; (8003958 <MX_USART2_UART_Init+0x58>)
 8003920:	2200      	movs	r2, #0
 8003922:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003924:	4b0c      	ldr	r3, [pc, #48]	; (8003958 <MX_USART2_UART_Init+0x58>)
 8003926:	220c      	movs	r2, #12
 8003928:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800392a:	4b0b      	ldr	r3, [pc, #44]	; (8003958 <MX_USART2_UART_Init+0x58>)
 800392c:	2200      	movs	r2, #0
 800392e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003930:	4b09      	ldr	r3, [pc, #36]	; (8003958 <MX_USART2_UART_Init+0x58>)
 8003932:	2200      	movs	r2, #0
 8003934:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003936:	4b08      	ldr	r3, [pc, #32]	; (8003958 <MX_USART2_UART_Init+0x58>)
 8003938:	2200      	movs	r2, #0
 800393a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800393c:	4b06      	ldr	r3, [pc, #24]	; (8003958 <MX_USART2_UART_Init+0x58>)
 800393e:	2200      	movs	r2, #0
 8003940:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003942:	4805      	ldr	r0, [pc, #20]	; (8003958 <MX_USART2_UART_Init+0x58>)
 8003944:	f002 ff22 	bl	800678c <HAL_UART_Init>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800394e:	f7ff faa9 	bl	8002ea4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003952:	bf00      	nop
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20000628 	.word	0x20000628
 800395c:	40004400 	.word	0x40004400

08003960 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b0ae      	sub	sp, #184	; 0xb8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003968:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	605a      	str	r2, [r3, #4]
 8003972:	609a      	str	r2, [r3, #8]
 8003974:	60da      	str	r2, [r3, #12]
 8003976:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003978:	f107 031c 	add.w	r3, r7, #28
 800397c:	2288      	movs	r2, #136	; 0x88
 800397e:	2100      	movs	r1, #0
 8003980:	4618      	mov	r0, r3
 8003982:	f004 f8df 	bl	8007b44 <memset>
  if(uartHandle->Instance==UART4)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a46      	ldr	r2, [pc, #280]	; (8003aa4 <HAL_UART_MspInit+0x144>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d144      	bne.n	8003a1a <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003990:	2308      	movs	r3, #8
 8003992:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003994:	2300      	movs	r3, #0
 8003996:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003998:	f107 031c 	add.w	r3, r7, #28
 800399c:	4618      	mov	r0, r3
 800399e:	f001 fb29 	bl	8004ff4 <HAL_RCCEx_PeriphCLKConfig>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80039a8:	f7ff fa7c 	bl	8002ea4 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80039ac:	4b3e      	ldr	r3, [pc, #248]	; (8003aa8 <HAL_UART_MspInit+0x148>)
 80039ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b0:	4a3d      	ldr	r2, [pc, #244]	; (8003aa8 <HAL_UART_MspInit+0x148>)
 80039b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039b6:	6593      	str	r3, [r2, #88]	; 0x58
 80039b8:	4b3b      	ldr	r3, [pc, #236]	; (8003aa8 <HAL_UART_MspInit+0x148>)
 80039ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039c0:	61bb      	str	r3, [r7, #24]
 80039c2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039c4:	4b38      	ldr	r3, [pc, #224]	; (8003aa8 <HAL_UART_MspInit+0x148>)
 80039c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039c8:	4a37      	ldr	r2, [pc, #220]	; (8003aa8 <HAL_UART_MspInit+0x148>)
 80039ca:	f043 0301 	orr.w	r3, r3, #1
 80039ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039d0:	4b35      	ldr	r3, [pc, #212]	; (8003aa8 <HAL_UART_MspInit+0x148>)
 80039d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	617b      	str	r3, [r7, #20]
 80039da:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = BUS_UART4_TX_Pin|BUS_UART4_RX_Pin;
 80039dc:	2303      	movs	r3, #3
 80039de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e2:	2302      	movs	r3, #2
 80039e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e8:	2300      	movs	r3, #0
 80039ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ee:	2303      	movs	r3, #3
 80039f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80039f4:	2308      	movs	r3, #8
 80039f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039fa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80039fe:	4619      	mov	r1, r3
 8003a00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a04:	f000 faae 	bl	8003f64 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003a08:	2200      	movs	r2, #0
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	2034      	movs	r0, #52	; 0x34
 8003a0e:	f000 f9f4 	bl	8003dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003a12:	2034      	movs	r0, #52	; 0x34
 8003a14:	f000 fa0d 	bl	8003e32 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003a18:	e040      	b.n	8003a9c <HAL_UART_MspInit+0x13c>
  else if(uartHandle->Instance==USART2)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a23      	ldr	r2, [pc, #140]	; (8003aac <HAL_UART_MspInit+0x14c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d13b      	bne.n	8003a9c <HAL_UART_MspInit+0x13c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003a24:	2302      	movs	r3, #2
 8003a26:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a2c:	f107 031c 	add.w	r3, r7, #28
 8003a30:	4618      	mov	r0, r3
 8003a32:	f001 fadf 	bl	8004ff4 <HAL_RCCEx_PeriphCLKConfig>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8003a3c:	f7ff fa32 	bl	8002ea4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a40:	4b19      	ldr	r3, [pc, #100]	; (8003aa8 <HAL_UART_MspInit+0x148>)
 8003a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a44:	4a18      	ldr	r2, [pc, #96]	; (8003aa8 <HAL_UART_MspInit+0x148>)
 8003a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a4a:	6593      	str	r3, [r2, #88]	; 0x58
 8003a4c:	4b16      	ldr	r3, [pc, #88]	; (8003aa8 <HAL_UART_MspInit+0x148>)
 8003a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a54:	613b      	str	r3, [r7, #16]
 8003a56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a58:	4b13      	ldr	r3, [pc, #76]	; (8003aa8 <HAL_UART_MspInit+0x148>)
 8003a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a5c:	4a12      	ldr	r2, [pc, #72]	; (8003aa8 <HAL_UART_MspInit+0x148>)
 8003a5e:	f043 0301 	orr.w	r3, r3, #1
 8003a62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a64:	4b10      	ldr	r3, [pc, #64]	; (8003aa8 <HAL_UART_MspInit+0x148>)
 8003a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	60fb      	str	r3, [r7, #12]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PICOBLADE_USART_TX_Pin|PICOBLADE_USART_RX_Pin;
 8003a70:	230c      	movs	r3, #12
 8003a72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a76:	2302      	movs	r3, #2
 8003a78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a82:	2303      	movs	r3, #3
 8003a84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a88:	2307      	movs	r3, #7
 8003a8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a8e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003a92:	4619      	mov	r1, r3
 8003a94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a98:	f000 fa64 	bl	8003f64 <HAL_GPIO_Init>
}
 8003a9c:	bf00      	nop
 8003a9e:	37b8      	adds	r7, #184	; 0xb8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40004c00 	.word	0x40004c00
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	40004400 	.word	0x40004400

08003ab0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003ab0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ae8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003ab4:	f7ff fbd4 	bl	8003260 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ab8:	480c      	ldr	r0, [pc, #48]	; (8003aec <LoopForever+0x6>)
  ldr r1, =_edata
 8003aba:	490d      	ldr	r1, [pc, #52]	; (8003af0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003abc:	4a0d      	ldr	r2, [pc, #52]	; (8003af4 <LoopForever+0xe>)
  movs r3, #0
 8003abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ac0:	e002      	b.n	8003ac8 <LoopCopyDataInit>

08003ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ac6:	3304      	adds	r3, #4

08003ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003acc:	d3f9      	bcc.n	8003ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ace:	4a0a      	ldr	r2, [pc, #40]	; (8003af8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ad0:	4c0a      	ldr	r4, [pc, #40]	; (8003afc <LoopForever+0x16>)
  movs r3, #0
 8003ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ad4:	e001      	b.n	8003ada <LoopFillZerobss>

08003ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ad8:	3204      	adds	r2, #4

08003ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003adc:	d3fb      	bcc.n	8003ad6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ade:	f003 fff7 	bl	8007ad0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003ae2:	f7fe fff9 	bl	8002ad8 <main>

08003ae6 <LoopForever>:

LoopForever:
    b LoopForever
 8003ae6:	e7fe      	b.n	8003ae6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003ae8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003af0:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8003af4:	0800afcc 	.word	0x0800afcc
  ldr r2, =_sbss
 8003af8:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8003afc:	200006c0 	.word	0x200006c0

08003b00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b00:	e7fe      	b.n	8003b00 <ADC1_2_IRQHandler>
	...

08003b04 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b0e:	4b0c      	ldr	r3, [pc, #48]	; (8003b40 <HAL_Init+0x3c>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a0b      	ldr	r2, [pc, #44]	; (8003b40 <HAL_Init+0x3c>)
 8003b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b18:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b1a:	2003      	movs	r0, #3
 8003b1c:	f000 f962 	bl	8003de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b20:	2000      	movs	r0, #0
 8003b22:	f000 f80f 	bl	8003b44 <HAL_InitTick>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d002      	beq.n	8003b32 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	71fb      	strb	r3, [r7, #7]
 8003b30:	e001      	b.n	8003b36 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003b32:	f7ff fa5d 	bl	8002ff0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003b36:	79fb      	ldrb	r3, [r7, #7]
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40022000 	.word	0x40022000

08003b44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003b50:	4b17      	ldr	r3, [pc, #92]	; (8003bb0 <HAL_InitTick+0x6c>)
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d023      	beq.n	8003ba0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003b58:	4b16      	ldr	r3, [pc, #88]	; (8003bb4 <HAL_InitTick+0x70>)
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	4b14      	ldr	r3, [pc, #80]	; (8003bb0 <HAL_InitTick+0x6c>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	4619      	mov	r1, r3
 8003b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b66:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 f96d 	bl	8003e4e <HAL_SYSTICK_Config>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10f      	bne.n	8003b9a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b0f      	cmp	r3, #15
 8003b7e:	d809      	bhi.n	8003b94 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b80:	2200      	movs	r2, #0
 8003b82:	6879      	ldr	r1, [r7, #4]
 8003b84:	f04f 30ff 	mov.w	r0, #4294967295
 8003b88:	f000 f937 	bl	8003dfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b8c:	4a0a      	ldr	r2, [pc, #40]	; (8003bb8 <HAL_InitTick+0x74>)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6013      	str	r3, [r2, #0]
 8003b92:	e007      	b.n	8003ba4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	73fb      	strb	r3, [r7, #15]
 8003b98:	e004      	b.n	8003ba4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	73fb      	strb	r3, [r7, #15]
 8003b9e:	e001      	b.n	8003ba4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	20000030 	.word	0x20000030
 8003bb4:	20000004 	.word	0x20000004
 8003bb8:	2000002c 	.word	0x2000002c

08003bbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003bc0:	4b06      	ldr	r3, [pc, #24]	; (8003bdc <HAL_IncTick+0x20>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <HAL_IncTick+0x24>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4413      	add	r3, r2
 8003bcc:	4a04      	ldr	r2, [pc, #16]	; (8003be0 <HAL_IncTick+0x24>)
 8003bce:	6013      	str	r3, [r2, #0]
}
 8003bd0:	bf00      	nop
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	20000030 	.word	0x20000030
 8003be0:	200006ac 	.word	0x200006ac

08003be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  return uwTick;
 8003be8:	4b03      	ldr	r3, [pc, #12]	; (8003bf8 <HAL_GetTick+0x14>)
 8003bea:	681b      	ldr	r3, [r3, #0]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	200006ac 	.word	0x200006ac

08003bfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c04:	f7ff ffee 	bl	8003be4 <HAL_GetTick>
 8003c08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c14:	d005      	beq.n	8003c22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003c16:	4b0a      	ldr	r3, [pc, #40]	; (8003c40 <HAL_Delay+0x44>)
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4413      	add	r3, r2
 8003c20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c22:	bf00      	nop
 8003c24:	f7ff ffde 	bl	8003be4 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d8f7      	bhi.n	8003c24 <HAL_Delay+0x28>
  {
  }
}
 8003c34:	bf00      	nop
 8003c36:	bf00      	nop
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	20000030 	.word	0x20000030

08003c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f003 0307 	and.w	r3, r3, #7
 8003c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c54:	4b0c      	ldr	r3, [pc, #48]	; (8003c88 <__NVIC_SetPriorityGrouping+0x44>)
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c5a:	68ba      	ldr	r2, [r7, #8]
 8003c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c60:	4013      	ands	r3, r2
 8003c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c76:	4a04      	ldr	r2, [pc, #16]	; (8003c88 <__NVIC_SetPriorityGrouping+0x44>)
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	60d3      	str	r3, [r2, #12]
}
 8003c7c:	bf00      	nop
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	e000ed00 	.word	0xe000ed00

08003c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c90:	4b04      	ldr	r3, [pc, #16]	; (8003ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	0a1b      	lsrs	r3, r3, #8
 8003c96:	f003 0307 	and.w	r3, r3, #7
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	e000ed00 	.word	0xe000ed00

08003ca8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	4603      	mov	r3, r0
 8003cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	db0b      	blt.n	8003cd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cba:	79fb      	ldrb	r3, [r7, #7]
 8003cbc:	f003 021f 	and.w	r2, r3, #31
 8003cc0:	4907      	ldr	r1, [pc, #28]	; (8003ce0 <__NVIC_EnableIRQ+0x38>)
 8003cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc6:	095b      	lsrs	r3, r3, #5
 8003cc8:	2001      	movs	r0, #1
 8003cca:	fa00 f202 	lsl.w	r2, r0, r2
 8003cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	e000e100 	.word	0xe000e100

08003ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	4603      	mov	r3, r0
 8003cec:	6039      	str	r1, [r7, #0]
 8003cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	db0a      	blt.n	8003d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	490c      	ldr	r1, [pc, #48]	; (8003d30 <__NVIC_SetPriority+0x4c>)
 8003cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d02:	0112      	lsls	r2, r2, #4
 8003d04:	b2d2      	uxtb	r2, r2
 8003d06:	440b      	add	r3, r1
 8003d08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d0c:	e00a      	b.n	8003d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	4908      	ldr	r1, [pc, #32]	; (8003d34 <__NVIC_SetPriority+0x50>)
 8003d14:	79fb      	ldrb	r3, [r7, #7]
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	3b04      	subs	r3, #4
 8003d1c:	0112      	lsls	r2, r2, #4
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	440b      	add	r3, r1
 8003d22:	761a      	strb	r2, [r3, #24]
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr
 8003d30:	e000e100 	.word	0xe000e100
 8003d34:	e000ed00 	.word	0xe000ed00

08003d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b089      	sub	sp, #36	; 0x24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f003 0307 	and.w	r3, r3, #7
 8003d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	f1c3 0307 	rsb	r3, r3, #7
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	bf28      	it	cs
 8003d56:	2304      	movcs	r3, #4
 8003d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	2b06      	cmp	r3, #6
 8003d60:	d902      	bls.n	8003d68 <NVIC_EncodePriority+0x30>
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	3b03      	subs	r3, #3
 8003d66:	e000      	b.n	8003d6a <NVIC_EncodePriority+0x32>
 8003d68:	2300      	movs	r3, #0
 8003d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	fa02 f303 	lsl.w	r3, r2, r3
 8003d76:	43da      	mvns	r2, r3
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	401a      	ands	r2, r3
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d80:	f04f 31ff 	mov.w	r1, #4294967295
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	fa01 f303 	lsl.w	r3, r1, r3
 8003d8a:	43d9      	mvns	r1, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d90:	4313      	orrs	r3, r2
         );
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3724      	adds	r7, #36	; 0x24
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
	...

08003da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	3b01      	subs	r3, #1
 8003dac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003db0:	d301      	bcc.n	8003db6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003db2:	2301      	movs	r3, #1
 8003db4:	e00f      	b.n	8003dd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003db6:	4a0a      	ldr	r2, [pc, #40]	; (8003de0 <SysTick_Config+0x40>)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dbe:	210f      	movs	r1, #15
 8003dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc4:	f7ff ff8e 	bl	8003ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dc8:	4b05      	ldr	r3, [pc, #20]	; (8003de0 <SysTick_Config+0x40>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dce:	4b04      	ldr	r3, [pc, #16]	; (8003de0 <SysTick_Config+0x40>)
 8003dd0:	2207      	movs	r2, #7
 8003dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	e000e010 	.word	0xe000e010

08003de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f7ff ff29 	bl	8003c44 <__NVIC_SetPriorityGrouping>
}
 8003df2:	bf00      	nop
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b086      	sub	sp, #24
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	4603      	mov	r3, r0
 8003e02:	60b9      	str	r1, [r7, #8]
 8003e04:	607a      	str	r2, [r7, #4]
 8003e06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e0c:	f7ff ff3e 	bl	8003c8c <__NVIC_GetPriorityGrouping>
 8003e10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	68b9      	ldr	r1, [r7, #8]
 8003e16:	6978      	ldr	r0, [r7, #20]
 8003e18:	f7ff ff8e 	bl	8003d38 <NVIC_EncodePriority>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e22:	4611      	mov	r1, r2
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff ff5d 	bl	8003ce4 <__NVIC_SetPriority>
}
 8003e2a:	bf00      	nop
 8003e2c:	3718      	adds	r7, #24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b082      	sub	sp, #8
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	4603      	mov	r3, r0
 8003e3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7ff ff31 	bl	8003ca8 <__NVIC_EnableIRQ>
}
 8003e46:	bf00      	nop
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b082      	sub	sp, #8
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7ff ffa2 	bl	8003da0 <SysTick_Config>
 8003e5c:	4603      	mov	r3, r0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b085      	sub	sp, #20
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d008      	beq.n	8003e90 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2204      	movs	r2, #4
 8003e82:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e022      	b.n	8003ed6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 020e 	bic.w	r2, r2, #14
 8003e9e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 0201 	bic.w	r2, r2, #1
 8003eae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb4:	f003 021c 	and.w	r2, r3, #28
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8003ec2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003ed4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3714      	adds	r7, #20
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b084      	sub	sp, #16
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003eea:	2300      	movs	r3, #0
 8003eec:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d005      	beq.n	8003f06 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2204      	movs	r2, #4
 8003efe:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	73fb      	strb	r3, [r7, #15]
 8003f04:	e029      	b.n	8003f5a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 020e 	bic.w	r2, r2, #14
 8003f14:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0201 	bic.w	r2, r2, #1
 8003f24:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2a:	f003 021c 	and.w	r2, r3, #28
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	2101      	movs	r1, #1
 8003f34:	fa01 f202 	lsl.w	r2, r1, r2
 8003f38:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	4798      	blx	r3
    }
  }
  return status;
 8003f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b087      	sub	sp, #28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f72:	e17f      	b.n	8004274 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	2101      	movs	r1, #1
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f80:	4013      	ands	r3, r2
 8003f82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f000 8171 	beq.w	800426e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f003 0303 	and.w	r3, r3, #3
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d005      	beq.n	8003fa4 <HAL_GPIO_Init+0x40>
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f003 0303 	and.w	r3, r3, #3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d130      	bne.n	8004006 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	2203      	movs	r2, #3
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	43db      	mvns	r3, r3
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	68da      	ldr	r2, [r3, #12]
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fda:	2201      	movs	r2, #1
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe2:	43db      	mvns	r3, r3
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	091b      	lsrs	r3, r3, #4
 8003ff0:	f003 0201 	and.w	r2, r3, #1
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f003 0303 	and.w	r3, r3, #3
 800400e:	2b03      	cmp	r3, #3
 8004010:	d118      	bne.n	8004044 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004016:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004018:	2201      	movs	r2, #1
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	43db      	mvns	r3, r3
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	4013      	ands	r3, r2
 8004026:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	08db      	lsrs	r3, r3, #3
 800402e:	f003 0201 	and.w	r2, r3, #1
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	fa02 f303 	lsl.w	r3, r2, r3
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	4313      	orrs	r3, r2
 800403c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f003 0303 	and.w	r3, r3, #3
 800404c:	2b03      	cmp	r3, #3
 800404e:	d017      	beq.n	8004080 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	2203      	movs	r2, #3
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	43db      	mvns	r3, r3
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	4013      	ands	r3, r2
 8004066:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	fa02 f303 	lsl.w	r3, r2, r3
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	4313      	orrs	r3, r2
 8004078:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f003 0303 	and.w	r3, r3, #3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d123      	bne.n	80040d4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	08da      	lsrs	r2, r3, #3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3208      	adds	r2, #8
 8004094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004098:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	220f      	movs	r2, #15
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	43db      	mvns	r3, r3
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4013      	ands	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	691a      	ldr	r2, [r3, #16]
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f003 0307 	and.w	r3, r3, #7
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	fa02 f303 	lsl.w	r3, r2, r3
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	08da      	lsrs	r2, r3, #3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	3208      	adds	r2, #8
 80040ce:	6939      	ldr	r1, [r7, #16]
 80040d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	2203      	movs	r2, #3
 80040e0:	fa02 f303 	lsl.w	r3, r2, r3
 80040e4:	43db      	mvns	r3, r3
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	4013      	ands	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f003 0203 	and.w	r2, r3, #3
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	fa02 f303 	lsl.w	r3, r2, r3
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	4313      	orrs	r3, r2
 8004100:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 80ac 	beq.w	800426e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004116:	4b5f      	ldr	r3, [pc, #380]	; (8004294 <HAL_GPIO_Init+0x330>)
 8004118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800411a:	4a5e      	ldr	r2, [pc, #376]	; (8004294 <HAL_GPIO_Init+0x330>)
 800411c:	f043 0301 	orr.w	r3, r3, #1
 8004120:	6613      	str	r3, [r2, #96]	; 0x60
 8004122:	4b5c      	ldr	r3, [pc, #368]	; (8004294 <HAL_GPIO_Init+0x330>)
 8004124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	60bb      	str	r3, [r7, #8]
 800412c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800412e:	4a5a      	ldr	r2, [pc, #360]	; (8004298 <HAL_GPIO_Init+0x334>)
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	089b      	lsrs	r3, r3, #2
 8004134:	3302      	adds	r3, #2
 8004136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800413a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f003 0303 	and.w	r3, r3, #3
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	220f      	movs	r2, #15
 8004146:	fa02 f303 	lsl.w	r3, r2, r3
 800414a:	43db      	mvns	r3, r3
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	4013      	ands	r3, r2
 8004150:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004158:	d025      	beq.n	80041a6 <HAL_GPIO_Init+0x242>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a4f      	ldr	r2, [pc, #316]	; (800429c <HAL_GPIO_Init+0x338>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d01f      	beq.n	80041a2 <HAL_GPIO_Init+0x23e>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a4e      	ldr	r2, [pc, #312]	; (80042a0 <HAL_GPIO_Init+0x33c>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d019      	beq.n	800419e <HAL_GPIO_Init+0x23a>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a4d      	ldr	r2, [pc, #308]	; (80042a4 <HAL_GPIO_Init+0x340>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d013      	beq.n	800419a <HAL_GPIO_Init+0x236>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a4c      	ldr	r2, [pc, #304]	; (80042a8 <HAL_GPIO_Init+0x344>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d00d      	beq.n	8004196 <HAL_GPIO_Init+0x232>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a4b      	ldr	r2, [pc, #300]	; (80042ac <HAL_GPIO_Init+0x348>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d007      	beq.n	8004192 <HAL_GPIO_Init+0x22e>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a4a      	ldr	r2, [pc, #296]	; (80042b0 <HAL_GPIO_Init+0x34c>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d101      	bne.n	800418e <HAL_GPIO_Init+0x22a>
 800418a:	2306      	movs	r3, #6
 800418c:	e00c      	b.n	80041a8 <HAL_GPIO_Init+0x244>
 800418e:	2307      	movs	r3, #7
 8004190:	e00a      	b.n	80041a8 <HAL_GPIO_Init+0x244>
 8004192:	2305      	movs	r3, #5
 8004194:	e008      	b.n	80041a8 <HAL_GPIO_Init+0x244>
 8004196:	2304      	movs	r3, #4
 8004198:	e006      	b.n	80041a8 <HAL_GPIO_Init+0x244>
 800419a:	2303      	movs	r3, #3
 800419c:	e004      	b.n	80041a8 <HAL_GPIO_Init+0x244>
 800419e:	2302      	movs	r3, #2
 80041a0:	e002      	b.n	80041a8 <HAL_GPIO_Init+0x244>
 80041a2:	2301      	movs	r3, #1
 80041a4:	e000      	b.n	80041a8 <HAL_GPIO_Init+0x244>
 80041a6:	2300      	movs	r3, #0
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	f002 0203 	and.w	r2, r2, #3
 80041ae:	0092      	lsls	r2, r2, #2
 80041b0:	4093      	lsls	r3, r2
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80041b8:	4937      	ldr	r1, [pc, #220]	; (8004298 <HAL_GPIO_Init+0x334>)
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	089b      	lsrs	r3, r3, #2
 80041be:	3302      	adds	r3, #2
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041c6:	4b3b      	ldr	r3, [pc, #236]	; (80042b4 <HAL_GPIO_Init+0x350>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	43db      	mvns	r3, r3
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	4013      	ands	r3, r2
 80041d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80041ea:	4a32      	ldr	r2, [pc, #200]	; (80042b4 <HAL_GPIO_Init+0x350>)
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80041f0:	4b30      	ldr	r3, [pc, #192]	; (80042b4 <HAL_GPIO_Init+0x350>)
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	43db      	mvns	r3, r3
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	4013      	ands	r3, r2
 80041fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d003      	beq.n	8004214 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	4313      	orrs	r3, r2
 8004212:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004214:	4a27      	ldr	r2, [pc, #156]	; (80042b4 <HAL_GPIO_Init+0x350>)
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800421a:	4b26      	ldr	r3, [pc, #152]	; (80042b4 <HAL_GPIO_Init+0x350>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	43db      	mvns	r3, r3
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	4013      	ands	r3, r2
 8004228:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	4313      	orrs	r3, r2
 800423c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800423e:	4a1d      	ldr	r2, [pc, #116]	; (80042b4 <HAL_GPIO_Init+0x350>)
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004244:	4b1b      	ldr	r3, [pc, #108]	; (80042b4 <HAL_GPIO_Init+0x350>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	43db      	mvns	r3, r3
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	4013      	ands	r3, r2
 8004252:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d003      	beq.n	8004268 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	4313      	orrs	r3, r2
 8004266:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004268:	4a12      	ldr	r2, [pc, #72]	; (80042b4 <HAL_GPIO_Init+0x350>)
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	3301      	adds	r3, #1
 8004272:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	fa22 f303 	lsr.w	r3, r2, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	f47f ae78 	bne.w	8003f74 <HAL_GPIO_Init+0x10>
  }
}
 8004284:	bf00      	nop
 8004286:	bf00      	nop
 8004288:	371c      	adds	r7, #28
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	40021000 	.word	0x40021000
 8004298:	40010000 	.word	0x40010000
 800429c:	48000400 	.word	0x48000400
 80042a0:	48000800 	.word	0x48000800
 80042a4:	48000c00 	.word	0x48000c00
 80042a8:	48001000 	.word	0x48001000
 80042ac:	48001400 	.word	0x48001400
 80042b0:	48001800 	.word	0x48001800
 80042b4:	40010400 	.word	0x40010400

080042b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	460b      	mov	r3, r1
 80042c2:	807b      	strh	r3, [r7, #2]
 80042c4:	4613      	mov	r3, r2
 80042c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042c8:	787b      	ldrb	r3, [r7, #1]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d003      	beq.n	80042d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042ce:	887a      	ldrh	r2, [r7, #2]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042d4:	e002      	b.n	80042dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042d6:	887a      	ldrh	r2, [r7, #2]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	4603      	mov	r3, r0
 80042f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80042f2:	4b08      	ldr	r3, [pc, #32]	; (8004314 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042f4:	695a      	ldr	r2, [r3, #20]
 80042f6:	88fb      	ldrh	r3, [r7, #6]
 80042f8:	4013      	ands	r3, r2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d006      	beq.n	800430c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80042fe:	4a05      	ldr	r2, [pc, #20]	; (8004314 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004300:	88fb      	ldrh	r3, [r7, #6]
 8004302:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004304:	88fb      	ldrh	r3, [r7, #6]
 8004306:	4618      	mov	r0, r3
 8004308:	f000 f806 	bl	8004318 <HAL_GPIO_EXTI_Callback>
  }
}
 800430c:	bf00      	nop
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40010400 	.word	0x40010400

08004318 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	4603      	mov	r3, r0
 8004320:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004322:	bf00      	nop
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
	...

08004330 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004334:	4b04      	ldr	r3, [pc, #16]	; (8004348 <HAL_PWREx_GetVoltageRange+0x18>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800433c:	4618      	mov	r0, r3
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	40007000 	.word	0x40007000

0800434c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800435a:	d130      	bne.n	80043be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800435c:	4b23      	ldr	r3, [pc, #140]	; (80043ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004368:	d038      	beq.n	80043dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800436a:	4b20      	ldr	r3, [pc, #128]	; (80043ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004372:	4a1e      	ldr	r2, [pc, #120]	; (80043ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004374:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004378:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800437a:	4b1d      	ldr	r3, [pc, #116]	; (80043f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2232      	movs	r2, #50	; 0x32
 8004380:	fb02 f303 	mul.w	r3, r2, r3
 8004384:	4a1b      	ldr	r2, [pc, #108]	; (80043f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004386:	fba2 2303 	umull	r2, r3, r2, r3
 800438a:	0c9b      	lsrs	r3, r3, #18
 800438c:	3301      	adds	r3, #1
 800438e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004390:	e002      	b.n	8004398 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	3b01      	subs	r3, #1
 8004396:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004398:	4b14      	ldr	r3, [pc, #80]	; (80043ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043a4:	d102      	bne.n	80043ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1f2      	bne.n	8004392 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043ac:	4b0f      	ldr	r3, [pc, #60]	; (80043ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043b8:	d110      	bne.n	80043dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e00f      	b.n	80043de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80043be:	4b0b      	ldr	r3, [pc, #44]	; (80043ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ca:	d007      	beq.n	80043dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80043cc:	4b07      	ldr	r3, [pc, #28]	; (80043ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043d4:	4a05      	ldr	r2, [pc, #20]	; (80043ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3714      	adds	r7, #20
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	40007000 	.word	0x40007000
 80043f0:	20000004 	.word	0x20000004
 80043f4:	431bde83 	.word	0x431bde83

080043f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b088      	sub	sp, #32
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e3c6      	b.n	8004b98 <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800440a:	4ba1      	ldr	r3, [pc, #644]	; (8004690 <HAL_RCC_OscConfig+0x298>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 030c 	and.w	r3, r3, #12
 8004412:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004414:	4b9e      	ldr	r3, [pc, #632]	; (8004690 <HAL_RCC_OscConfig+0x298>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f003 0303 	and.w	r3, r3, #3
 800441c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0310 	and.w	r3, r3, #16
 8004426:	2b00      	cmp	r3, #0
 8004428:	f000 80e4 	beq.w	80045f4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d007      	beq.n	8004442 <HAL_RCC_OscConfig+0x4a>
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	2b0c      	cmp	r3, #12
 8004436:	f040 808b 	bne.w	8004550 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2b01      	cmp	r3, #1
 800443e:	f040 8087 	bne.w	8004550 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004442:	4b93      	ldr	r3, [pc, #588]	; (8004690 <HAL_RCC_OscConfig+0x298>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d005      	beq.n	800445a <HAL_RCC_OscConfig+0x62>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e39e      	b.n	8004b98 <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1a      	ldr	r2, [r3, #32]
 800445e:	4b8c      	ldr	r3, [pc, #560]	; (8004690 <HAL_RCC_OscConfig+0x298>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0308 	and.w	r3, r3, #8
 8004466:	2b00      	cmp	r3, #0
 8004468:	d004      	beq.n	8004474 <HAL_RCC_OscConfig+0x7c>
 800446a:	4b89      	ldr	r3, [pc, #548]	; (8004690 <HAL_RCC_OscConfig+0x298>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004472:	e005      	b.n	8004480 <HAL_RCC_OscConfig+0x88>
 8004474:	4b86      	ldr	r3, [pc, #536]	; (8004690 <HAL_RCC_OscConfig+0x298>)
 8004476:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800447a:	091b      	lsrs	r3, r3, #4
 800447c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004480:	4293      	cmp	r3, r2
 8004482:	d223      	bcs.n	80044cc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	4618      	mov	r0, r3
 800448a:	f000 fd53 	bl	8004f34 <RCC_SetFlashLatencyFromMSIRange>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e37f      	b.n	8004b98 <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004498:	4b7d      	ldr	r3, [pc, #500]	; (8004690 <HAL_RCC_OscConfig+0x298>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a7c      	ldr	r2, [pc, #496]	; (8004690 <HAL_RCC_OscConfig+0x298>)
 800449e:	f043 0308 	orr.w	r3, r3, #8
 80044a2:	6013      	str	r3, [r2, #0]
 80044a4:	4b7a      	ldr	r3, [pc, #488]	; (8004690 <HAL_RCC_OscConfig+0x298>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	4977      	ldr	r1, [pc, #476]	; (8004690 <HAL_RCC_OscConfig+0x298>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044b6:	4b76      	ldr	r3, [pc, #472]	; (8004690 <HAL_RCC_OscConfig+0x298>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	021b      	lsls	r3, r3, #8
 80044c4:	4972      	ldr	r1, [pc, #456]	; (8004690 <HAL_RCC_OscConfig+0x298>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	604b      	str	r3, [r1, #4]
 80044ca:	e025      	b.n	8004518 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044cc:	4b70      	ldr	r3, [pc, #448]	; (8004690 <HAL_RCC_OscConfig+0x298>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a6f      	ldr	r2, [pc, #444]	; (8004690 <HAL_RCC_OscConfig+0x298>)
 80044d2:	f043 0308 	orr.w	r3, r3, #8
 80044d6:	6013      	str	r3, [r2, #0]
 80044d8:	4b6d      	ldr	r3, [pc, #436]	; (8004690 <HAL_RCC_OscConfig+0x298>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	496a      	ldr	r1, [pc, #424]	; (8004690 <HAL_RCC_OscConfig+0x298>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044ea:	4b69      	ldr	r3, [pc, #420]	; (8004690 <HAL_RCC_OscConfig+0x298>)
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	021b      	lsls	r3, r3, #8
 80044f8:	4965      	ldr	r1, [pc, #404]	; (8004690 <HAL_RCC_OscConfig+0x298>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d109      	bne.n	8004518 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	4618      	mov	r0, r3
 800450a:	f000 fd13 	bl	8004f34 <RCC_SetFlashLatencyFromMSIRange>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e33f      	b.n	8004b98 <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004518:	f000 fc48 	bl	8004dac <HAL_RCC_GetSysClockFreq>
 800451c:	4602      	mov	r2, r0
 800451e:	4b5c      	ldr	r3, [pc, #368]	; (8004690 <HAL_RCC_OscConfig+0x298>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	091b      	lsrs	r3, r3, #4
 8004524:	f003 030f 	and.w	r3, r3, #15
 8004528:	495a      	ldr	r1, [pc, #360]	; (8004694 <HAL_RCC_OscConfig+0x29c>)
 800452a:	5ccb      	ldrb	r3, [r1, r3]
 800452c:	f003 031f 	and.w	r3, r3, #31
 8004530:	fa22 f303 	lsr.w	r3, r2, r3
 8004534:	4a58      	ldr	r2, [pc, #352]	; (8004698 <HAL_RCC_OscConfig+0x2a0>)
 8004536:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004538:	4b58      	ldr	r3, [pc, #352]	; (800469c <HAL_RCC_OscConfig+0x2a4>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4618      	mov	r0, r3
 800453e:	f7ff fb01 	bl	8003b44 <HAL_InitTick>
 8004542:	4603      	mov	r3, r0
 8004544:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004546:	7bfb      	ldrb	r3, [r7, #15]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d052      	beq.n	80045f2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800454c:	7bfb      	ldrb	r3, [r7, #15]
 800454e:	e323      	b.n	8004b98 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d032      	beq.n	80045be <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004558:	4b4d      	ldr	r3, [pc, #308]	; (8004690 <HAL_RCC_OscConfig+0x298>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a4c      	ldr	r2, [pc, #304]	; (8004690 <HAL_RCC_OscConfig+0x298>)
 800455e:	f043 0301 	orr.w	r3, r3, #1
 8004562:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004564:	f7ff fb3e 	bl	8003be4 <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800456c:	f7ff fb3a 	bl	8003be4 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e30c      	b.n	8004b98 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800457e:	4b44      	ldr	r3, [pc, #272]	; (8004690 <HAL_RCC_OscConfig+0x298>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d0f0      	beq.n	800456c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800458a:	4b41      	ldr	r3, [pc, #260]	; (8004690 <HAL_RCC_OscConfig+0x298>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a40      	ldr	r2, [pc, #256]	; (8004690 <HAL_RCC_OscConfig+0x298>)
 8004590:	f043 0308 	orr.w	r3, r3, #8
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	4b3e      	ldr	r3, [pc, #248]	; (8004690 <HAL_RCC_OscConfig+0x298>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	493b      	ldr	r1, [pc, #236]	; (8004690 <HAL_RCC_OscConfig+0x298>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045a8:	4b39      	ldr	r3, [pc, #228]	; (8004690 <HAL_RCC_OscConfig+0x298>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	69db      	ldr	r3, [r3, #28]
 80045b4:	021b      	lsls	r3, r3, #8
 80045b6:	4936      	ldr	r1, [pc, #216]	; (8004690 <HAL_RCC_OscConfig+0x298>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	604b      	str	r3, [r1, #4]
 80045bc:	e01a      	b.n	80045f4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80045be:	4b34      	ldr	r3, [pc, #208]	; (8004690 <HAL_RCC_OscConfig+0x298>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a33      	ldr	r2, [pc, #204]	; (8004690 <HAL_RCC_OscConfig+0x298>)
 80045c4:	f023 0301 	bic.w	r3, r3, #1
 80045c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045ca:	f7ff fb0b 	bl	8003be4 <HAL_GetTick>
 80045ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045d0:	e008      	b.n	80045e4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045d2:	f7ff fb07 	bl	8003be4 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d901      	bls.n	80045e4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e2d9      	b.n	8004b98 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045e4:	4b2a      	ldr	r3, [pc, #168]	; (8004690 <HAL_RCC_OscConfig+0x298>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1f0      	bne.n	80045d2 <HAL_RCC_OscConfig+0x1da>
 80045f0:	e000      	b.n	80045f4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d074      	beq.n	80046ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	2b08      	cmp	r3, #8
 8004604:	d005      	beq.n	8004612 <HAL_RCC_OscConfig+0x21a>
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	2b0c      	cmp	r3, #12
 800460a:	d10e      	bne.n	800462a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	2b03      	cmp	r3, #3
 8004610:	d10b      	bne.n	800462a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004612:	4b1f      	ldr	r3, [pc, #124]	; (8004690 <HAL_RCC_OscConfig+0x298>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d064      	beq.n	80046e8 <HAL_RCC_OscConfig+0x2f0>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d160      	bne.n	80046e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e2b6      	b.n	8004b98 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004632:	d106      	bne.n	8004642 <HAL_RCC_OscConfig+0x24a>
 8004634:	4b16      	ldr	r3, [pc, #88]	; (8004690 <HAL_RCC_OscConfig+0x298>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a15      	ldr	r2, [pc, #84]	; (8004690 <HAL_RCC_OscConfig+0x298>)
 800463a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800463e:	6013      	str	r3, [r2, #0]
 8004640:	e01d      	b.n	800467e <HAL_RCC_OscConfig+0x286>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800464a:	d10c      	bne.n	8004666 <HAL_RCC_OscConfig+0x26e>
 800464c:	4b10      	ldr	r3, [pc, #64]	; (8004690 <HAL_RCC_OscConfig+0x298>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a0f      	ldr	r2, [pc, #60]	; (8004690 <HAL_RCC_OscConfig+0x298>)
 8004652:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004656:	6013      	str	r3, [r2, #0]
 8004658:	4b0d      	ldr	r3, [pc, #52]	; (8004690 <HAL_RCC_OscConfig+0x298>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a0c      	ldr	r2, [pc, #48]	; (8004690 <HAL_RCC_OscConfig+0x298>)
 800465e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004662:	6013      	str	r3, [r2, #0]
 8004664:	e00b      	b.n	800467e <HAL_RCC_OscConfig+0x286>
 8004666:	4b0a      	ldr	r3, [pc, #40]	; (8004690 <HAL_RCC_OscConfig+0x298>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a09      	ldr	r2, [pc, #36]	; (8004690 <HAL_RCC_OscConfig+0x298>)
 800466c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004670:	6013      	str	r3, [r2, #0]
 8004672:	4b07      	ldr	r3, [pc, #28]	; (8004690 <HAL_RCC_OscConfig+0x298>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a06      	ldr	r2, [pc, #24]	; (8004690 <HAL_RCC_OscConfig+0x298>)
 8004678:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800467c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d01c      	beq.n	80046c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004686:	f7ff faad 	bl	8003be4 <HAL_GetTick>
 800468a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800468c:	e011      	b.n	80046b2 <HAL_RCC_OscConfig+0x2ba>
 800468e:	bf00      	nop
 8004690:	40021000 	.word	0x40021000
 8004694:	0800ab3c 	.word	0x0800ab3c
 8004698:	20000004 	.word	0x20000004
 800469c:	2000002c 	.word	0x2000002c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046a0:	f7ff faa0 	bl	8003be4 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b64      	cmp	r3, #100	; 0x64
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e272      	b.n	8004b98 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046b2:	4baf      	ldr	r3, [pc, #700]	; (8004970 <HAL_RCC_OscConfig+0x578>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d0f0      	beq.n	80046a0 <HAL_RCC_OscConfig+0x2a8>
 80046be:	e014      	b.n	80046ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c0:	f7ff fa90 	bl	8003be4 <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046c6:	e008      	b.n	80046da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046c8:	f7ff fa8c 	bl	8003be4 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b64      	cmp	r3, #100	; 0x64
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e25e      	b.n	8004b98 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046da:	4ba5      	ldr	r3, [pc, #660]	; (8004970 <HAL_RCC_OscConfig+0x578>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1f0      	bne.n	80046c8 <HAL_RCC_OscConfig+0x2d0>
 80046e6:	e000      	b.n	80046ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d060      	beq.n	80047b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	2b04      	cmp	r3, #4
 80046fa:	d005      	beq.n	8004708 <HAL_RCC_OscConfig+0x310>
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	2b0c      	cmp	r3, #12
 8004700:	d119      	bne.n	8004736 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	2b02      	cmp	r3, #2
 8004706:	d116      	bne.n	8004736 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004708:	4b99      	ldr	r3, [pc, #612]	; (8004970 <HAL_RCC_OscConfig+0x578>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004710:	2b00      	cmp	r3, #0
 8004712:	d005      	beq.n	8004720 <HAL_RCC_OscConfig+0x328>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e23b      	b.n	8004b98 <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004720:	4b93      	ldr	r3, [pc, #588]	; (8004970 <HAL_RCC_OscConfig+0x578>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	061b      	lsls	r3, r3, #24
 800472e:	4990      	ldr	r1, [pc, #576]	; (8004970 <HAL_RCC_OscConfig+0x578>)
 8004730:	4313      	orrs	r3, r2
 8004732:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004734:	e040      	b.n	80047b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d023      	beq.n	8004786 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800473e:	4b8c      	ldr	r3, [pc, #560]	; (8004970 <HAL_RCC_OscConfig+0x578>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a8b      	ldr	r2, [pc, #556]	; (8004970 <HAL_RCC_OscConfig+0x578>)
 8004744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004748:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474a:	f7ff fa4b 	bl	8003be4 <HAL_GetTick>
 800474e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004750:	e008      	b.n	8004764 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004752:	f7ff fa47 	bl	8003be4 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e219      	b.n	8004b98 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004764:	4b82      	ldr	r3, [pc, #520]	; (8004970 <HAL_RCC_OscConfig+0x578>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0f0      	beq.n	8004752 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004770:	4b7f      	ldr	r3, [pc, #508]	; (8004970 <HAL_RCC_OscConfig+0x578>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	061b      	lsls	r3, r3, #24
 800477e:	497c      	ldr	r1, [pc, #496]	; (8004970 <HAL_RCC_OscConfig+0x578>)
 8004780:	4313      	orrs	r3, r2
 8004782:	604b      	str	r3, [r1, #4]
 8004784:	e018      	b.n	80047b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004786:	4b7a      	ldr	r3, [pc, #488]	; (8004970 <HAL_RCC_OscConfig+0x578>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a79      	ldr	r2, [pc, #484]	; (8004970 <HAL_RCC_OscConfig+0x578>)
 800478c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004792:	f7ff fa27 	bl	8003be4 <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004798:	e008      	b.n	80047ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800479a:	f7ff fa23 	bl	8003be4 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e1f5      	b.n	8004b98 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047ac:	4b70      	ldr	r3, [pc, #448]	; (8004970 <HAL_RCC_OscConfig+0x578>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1f0      	bne.n	800479a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0308 	and.w	r3, r3, #8
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d03c      	beq.n	800483e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d01c      	beq.n	8004806 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047cc:	4b68      	ldr	r3, [pc, #416]	; (8004970 <HAL_RCC_OscConfig+0x578>)
 80047ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047d2:	4a67      	ldr	r2, [pc, #412]	; (8004970 <HAL_RCC_OscConfig+0x578>)
 80047d4:	f043 0301 	orr.w	r3, r3, #1
 80047d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047dc:	f7ff fa02 	bl	8003be4 <HAL_GetTick>
 80047e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047e2:	e008      	b.n	80047f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047e4:	f7ff f9fe 	bl	8003be4 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e1d0      	b.n	8004b98 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047f6:	4b5e      	ldr	r3, [pc, #376]	; (8004970 <HAL_RCC_OscConfig+0x578>)
 80047f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d0ef      	beq.n	80047e4 <HAL_RCC_OscConfig+0x3ec>
 8004804:	e01b      	b.n	800483e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004806:	4b5a      	ldr	r3, [pc, #360]	; (8004970 <HAL_RCC_OscConfig+0x578>)
 8004808:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800480c:	4a58      	ldr	r2, [pc, #352]	; (8004970 <HAL_RCC_OscConfig+0x578>)
 800480e:	f023 0301 	bic.w	r3, r3, #1
 8004812:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004816:	f7ff f9e5 	bl	8003be4 <HAL_GetTick>
 800481a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800481c:	e008      	b.n	8004830 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800481e:	f7ff f9e1 	bl	8003be4 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	2b02      	cmp	r3, #2
 800482a:	d901      	bls.n	8004830 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e1b3      	b.n	8004b98 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004830:	4b4f      	ldr	r3, [pc, #316]	; (8004970 <HAL_RCC_OscConfig+0x578>)
 8004832:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1ef      	bne.n	800481e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0304 	and.w	r3, r3, #4
 8004846:	2b00      	cmp	r3, #0
 8004848:	f000 80a6 	beq.w	8004998 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800484c:	2300      	movs	r3, #0
 800484e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004850:	4b47      	ldr	r3, [pc, #284]	; (8004970 <HAL_RCC_OscConfig+0x578>)
 8004852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10d      	bne.n	8004878 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800485c:	4b44      	ldr	r3, [pc, #272]	; (8004970 <HAL_RCC_OscConfig+0x578>)
 800485e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004860:	4a43      	ldr	r2, [pc, #268]	; (8004970 <HAL_RCC_OscConfig+0x578>)
 8004862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004866:	6593      	str	r3, [r2, #88]	; 0x58
 8004868:	4b41      	ldr	r3, [pc, #260]	; (8004970 <HAL_RCC_OscConfig+0x578>)
 800486a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800486c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004870:	60bb      	str	r3, [r7, #8]
 8004872:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004874:	2301      	movs	r3, #1
 8004876:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004878:	4b3e      	ldr	r3, [pc, #248]	; (8004974 <HAL_RCC_OscConfig+0x57c>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004880:	2b00      	cmp	r3, #0
 8004882:	d118      	bne.n	80048b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004884:	4b3b      	ldr	r3, [pc, #236]	; (8004974 <HAL_RCC_OscConfig+0x57c>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a3a      	ldr	r2, [pc, #232]	; (8004974 <HAL_RCC_OscConfig+0x57c>)
 800488a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800488e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004890:	f7ff f9a8 	bl	8003be4 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004898:	f7ff f9a4 	bl	8003be4 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e176      	b.n	8004b98 <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048aa:	4b32      	ldr	r3, [pc, #200]	; (8004974 <HAL_RCC_OscConfig+0x57c>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d0f0      	beq.n	8004898 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d108      	bne.n	80048d0 <HAL_RCC_OscConfig+0x4d8>
 80048be:	4b2c      	ldr	r3, [pc, #176]	; (8004970 <HAL_RCC_OscConfig+0x578>)
 80048c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c4:	4a2a      	ldr	r2, [pc, #168]	; (8004970 <HAL_RCC_OscConfig+0x578>)
 80048c6:	f043 0301 	orr.w	r3, r3, #1
 80048ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048ce:	e024      	b.n	800491a <HAL_RCC_OscConfig+0x522>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	2b05      	cmp	r3, #5
 80048d6:	d110      	bne.n	80048fa <HAL_RCC_OscConfig+0x502>
 80048d8:	4b25      	ldr	r3, [pc, #148]	; (8004970 <HAL_RCC_OscConfig+0x578>)
 80048da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048de:	4a24      	ldr	r2, [pc, #144]	; (8004970 <HAL_RCC_OscConfig+0x578>)
 80048e0:	f043 0304 	orr.w	r3, r3, #4
 80048e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048e8:	4b21      	ldr	r3, [pc, #132]	; (8004970 <HAL_RCC_OscConfig+0x578>)
 80048ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ee:	4a20      	ldr	r2, [pc, #128]	; (8004970 <HAL_RCC_OscConfig+0x578>)
 80048f0:	f043 0301 	orr.w	r3, r3, #1
 80048f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048f8:	e00f      	b.n	800491a <HAL_RCC_OscConfig+0x522>
 80048fa:	4b1d      	ldr	r3, [pc, #116]	; (8004970 <HAL_RCC_OscConfig+0x578>)
 80048fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004900:	4a1b      	ldr	r2, [pc, #108]	; (8004970 <HAL_RCC_OscConfig+0x578>)
 8004902:	f023 0301 	bic.w	r3, r3, #1
 8004906:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800490a:	4b19      	ldr	r3, [pc, #100]	; (8004970 <HAL_RCC_OscConfig+0x578>)
 800490c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004910:	4a17      	ldr	r2, [pc, #92]	; (8004970 <HAL_RCC_OscConfig+0x578>)
 8004912:	f023 0304 	bic.w	r3, r3, #4
 8004916:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d016      	beq.n	8004950 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004922:	f7ff f95f 	bl	8003be4 <HAL_GetTick>
 8004926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004928:	e00a      	b.n	8004940 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800492a:	f7ff f95b 	bl	8003be4 <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	f241 3288 	movw	r2, #5000	; 0x1388
 8004938:	4293      	cmp	r3, r2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e12b      	b.n	8004b98 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004940:	4b0b      	ldr	r3, [pc, #44]	; (8004970 <HAL_RCC_OscConfig+0x578>)
 8004942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d0ed      	beq.n	800492a <HAL_RCC_OscConfig+0x532>
 800494e:	e01a      	b.n	8004986 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004950:	f7ff f948 	bl	8003be4 <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004956:	e00f      	b.n	8004978 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004958:	f7ff f944 	bl	8003be4 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	f241 3288 	movw	r2, #5000	; 0x1388
 8004966:	4293      	cmp	r3, r2
 8004968:	d906      	bls.n	8004978 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e114      	b.n	8004b98 <HAL_RCC_OscConfig+0x7a0>
 800496e:	bf00      	nop
 8004970:	40021000 	.word	0x40021000
 8004974:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004978:	4b89      	ldr	r3, [pc, #548]	; (8004ba0 <HAL_RCC_OscConfig+0x7a8>)
 800497a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1e8      	bne.n	8004958 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004986:	7ffb      	ldrb	r3, [r7, #31]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d105      	bne.n	8004998 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800498c:	4b84      	ldr	r3, [pc, #528]	; (8004ba0 <HAL_RCC_OscConfig+0x7a8>)
 800498e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004990:	4a83      	ldr	r2, [pc, #524]	; (8004ba0 <HAL_RCC_OscConfig+0x7a8>)
 8004992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004996:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 80fa 	beq.w	8004b96 <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	f040 80d0 	bne.w	8004b4c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80049ac:	4b7c      	ldr	r3, [pc, #496]	; (8004ba0 <HAL_RCC_OscConfig+0x7a8>)
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f003 0203 	and.w	r2, r3, #3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049bc:	429a      	cmp	r2, r3
 80049be:	d130      	bne.n	8004a22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ca:	3b01      	subs	r3, #1
 80049cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d127      	bne.n	8004a22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049de:	429a      	cmp	r2, r3
 80049e0:	d11f      	bne.n	8004a22 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049ec:	2a07      	cmp	r2, #7
 80049ee:	bf14      	ite	ne
 80049f0:	2201      	movne	r2, #1
 80049f2:	2200      	moveq	r2, #0
 80049f4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d113      	bne.n	8004a22 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a04:	085b      	lsrs	r3, r3, #1
 8004a06:	3b01      	subs	r3, #1
 8004a08:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d109      	bne.n	8004a22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a18:	085b      	lsrs	r3, r3, #1
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d06e      	beq.n	8004b00 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	2b0c      	cmp	r3, #12
 8004a26:	d069      	beq.n	8004afc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004a28:	4b5d      	ldr	r3, [pc, #372]	; (8004ba0 <HAL_RCC_OscConfig+0x7a8>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d105      	bne.n	8004a40 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004a34:	4b5a      	ldr	r3, [pc, #360]	; (8004ba0 <HAL_RCC_OscConfig+0x7a8>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e0a9      	b.n	8004b98 <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004a44:	4b56      	ldr	r3, [pc, #344]	; (8004ba0 <HAL_RCC_OscConfig+0x7a8>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a55      	ldr	r2, [pc, #340]	; (8004ba0 <HAL_RCC_OscConfig+0x7a8>)
 8004a4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a4e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a50:	f7ff f8c8 	bl	8003be4 <HAL_GetTick>
 8004a54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a58:	f7ff f8c4 	bl	8003be4 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e096      	b.n	8004b98 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a6a:	4b4d      	ldr	r3, [pc, #308]	; (8004ba0 <HAL_RCC_OscConfig+0x7a8>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1f0      	bne.n	8004a58 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a76:	4b4a      	ldr	r3, [pc, #296]	; (8004ba0 <HAL_RCC_OscConfig+0x7a8>)
 8004a78:	68da      	ldr	r2, [r3, #12]
 8004a7a:	4b4a      	ldr	r3, [pc, #296]	; (8004ba4 <HAL_RCC_OscConfig+0x7ac>)
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a86:	3a01      	subs	r2, #1
 8004a88:	0112      	lsls	r2, r2, #4
 8004a8a:	4311      	orrs	r1, r2
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a90:	0212      	lsls	r2, r2, #8
 8004a92:	4311      	orrs	r1, r2
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a98:	0852      	lsrs	r2, r2, #1
 8004a9a:	3a01      	subs	r2, #1
 8004a9c:	0552      	lsls	r2, r2, #21
 8004a9e:	4311      	orrs	r1, r2
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004aa4:	0852      	lsrs	r2, r2, #1
 8004aa6:	3a01      	subs	r2, #1
 8004aa8:	0652      	lsls	r2, r2, #25
 8004aaa:	4311      	orrs	r1, r2
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ab0:	0912      	lsrs	r2, r2, #4
 8004ab2:	0452      	lsls	r2, r2, #17
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	493a      	ldr	r1, [pc, #232]	; (8004ba0 <HAL_RCC_OscConfig+0x7a8>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004abc:	4b38      	ldr	r3, [pc, #224]	; (8004ba0 <HAL_RCC_OscConfig+0x7a8>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a37      	ldr	r2, [pc, #220]	; (8004ba0 <HAL_RCC_OscConfig+0x7a8>)
 8004ac2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ac6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ac8:	4b35      	ldr	r3, [pc, #212]	; (8004ba0 <HAL_RCC_OscConfig+0x7a8>)
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	4a34      	ldr	r2, [pc, #208]	; (8004ba0 <HAL_RCC_OscConfig+0x7a8>)
 8004ace:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ad2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ad4:	f7ff f886 	bl	8003be4 <HAL_GetTick>
 8004ad8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ada:	e008      	b.n	8004aee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004adc:	f7ff f882 	bl	8003be4 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e054      	b.n	8004b98 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aee:	4b2c      	ldr	r3, [pc, #176]	; (8004ba0 <HAL_RCC_OscConfig+0x7a8>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d0f0      	beq.n	8004adc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004afa:	e04c      	b.n	8004b96 <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e04b      	b.n	8004b98 <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b00:	4b27      	ldr	r3, [pc, #156]	; (8004ba0 <HAL_RCC_OscConfig+0x7a8>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d144      	bne.n	8004b96 <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004b0c:	4b24      	ldr	r3, [pc, #144]	; (8004ba0 <HAL_RCC_OscConfig+0x7a8>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a23      	ldr	r2, [pc, #140]	; (8004ba0 <HAL_RCC_OscConfig+0x7a8>)
 8004b12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b16:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b18:	4b21      	ldr	r3, [pc, #132]	; (8004ba0 <HAL_RCC_OscConfig+0x7a8>)
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	4a20      	ldr	r2, [pc, #128]	; (8004ba0 <HAL_RCC_OscConfig+0x7a8>)
 8004b1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b24:	f7ff f85e 	bl	8003be4 <HAL_GetTick>
 8004b28:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b2a:	e008      	b.n	8004b3e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b2c:	f7ff f85a 	bl	8003be4 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e02c      	b.n	8004b98 <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b3e:	4b18      	ldr	r3, [pc, #96]	; (8004ba0 <HAL_RCC_OscConfig+0x7a8>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d0f0      	beq.n	8004b2c <HAL_RCC_OscConfig+0x734>
 8004b4a:	e024      	b.n	8004b96 <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	2b0c      	cmp	r3, #12
 8004b50:	d01f      	beq.n	8004b92 <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b52:	4b13      	ldr	r3, [pc, #76]	; (8004ba0 <HAL_RCC_OscConfig+0x7a8>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a12      	ldr	r2, [pc, #72]	; (8004ba0 <HAL_RCC_OscConfig+0x7a8>)
 8004b58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b5e:	f7ff f841 	bl	8003be4 <HAL_GetTick>
 8004b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b64:	e008      	b.n	8004b78 <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b66:	f7ff f83d 	bl	8003be4 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e00f      	b.n	8004b98 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b78:	4b09      	ldr	r3, [pc, #36]	; (8004ba0 <HAL_RCC_OscConfig+0x7a8>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1f0      	bne.n	8004b66 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004b84:	4b06      	ldr	r3, [pc, #24]	; (8004ba0 <HAL_RCC_OscConfig+0x7a8>)
 8004b86:	68da      	ldr	r2, [r3, #12]
 8004b88:	4905      	ldr	r1, [pc, #20]	; (8004ba0 <HAL_RCC_OscConfig+0x7a8>)
 8004b8a:	4b07      	ldr	r3, [pc, #28]	; (8004ba8 <HAL_RCC_OscConfig+0x7b0>)
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	60cb      	str	r3, [r1, #12]
 8004b90:	e001      	b.n	8004b96 <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e000      	b.n	8004b98 <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3720      	adds	r7, #32
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	40021000 	.word	0x40021000
 8004ba4:	f99d808c 	.word	0xf99d808c
 8004ba8:	feeefffc 	.word	0xfeeefffc

08004bac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e0e7      	b.n	8004d90 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bc0:	4b75      	ldr	r3, [pc, #468]	; (8004d98 <HAL_RCC_ClockConfig+0x1ec>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0307 	and.w	r3, r3, #7
 8004bc8:	683a      	ldr	r2, [r7, #0]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d910      	bls.n	8004bf0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bce:	4b72      	ldr	r3, [pc, #456]	; (8004d98 <HAL_RCC_ClockConfig+0x1ec>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f023 0207 	bic.w	r2, r3, #7
 8004bd6:	4970      	ldr	r1, [pc, #448]	; (8004d98 <HAL_RCC_ClockConfig+0x1ec>)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bde:	4b6e      	ldr	r3, [pc, #440]	; (8004d98 <HAL_RCC_ClockConfig+0x1ec>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0307 	and.w	r3, r3, #7
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d001      	beq.n	8004bf0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e0cf      	b.n	8004d90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d010      	beq.n	8004c1e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	4b66      	ldr	r3, [pc, #408]	; (8004d9c <HAL_RCC_ClockConfig+0x1f0>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d908      	bls.n	8004c1e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c0c:	4b63      	ldr	r3, [pc, #396]	; (8004d9c <HAL_RCC_ClockConfig+0x1f0>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	4960      	ldr	r1, [pc, #384]	; (8004d9c <HAL_RCC_ClockConfig+0x1f0>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d04c      	beq.n	8004cc4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	2b03      	cmp	r3, #3
 8004c30:	d107      	bne.n	8004c42 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c32:	4b5a      	ldr	r3, [pc, #360]	; (8004d9c <HAL_RCC_ClockConfig+0x1f0>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d121      	bne.n	8004c82 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e0a6      	b.n	8004d90 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d107      	bne.n	8004c5a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c4a:	4b54      	ldr	r3, [pc, #336]	; (8004d9c <HAL_RCC_ClockConfig+0x1f0>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d115      	bne.n	8004c82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e09a      	b.n	8004d90 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d107      	bne.n	8004c72 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c62:	4b4e      	ldr	r3, [pc, #312]	; (8004d9c <HAL_RCC_ClockConfig+0x1f0>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d109      	bne.n	8004c82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e08e      	b.n	8004d90 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c72:	4b4a      	ldr	r3, [pc, #296]	; (8004d9c <HAL_RCC_ClockConfig+0x1f0>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e086      	b.n	8004d90 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c82:	4b46      	ldr	r3, [pc, #280]	; (8004d9c <HAL_RCC_ClockConfig+0x1f0>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f023 0203 	bic.w	r2, r3, #3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	4943      	ldr	r1, [pc, #268]	; (8004d9c <HAL_RCC_ClockConfig+0x1f0>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c94:	f7fe ffa6 	bl	8003be4 <HAL_GetTick>
 8004c98:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c9a:	e00a      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c9c:	f7fe ffa2 	bl	8003be4 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e06e      	b.n	8004d90 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cb2:	4b3a      	ldr	r3, [pc, #232]	; (8004d9c <HAL_RCC_ClockConfig+0x1f0>)
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f003 020c 	and.w	r2, r3, #12
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d1eb      	bne.n	8004c9c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d010      	beq.n	8004cf2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689a      	ldr	r2, [r3, #8]
 8004cd4:	4b31      	ldr	r3, [pc, #196]	; (8004d9c <HAL_RCC_ClockConfig+0x1f0>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d208      	bcs.n	8004cf2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ce0:	4b2e      	ldr	r3, [pc, #184]	; (8004d9c <HAL_RCC_ClockConfig+0x1f0>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	492b      	ldr	r1, [pc, #172]	; (8004d9c <HAL_RCC_ClockConfig+0x1f0>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cf2:	4b29      	ldr	r3, [pc, #164]	; (8004d98 <HAL_RCC_ClockConfig+0x1ec>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0307 	and.w	r3, r3, #7
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d210      	bcs.n	8004d22 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d00:	4b25      	ldr	r3, [pc, #148]	; (8004d98 <HAL_RCC_ClockConfig+0x1ec>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f023 0207 	bic.w	r2, r3, #7
 8004d08:	4923      	ldr	r1, [pc, #140]	; (8004d98 <HAL_RCC_ClockConfig+0x1ec>)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d10:	4b21      	ldr	r3, [pc, #132]	; (8004d98 <HAL_RCC_ClockConfig+0x1ec>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0307 	and.w	r3, r3, #7
 8004d18:	683a      	ldr	r2, [r7, #0]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d001      	beq.n	8004d22 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e036      	b.n	8004d90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0304 	and.w	r3, r3, #4
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d008      	beq.n	8004d40 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d2e:	4b1b      	ldr	r3, [pc, #108]	; (8004d9c <HAL_RCC_ClockConfig+0x1f0>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	4918      	ldr	r1, [pc, #96]	; (8004d9c <HAL_RCC_ClockConfig+0x1f0>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0308 	and.w	r3, r3, #8
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d009      	beq.n	8004d60 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d4c:	4b13      	ldr	r3, [pc, #76]	; (8004d9c <HAL_RCC_ClockConfig+0x1f0>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	00db      	lsls	r3, r3, #3
 8004d5a:	4910      	ldr	r1, [pc, #64]	; (8004d9c <HAL_RCC_ClockConfig+0x1f0>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d60:	f000 f824 	bl	8004dac <HAL_RCC_GetSysClockFreq>
 8004d64:	4602      	mov	r2, r0
 8004d66:	4b0d      	ldr	r3, [pc, #52]	; (8004d9c <HAL_RCC_ClockConfig+0x1f0>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	091b      	lsrs	r3, r3, #4
 8004d6c:	f003 030f 	and.w	r3, r3, #15
 8004d70:	490b      	ldr	r1, [pc, #44]	; (8004da0 <HAL_RCC_ClockConfig+0x1f4>)
 8004d72:	5ccb      	ldrb	r3, [r1, r3]
 8004d74:	f003 031f 	and.w	r3, r3, #31
 8004d78:	fa22 f303 	lsr.w	r3, r2, r3
 8004d7c:	4a09      	ldr	r2, [pc, #36]	; (8004da4 <HAL_RCC_ClockConfig+0x1f8>)
 8004d7e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d80:	4b09      	ldr	r3, [pc, #36]	; (8004da8 <HAL_RCC_ClockConfig+0x1fc>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7fe fedd 	bl	8003b44 <HAL_InitTick>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d8e:	7afb      	ldrb	r3, [r7, #11]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3710      	adds	r7, #16
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	40022000 	.word	0x40022000
 8004d9c:	40021000 	.word	0x40021000
 8004da0:	0800ab3c 	.word	0x0800ab3c
 8004da4:	20000004 	.word	0x20000004
 8004da8:	2000002c 	.word	0x2000002c

08004dac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b089      	sub	sp, #36	; 0x24
 8004db0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004db2:	2300      	movs	r3, #0
 8004db4:	61fb      	str	r3, [r7, #28]
 8004db6:	2300      	movs	r3, #0
 8004db8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dba:	4b3e      	ldr	r3, [pc, #248]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f003 030c 	and.w	r3, r3, #12
 8004dc2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004dc4:	4b3b      	ldr	r3, [pc, #236]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	f003 0303 	and.w	r3, r3, #3
 8004dcc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d005      	beq.n	8004de0 <HAL_RCC_GetSysClockFreq+0x34>
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	2b0c      	cmp	r3, #12
 8004dd8:	d121      	bne.n	8004e1e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d11e      	bne.n	8004e1e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004de0:	4b34      	ldr	r3, [pc, #208]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0308 	and.w	r3, r3, #8
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d107      	bne.n	8004dfc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004dec:	4b31      	ldr	r3, [pc, #196]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004df2:	0a1b      	lsrs	r3, r3, #8
 8004df4:	f003 030f 	and.w	r3, r3, #15
 8004df8:	61fb      	str	r3, [r7, #28]
 8004dfa:	e005      	b.n	8004e08 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004dfc:	4b2d      	ldr	r3, [pc, #180]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	091b      	lsrs	r3, r3, #4
 8004e02:	f003 030f 	and.w	r3, r3, #15
 8004e06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004e08:	4a2b      	ldr	r2, [pc, #172]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e10:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10d      	bne.n	8004e34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e1c:	e00a      	b.n	8004e34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	2b04      	cmp	r3, #4
 8004e22:	d102      	bne.n	8004e2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e24:	4b25      	ldr	r3, [pc, #148]	; (8004ebc <HAL_RCC_GetSysClockFreq+0x110>)
 8004e26:	61bb      	str	r3, [r7, #24]
 8004e28:	e004      	b.n	8004e34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d101      	bne.n	8004e34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e30:	4b23      	ldr	r3, [pc, #140]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e32:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	2b0c      	cmp	r3, #12
 8004e38:	d134      	bne.n	8004ea4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e3a:	4b1e      	ldr	r3, [pc, #120]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	f003 0303 	and.w	r3, r3, #3
 8004e42:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d003      	beq.n	8004e52 <HAL_RCC_GetSysClockFreq+0xa6>
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	2b03      	cmp	r3, #3
 8004e4e:	d003      	beq.n	8004e58 <HAL_RCC_GetSysClockFreq+0xac>
 8004e50:	e005      	b.n	8004e5e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004e52:	4b1a      	ldr	r3, [pc, #104]	; (8004ebc <HAL_RCC_GetSysClockFreq+0x110>)
 8004e54:	617b      	str	r3, [r7, #20]
      break;
 8004e56:	e005      	b.n	8004e64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004e58:	4b19      	ldr	r3, [pc, #100]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e5a:	617b      	str	r3, [r7, #20]
      break;
 8004e5c:	e002      	b.n	8004e64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	617b      	str	r3, [r7, #20]
      break;
 8004e62:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e64:	4b13      	ldr	r3, [pc, #76]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	091b      	lsrs	r3, r3, #4
 8004e6a:	f003 0307 	and.w	r3, r3, #7
 8004e6e:	3301      	adds	r3, #1
 8004e70:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e72:	4b10      	ldr	r3, [pc, #64]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	0a1b      	lsrs	r3, r3, #8
 8004e78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	fb02 f203 	mul.w	r2, r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e88:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e8a:	4b0a      	ldr	r3, [pc, #40]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	0e5b      	lsrs	r3, r3, #25
 8004e90:	f003 0303 	and.w	r3, r3, #3
 8004e94:	3301      	adds	r3, #1
 8004e96:	005b      	lsls	r3, r3, #1
 8004e98:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004ea4:	69bb      	ldr	r3, [r7, #24]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3724      	adds	r7, #36	; 0x24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	40021000 	.word	0x40021000
 8004eb8:	0800ab54 	.word	0x0800ab54
 8004ebc:	00f42400 	.word	0x00f42400
 8004ec0:	007a1200 	.word	0x007a1200

08004ec4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ec8:	4b03      	ldr	r3, [pc, #12]	; (8004ed8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004eca:	681b      	ldr	r3, [r3, #0]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	20000004 	.word	0x20000004

08004edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ee0:	f7ff fff0 	bl	8004ec4 <HAL_RCC_GetHCLKFreq>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	4b06      	ldr	r3, [pc, #24]	; (8004f00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	0a1b      	lsrs	r3, r3, #8
 8004eec:	f003 0307 	and.w	r3, r3, #7
 8004ef0:	4904      	ldr	r1, [pc, #16]	; (8004f04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ef2:	5ccb      	ldrb	r3, [r1, r3]
 8004ef4:	f003 031f 	and.w	r3, r3, #31
 8004ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	40021000 	.word	0x40021000
 8004f04:	0800ab4c 	.word	0x0800ab4c

08004f08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004f0c:	f7ff ffda 	bl	8004ec4 <HAL_RCC_GetHCLKFreq>
 8004f10:	4602      	mov	r2, r0
 8004f12:	4b06      	ldr	r3, [pc, #24]	; (8004f2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	0adb      	lsrs	r3, r3, #11
 8004f18:	f003 0307 	and.w	r3, r3, #7
 8004f1c:	4904      	ldr	r1, [pc, #16]	; (8004f30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f1e:	5ccb      	ldrb	r3, [r1, r3]
 8004f20:	f003 031f 	and.w	r3, r3, #31
 8004f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	40021000 	.word	0x40021000
 8004f30:	0800ab4c 	.word	0x0800ab4c

08004f34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f40:	4b2a      	ldr	r3, [pc, #168]	; (8004fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d003      	beq.n	8004f54 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f4c:	f7ff f9f0 	bl	8004330 <HAL_PWREx_GetVoltageRange>
 8004f50:	6178      	str	r0, [r7, #20]
 8004f52:	e014      	b.n	8004f7e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f54:	4b25      	ldr	r3, [pc, #148]	; (8004fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f58:	4a24      	ldr	r2, [pc, #144]	; (8004fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f5e:	6593      	str	r3, [r2, #88]	; 0x58
 8004f60:	4b22      	ldr	r3, [pc, #136]	; (8004fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f68:	60fb      	str	r3, [r7, #12]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f6c:	f7ff f9e0 	bl	8004330 <HAL_PWREx_GetVoltageRange>
 8004f70:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f72:	4b1e      	ldr	r3, [pc, #120]	; (8004fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f76:	4a1d      	ldr	r2, [pc, #116]	; (8004fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f7c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f84:	d10b      	bne.n	8004f9e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b80      	cmp	r3, #128	; 0x80
 8004f8a:	d919      	bls.n	8004fc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2ba0      	cmp	r3, #160	; 0xa0
 8004f90:	d902      	bls.n	8004f98 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f92:	2302      	movs	r3, #2
 8004f94:	613b      	str	r3, [r7, #16]
 8004f96:	e013      	b.n	8004fc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f98:	2301      	movs	r3, #1
 8004f9a:	613b      	str	r3, [r7, #16]
 8004f9c:	e010      	b.n	8004fc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2b80      	cmp	r3, #128	; 0x80
 8004fa2:	d902      	bls.n	8004faa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	613b      	str	r3, [r7, #16]
 8004fa8:	e00a      	b.n	8004fc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b80      	cmp	r3, #128	; 0x80
 8004fae:	d102      	bne.n	8004fb6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004fb0:	2302      	movs	r3, #2
 8004fb2:	613b      	str	r3, [r7, #16]
 8004fb4:	e004      	b.n	8004fc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b70      	cmp	r3, #112	; 0x70
 8004fba:	d101      	bne.n	8004fc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004fc0:	4b0b      	ldr	r3, [pc, #44]	; (8004ff0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f023 0207 	bic.w	r2, r3, #7
 8004fc8:	4909      	ldr	r1, [pc, #36]	; (8004ff0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004fd0:	4b07      	ldr	r3, [pc, #28]	; (8004ff0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0307 	and.w	r3, r3, #7
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d001      	beq.n	8004fe2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e000      	b.n	8004fe4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3718      	adds	r7, #24
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	40021000 	.word	0x40021000
 8004ff0:	40022000 	.word	0x40022000

08004ff4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005000:	2300      	movs	r3, #0
 8005002:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800500c:	2b00      	cmp	r3, #0
 800500e:	d041      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005014:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005018:	d02a      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800501a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800501e:	d824      	bhi.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005020:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005024:	d008      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005026:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800502a:	d81e      	bhi.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00a      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005030:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005034:	d010      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005036:	e018      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005038:	4b86      	ldr	r3, [pc, #536]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	4a85      	ldr	r2, [pc, #532]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800503e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005042:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005044:	e015      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	3304      	adds	r3, #4
 800504a:	2100      	movs	r1, #0
 800504c:	4618      	mov	r0, r3
 800504e:	f000 fabb 	bl	80055c8 <RCCEx_PLLSAI1_Config>
 8005052:	4603      	mov	r3, r0
 8005054:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005056:	e00c      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	3320      	adds	r3, #32
 800505c:	2100      	movs	r1, #0
 800505e:	4618      	mov	r0, r3
 8005060:	f000 fba6 	bl	80057b0 <RCCEx_PLLSAI2_Config>
 8005064:	4603      	mov	r3, r0
 8005066:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005068:	e003      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	74fb      	strb	r3, [r7, #19]
      break;
 800506e:	e000      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005070:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005072:	7cfb      	ldrb	r3, [r7, #19]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10b      	bne.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005078:	4b76      	ldr	r3, [pc, #472]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800507a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800507e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005086:	4973      	ldr	r1, [pc, #460]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005088:	4313      	orrs	r3, r2
 800508a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800508e:	e001      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005090:	7cfb      	ldrb	r3, [r7, #19]
 8005092:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d041      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80050a8:	d02a      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80050aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80050ae:	d824      	bhi.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80050b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050b4:	d008      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80050b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050ba:	d81e      	bhi.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00a      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80050c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050c4:	d010      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80050c6:	e018      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80050c8:	4b62      	ldr	r3, [pc, #392]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	4a61      	ldr	r2, [pc, #388]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050d2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050d4:	e015      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	3304      	adds	r3, #4
 80050da:	2100      	movs	r1, #0
 80050dc:	4618      	mov	r0, r3
 80050de:	f000 fa73 	bl	80055c8 <RCCEx_PLLSAI1_Config>
 80050e2:	4603      	mov	r3, r0
 80050e4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050e6:	e00c      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	3320      	adds	r3, #32
 80050ec:	2100      	movs	r1, #0
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 fb5e 	bl	80057b0 <RCCEx_PLLSAI2_Config>
 80050f4:	4603      	mov	r3, r0
 80050f6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050f8:	e003      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	74fb      	strb	r3, [r7, #19]
      break;
 80050fe:	e000      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005100:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005102:	7cfb      	ldrb	r3, [r7, #19]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10b      	bne.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005108:	4b52      	ldr	r3, [pc, #328]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800510a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005116:	494f      	ldr	r1, [pc, #316]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005118:	4313      	orrs	r3, r2
 800511a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800511e:	e001      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005120:	7cfb      	ldrb	r3, [r7, #19]
 8005122:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 80a0 	beq.w	8005272 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005132:	2300      	movs	r3, #0
 8005134:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005136:	4b47      	ldr	r3, [pc, #284]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800513a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005142:	2301      	movs	r3, #1
 8005144:	e000      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005146:	2300      	movs	r3, #0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00d      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800514c:	4b41      	ldr	r3, [pc, #260]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800514e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005150:	4a40      	ldr	r2, [pc, #256]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005156:	6593      	str	r3, [r2, #88]	; 0x58
 8005158:	4b3e      	ldr	r3, [pc, #248]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800515a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800515c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005160:	60bb      	str	r3, [r7, #8]
 8005162:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005164:	2301      	movs	r3, #1
 8005166:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005168:	4b3b      	ldr	r3, [pc, #236]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a3a      	ldr	r2, [pc, #232]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800516e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005172:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005174:	f7fe fd36 	bl	8003be4 <HAL_GetTick>
 8005178:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800517a:	e009      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800517c:	f7fe fd32 	bl	8003be4 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b02      	cmp	r3, #2
 8005188:	d902      	bls.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	74fb      	strb	r3, [r7, #19]
        break;
 800518e:	e005      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005190:	4b31      	ldr	r3, [pc, #196]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005198:	2b00      	cmp	r3, #0
 800519a:	d0ef      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800519c:	7cfb      	ldrb	r3, [r7, #19]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d15c      	bne.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80051a2:	4b2c      	ldr	r3, [pc, #176]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d01f      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d019      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80051c0:	4b24      	ldr	r3, [pc, #144]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051cc:	4b21      	ldr	r3, [pc, #132]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051d2:	4a20      	ldr	r2, [pc, #128]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051dc:	4b1d      	ldr	r3, [pc, #116]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e2:	4a1c      	ldr	r2, [pc, #112]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80051ec:	4a19      	ldr	r2, [pc, #100]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d016      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051fe:	f7fe fcf1 	bl	8003be4 <HAL_GetTick>
 8005202:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005204:	e00b      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005206:	f7fe fced 	bl	8003be4 <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	f241 3288 	movw	r2, #5000	; 0x1388
 8005214:	4293      	cmp	r3, r2
 8005216:	d902      	bls.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	74fb      	strb	r3, [r7, #19]
            break;
 800521c:	e006      	b.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800521e:	4b0d      	ldr	r3, [pc, #52]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	2b00      	cmp	r3, #0
 800522a:	d0ec      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800522c:	7cfb      	ldrb	r3, [r7, #19]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10c      	bne.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005232:	4b08      	ldr	r3, [pc, #32]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005238:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005242:	4904      	ldr	r1, [pc, #16]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005244:	4313      	orrs	r3, r2
 8005246:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800524a:	e009      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800524c:	7cfb      	ldrb	r3, [r7, #19]
 800524e:	74bb      	strb	r3, [r7, #18]
 8005250:	e006      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005252:	bf00      	nop
 8005254:	40021000 	.word	0x40021000
 8005258:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800525c:	7cfb      	ldrb	r3, [r7, #19]
 800525e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005260:	7c7b      	ldrb	r3, [r7, #17]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d105      	bne.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005266:	4b9e      	ldr	r3, [pc, #632]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800526a:	4a9d      	ldr	r2, [pc, #628]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800526c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005270:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00a      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800527e:	4b98      	ldr	r3, [pc, #608]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005284:	f023 0203 	bic.w	r2, r3, #3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528c:	4994      	ldr	r1, [pc, #592]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800528e:	4313      	orrs	r3, r2
 8005290:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0302 	and.w	r3, r3, #2
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00a      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052a0:	4b8f      	ldr	r3, [pc, #572]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a6:	f023 020c 	bic.w	r2, r3, #12
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ae:	498c      	ldr	r1, [pc, #560]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0304 	and.w	r3, r3, #4
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00a      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80052c2:	4b87      	ldr	r3, [pc, #540]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d0:	4983      	ldr	r1, [pc, #524]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0308 	and.w	r3, r3, #8
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00a      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80052e4:	4b7e      	ldr	r3, [pc, #504]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f2:	497b      	ldr	r1, [pc, #492]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0310 	and.w	r3, r3, #16
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00a      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005306:	4b76      	ldr	r3, [pc, #472]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800530c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005314:	4972      	ldr	r1, [pc, #456]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005316:	4313      	orrs	r3, r2
 8005318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0320 	and.w	r3, r3, #32
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00a      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005328:	4b6d      	ldr	r3, [pc, #436]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800532a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800532e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005336:	496a      	ldr	r1, [pc, #424]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005338:	4313      	orrs	r3, r2
 800533a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00a      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800534a:	4b65      	ldr	r3, [pc, #404]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800534c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005350:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005358:	4961      	ldr	r1, [pc, #388]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800535a:	4313      	orrs	r3, r2
 800535c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00a      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800536c:	4b5c      	ldr	r3, [pc, #368]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800536e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005372:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800537a:	4959      	ldr	r1, [pc, #356]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800537c:	4313      	orrs	r3, r2
 800537e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00a      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800538e:	4b54      	ldr	r3, [pc, #336]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005394:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800539c:	4950      	ldr	r1, [pc, #320]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00a      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80053b0:	4b4b      	ldr	r3, [pc, #300]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053be:	4948      	ldr	r1, [pc, #288]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00a      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80053d2:	4b43      	ldr	r3, [pc, #268]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e0:	493f      	ldr	r1, [pc, #252]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d028      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053f4:	4b3a      	ldr	r3, [pc, #232]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005402:	4937      	ldr	r1, [pc, #220]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005404:	4313      	orrs	r3, r2
 8005406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800540e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005412:	d106      	bne.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005414:	4b32      	ldr	r3, [pc, #200]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	4a31      	ldr	r2, [pc, #196]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800541a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800541e:	60d3      	str	r3, [r2, #12]
 8005420:	e011      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005426:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800542a:	d10c      	bne.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	3304      	adds	r3, #4
 8005430:	2101      	movs	r1, #1
 8005432:	4618      	mov	r0, r3
 8005434:	f000 f8c8 	bl	80055c8 <RCCEx_PLLSAI1_Config>
 8005438:	4603      	mov	r3, r0
 800543a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800543c:	7cfb      	ldrb	r3, [r7, #19]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d001      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005442:	7cfb      	ldrb	r3, [r7, #19]
 8005444:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d028      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005452:	4b23      	ldr	r3, [pc, #140]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005458:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005460:	491f      	ldr	r1, [pc, #124]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005462:	4313      	orrs	r3, r2
 8005464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800546c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005470:	d106      	bne.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005472:	4b1b      	ldr	r3, [pc, #108]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	4a1a      	ldr	r2, [pc, #104]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005478:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800547c:	60d3      	str	r3, [r2, #12]
 800547e:	e011      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005484:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005488:	d10c      	bne.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	3304      	adds	r3, #4
 800548e:	2101      	movs	r1, #1
 8005490:	4618      	mov	r0, r3
 8005492:	f000 f899 	bl	80055c8 <RCCEx_PLLSAI1_Config>
 8005496:	4603      	mov	r3, r0
 8005498:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800549a:	7cfb      	ldrb	r3, [r7, #19]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d001      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80054a0:	7cfb      	ldrb	r3, [r7, #19]
 80054a2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d02b      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054b0:	4b0b      	ldr	r3, [pc, #44]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054be:	4908      	ldr	r1, [pc, #32]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054ce:	d109      	bne.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054d0:	4b03      	ldr	r3, [pc, #12]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	4a02      	ldr	r2, [pc, #8]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054da:	60d3      	str	r3, [r2, #12]
 80054dc:	e014      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80054de:	bf00      	nop
 80054e0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054ec:	d10c      	bne.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	3304      	adds	r3, #4
 80054f2:	2101      	movs	r1, #1
 80054f4:	4618      	mov	r0, r3
 80054f6:	f000 f867 	bl	80055c8 <RCCEx_PLLSAI1_Config>
 80054fa:	4603      	mov	r3, r0
 80054fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054fe:	7cfb      	ldrb	r3, [r7, #19]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d001      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005504:	7cfb      	ldrb	r3, [r7, #19]
 8005506:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d02f      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005514:	4b2b      	ldr	r3, [pc, #172]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800551a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005522:	4928      	ldr	r1, [pc, #160]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005524:	4313      	orrs	r3, r2
 8005526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800552e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005532:	d10d      	bne.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	3304      	adds	r3, #4
 8005538:	2102      	movs	r1, #2
 800553a:	4618      	mov	r0, r3
 800553c:	f000 f844 	bl	80055c8 <RCCEx_PLLSAI1_Config>
 8005540:	4603      	mov	r3, r0
 8005542:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005544:	7cfb      	ldrb	r3, [r7, #19]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d014      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800554a:	7cfb      	ldrb	r3, [r7, #19]
 800554c:	74bb      	strb	r3, [r7, #18]
 800554e:	e011      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005554:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005558:	d10c      	bne.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	3320      	adds	r3, #32
 800555e:	2102      	movs	r1, #2
 8005560:	4618      	mov	r0, r3
 8005562:	f000 f925 	bl	80057b0 <RCCEx_PLLSAI2_Config>
 8005566:	4603      	mov	r3, r0
 8005568:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800556a:	7cfb      	ldrb	r3, [r7, #19]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d001      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005570:	7cfb      	ldrb	r3, [r7, #19]
 8005572:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00a      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005580:	4b10      	ldr	r3, [pc, #64]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005586:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800558e:	490d      	ldr	r1, [pc, #52]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005590:	4313      	orrs	r3, r2
 8005592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00b      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80055a2:	4b08      	ldr	r3, [pc, #32]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055b2:	4904      	ldr	r1, [pc, #16]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80055ba:	7cbb      	ldrb	r3, [r7, #18]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3718      	adds	r7, #24
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	40021000 	.word	0x40021000

080055c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055d2:	2300      	movs	r3, #0
 80055d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80055d6:	4b75      	ldr	r3, [pc, #468]	; (80057ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	f003 0303 	and.w	r3, r3, #3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d018      	beq.n	8005614 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80055e2:	4b72      	ldr	r3, [pc, #456]	; (80057ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	f003 0203 	and.w	r2, r3, #3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d10d      	bne.n	800560e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
       ||
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d009      	beq.n	800560e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80055fa:	4b6c      	ldr	r3, [pc, #432]	; (80057ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	091b      	lsrs	r3, r3, #4
 8005600:	f003 0307 	and.w	r3, r3, #7
 8005604:	1c5a      	adds	r2, r3, #1
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
       ||
 800560a:	429a      	cmp	r2, r3
 800560c:	d047      	beq.n	800569e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	73fb      	strb	r3, [r7, #15]
 8005612:	e044      	b.n	800569e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2b03      	cmp	r3, #3
 800561a:	d018      	beq.n	800564e <RCCEx_PLLSAI1_Config+0x86>
 800561c:	2b03      	cmp	r3, #3
 800561e:	d825      	bhi.n	800566c <RCCEx_PLLSAI1_Config+0xa4>
 8005620:	2b01      	cmp	r3, #1
 8005622:	d002      	beq.n	800562a <RCCEx_PLLSAI1_Config+0x62>
 8005624:	2b02      	cmp	r3, #2
 8005626:	d009      	beq.n	800563c <RCCEx_PLLSAI1_Config+0x74>
 8005628:	e020      	b.n	800566c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800562a:	4b60      	ldr	r3, [pc, #384]	; (80057ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0302 	and.w	r3, r3, #2
 8005632:	2b00      	cmp	r3, #0
 8005634:	d11d      	bne.n	8005672 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800563a:	e01a      	b.n	8005672 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800563c:	4b5b      	ldr	r3, [pc, #364]	; (80057ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005644:	2b00      	cmp	r3, #0
 8005646:	d116      	bne.n	8005676 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800564c:	e013      	b.n	8005676 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800564e:	4b57      	ldr	r3, [pc, #348]	; (80057ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10f      	bne.n	800567a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800565a:	4b54      	ldr	r3, [pc, #336]	; (80057ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d109      	bne.n	800567a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800566a:	e006      	b.n	800567a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	73fb      	strb	r3, [r7, #15]
      break;
 8005670:	e004      	b.n	800567c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005672:	bf00      	nop
 8005674:	e002      	b.n	800567c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005676:	bf00      	nop
 8005678:	e000      	b.n	800567c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800567a:	bf00      	nop
    }

    if(status == HAL_OK)
 800567c:	7bfb      	ldrb	r3, [r7, #15]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10d      	bne.n	800569e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005682:	4b4a      	ldr	r3, [pc, #296]	; (80057ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6819      	ldr	r1, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	3b01      	subs	r3, #1
 8005694:	011b      	lsls	r3, r3, #4
 8005696:	430b      	orrs	r3, r1
 8005698:	4944      	ldr	r1, [pc, #272]	; (80057ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800569a:	4313      	orrs	r3, r2
 800569c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800569e:	7bfb      	ldrb	r3, [r7, #15]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d17d      	bne.n	80057a0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80056a4:	4b41      	ldr	r3, [pc, #260]	; (80057ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a40      	ldr	r2, [pc, #256]	; (80057ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80056aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80056ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056b0:	f7fe fa98 	bl	8003be4 <HAL_GetTick>
 80056b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056b6:	e009      	b.n	80056cc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056b8:	f7fe fa94 	bl	8003be4 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d902      	bls.n	80056cc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	73fb      	strb	r3, [r7, #15]
        break;
 80056ca:	e005      	b.n	80056d8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056cc:	4b37      	ldr	r3, [pc, #220]	; (80057ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1ef      	bne.n	80056b8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80056d8:	7bfb      	ldrb	r3, [r7, #15]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d160      	bne.n	80057a0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d111      	bne.n	8005708 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056e4:	4b31      	ldr	r3, [pc, #196]	; (80057ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80056ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	6892      	ldr	r2, [r2, #8]
 80056f4:	0211      	lsls	r1, r2, #8
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	68d2      	ldr	r2, [r2, #12]
 80056fa:	0912      	lsrs	r2, r2, #4
 80056fc:	0452      	lsls	r2, r2, #17
 80056fe:	430a      	orrs	r2, r1
 8005700:	492a      	ldr	r1, [pc, #168]	; (80057ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005702:	4313      	orrs	r3, r2
 8005704:	610b      	str	r3, [r1, #16]
 8005706:	e027      	b.n	8005758 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d112      	bne.n	8005734 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800570e:	4b27      	ldr	r3, [pc, #156]	; (80057ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005716:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	6892      	ldr	r2, [r2, #8]
 800571e:	0211      	lsls	r1, r2, #8
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	6912      	ldr	r2, [r2, #16]
 8005724:	0852      	lsrs	r2, r2, #1
 8005726:	3a01      	subs	r2, #1
 8005728:	0552      	lsls	r2, r2, #21
 800572a:	430a      	orrs	r2, r1
 800572c:	491f      	ldr	r1, [pc, #124]	; (80057ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800572e:	4313      	orrs	r3, r2
 8005730:	610b      	str	r3, [r1, #16]
 8005732:	e011      	b.n	8005758 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005734:	4b1d      	ldr	r3, [pc, #116]	; (80057ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800573c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	6892      	ldr	r2, [r2, #8]
 8005744:	0211      	lsls	r1, r2, #8
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	6952      	ldr	r2, [r2, #20]
 800574a:	0852      	lsrs	r2, r2, #1
 800574c:	3a01      	subs	r2, #1
 800574e:	0652      	lsls	r2, r2, #25
 8005750:	430a      	orrs	r2, r1
 8005752:	4916      	ldr	r1, [pc, #88]	; (80057ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005754:	4313      	orrs	r3, r2
 8005756:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005758:	4b14      	ldr	r3, [pc, #80]	; (80057ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a13      	ldr	r2, [pc, #76]	; (80057ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800575e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005762:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005764:	f7fe fa3e 	bl	8003be4 <HAL_GetTick>
 8005768:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800576a:	e009      	b.n	8005780 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800576c:	f7fe fa3a 	bl	8003be4 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	2b02      	cmp	r3, #2
 8005778:	d902      	bls.n	8005780 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	73fb      	strb	r3, [r7, #15]
          break;
 800577e:	e005      	b.n	800578c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005780:	4b0a      	ldr	r3, [pc, #40]	; (80057ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d0ef      	beq.n	800576c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800578c:	7bfb      	ldrb	r3, [r7, #15]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d106      	bne.n	80057a0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005792:	4b06      	ldr	r3, [pc, #24]	; (80057ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005794:	691a      	ldr	r2, [r3, #16]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	4904      	ldr	r1, [pc, #16]	; (80057ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800579c:	4313      	orrs	r3, r2
 800579e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80057a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	40021000 	.word	0x40021000

080057b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057ba:	2300      	movs	r3, #0
 80057bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80057be:	4b6a      	ldr	r3, [pc, #424]	; (8005968 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	f003 0303 	and.w	r3, r3, #3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d018      	beq.n	80057fc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80057ca:	4b67      	ldr	r3, [pc, #412]	; (8005968 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	f003 0203 	and.w	r2, r3, #3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d10d      	bne.n	80057f6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
       ||
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d009      	beq.n	80057f6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80057e2:	4b61      	ldr	r3, [pc, #388]	; (8005968 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	091b      	lsrs	r3, r3, #4
 80057e8:	f003 0307 	and.w	r3, r3, #7
 80057ec:	1c5a      	adds	r2, r3, #1
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
       ||
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d047      	beq.n	8005886 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	73fb      	strb	r3, [r7, #15]
 80057fa:	e044      	b.n	8005886 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2b03      	cmp	r3, #3
 8005802:	d018      	beq.n	8005836 <RCCEx_PLLSAI2_Config+0x86>
 8005804:	2b03      	cmp	r3, #3
 8005806:	d825      	bhi.n	8005854 <RCCEx_PLLSAI2_Config+0xa4>
 8005808:	2b01      	cmp	r3, #1
 800580a:	d002      	beq.n	8005812 <RCCEx_PLLSAI2_Config+0x62>
 800580c:	2b02      	cmp	r3, #2
 800580e:	d009      	beq.n	8005824 <RCCEx_PLLSAI2_Config+0x74>
 8005810:	e020      	b.n	8005854 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005812:	4b55      	ldr	r3, [pc, #340]	; (8005968 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0302 	and.w	r3, r3, #2
 800581a:	2b00      	cmp	r3, #0
 800581c:	d11d      	bne.n	800585a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005822:	e01a      	b.n	800585a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005824:	4b50      	ldr	r3, [pc, #320]	; (8005968 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800582c:	2b00      	cmp	r3, #0
 800582e:	d116      	bne.n	800585e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005834:	e013      	b.n	800585e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005836:	4b4c      	ldr	r3, [pc, #304]	; (8005968 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d10f      	bne.n	8005862 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005842:	4b49      	ldr	r3, [pc, #292]	; (8005968 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d109      	bne.n	8005862 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005852:	e006      	b.n	8005862 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	73fb      	strb	r3, [r7, #15]
      break;
 8005858:	e004      	b.n	8005864 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800585a:	bf00      	nop
 800585c:	e002      	b.n	8005864 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800585e:	bf00      	nop
 8005860:	e000      	b.n	8005864 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005862:	bf00      	nop
    }

    if(status == HAL_OK)
 8005864:	7bfb      	ldrb	r3, [r7, #15]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10d      	bne.n	8005886 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800586a:	4b3f      	ldr	r3, [pc, #252]	; (8005968 <RCCEx_PLLSAI2_Config+0x1b8>)
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6819      	ldr	r1, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	3b01      	subs	r3, #1
 800587c:	011b      	lsls	r3, r3, #4
 800587e:	430b      	orrs	r3, r1
 8005880:	4939      	ldr	r1, [pc, #228]	; (8005968 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005882:	4313      	orrs	r3, r2
 8005884:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005886:	7bfb      	ldrb	r3, [r7, #15]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d167      	bne.n	800595c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800588c:	4b36      	ldr	r3, [pc, #216]	; (8005968 <RCCEx_PLLSAI2_Config+0x1b8>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a35      	ldr	r2, [pc, #212]	; (8005968 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005892:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005896:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005898:	f7fe f9a4 	bl	8003be4 <HAL_GetTick>
 800589c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800589e:	e009      	b.n	80058b4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80058a0:	f7fe f9a0 	bl	8003be4 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d902      	bls.n	80058b4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	73fb      	strb	r3, [r7, #15]
        break;
 80058b2:	e005      	b.n	80058c0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80058b4:	4b2c      	ldr	r3, [pc, #176]	; (8005968 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1ef      	bne.n	80058a0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80058c0:	7bfb      	ldrb	r3, [r7, #15]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d14a      	bne.n	800595c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d111      	bne.n	80058f0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80058cc:	4b26      	ldr	r3, [pc, #152]	; (8005968 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058ce:	695b      	ldr	r3, [r3, #20]
 80058d0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80058d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	6892      	ldr	r2, [r2, #8]
 80058dc:	0211      	lsls	r1, r2, #8
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	68d2      	ldr	r2, [r2, #12]
 80058e2:	0912      	lsrs	r2, r2, #4
 80058e4:	0452      	lsls	r2, r2, #17
 80058e6:	430a      	orrs	r2, r1
 80058e8:	491f      	ldr	r1, [pc, #124]	; (8005968 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	614b      	str	r3, [r1, #20]
 80058ee:	e011      	b.n	8005914 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80058f0:	4b1d      	ldr	r3, [pc, #116]	; (8005968 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80058f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	6892      	ldr	r2, [r2, #8]
 8005900:	0211      	lsls	r1, r2, #8
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	6912      	ldr	r2, [r2, #16]
 8005906:	0852      	lsrs	r2, r2, #1
 8005908:	3a01      	subs	r2, #1
 800590a:	0652      	lsls	r2, r2, #25
 800590c:	430a      	orrs	r2, r1
 800590e:	4916      	ldr	r1, [pc, #88]	; (8005968 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005910:	4313      	orrs	r3, r2
 8005912:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005914:	4b14      	ldr	r3, [pc, #80]	; (8005968 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a13      	ldr	r2, [pc, #76]	; (8005968 <RCCEx_PLLSAI2_Config+0x1b8>)
 800591a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800591e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005920:	f7fe f960 	bl	8003be4 <HAL_GetTick>
 8005924:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005926:	e009      	b.n	800593c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005928:	f7fe f95c 	bl	8003be4 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	2b02      	cmp	r3, #2
 8005934:	d902      	bls.n	800593c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	73fb      	strb	r3, [r7, #15]
          break;
 800593a:	e005      	b.n	8005948 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800593c:	4b0a      	ldr	r3, [pc, #40]	; (8005968 <RCCEx_PLLSAI2_Config+0x1b8>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d0ef      	beq.n	8005928 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005948:	7bfb      	ldrb	r3, [r7, #15]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d106      	bne.n	800595c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800594e:	4b06      	ldr	r3, [pc, #24]	; (8005968 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005950:	695a      	ldr	r2, [r3, #20]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	4904      	ldr	r1, [pc, #16]	; (8005968 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005958:	4313      	orrs	r3, r2
 800595a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800595c:	7bfb      	ldrb	r3, [r7, #15]
}
 800595e:	4618      	mov	r0, r3
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	40021000 	.word	0x40021000

0800596c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d101      	bne.n	800597e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e095      	b.n	8005aaa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005982:	2b00      	cmp	r3, #0
 8005984:	d108      	bne.n	8005998 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800598e:	d009      	beq.n	80059a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	61da      	str	r2, [r3, #28]
 8005996:	e005      	b.n	80059a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d106      	bne.n	80059c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f7fd fab4 	bl	8002f2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2202      	movs	r2, #2
 80059c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059e4:	d902      	bls.n	80059ec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80059e6:	2300      	movs	r3, #0
 80059e8:	60fb      	str	r3, [r7, #12]
 80059ea:	e002      	b.n	80059f2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80059ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059f0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80059fa:	d007      	beq.n	8005a0c <HAL_SPI_Init+0xa0>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a04:	d002      	beq.n	8005a0c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005a1c:	431a      	orrs	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	f003 0302 	and.w	r3, r3, #2
 8005a26:	431a      	orrs	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	695b      	ldr	r3, [r3, #20]
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	431a      	orrs	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a3a:	431a      	orrs	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	69db      	ldr	r3, [r3, #28]
 8005a40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a44:	431a      	orrs	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a4e:	ea42 0103 	orr.w	r1, r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a56:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	0c1b      	lsrs	r3, r3, #16
 8005a68:	f003 0204 	and.w	r2, r3, #4
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a70:	f003 0310 	and.w	r3, r3, #16
 8005a74:	431a      	orrs	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a7a:	f003 0308 	and.w	r3, r3, #8
 8005a7e:	431a      	orrs	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005a88:	ea42 0103 	orr.w	r1, r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	430a      	orrs	r2, r1
 8005a98:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b088      	sub	sp, #32
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	60f8      	str	r0, [r7, #12]
 8005aba:	60b9      	str	r1, [r7, #8]
 8005abc:	603b      	str	r3, [r7, #0]
 8005abe:	4613      	mov	r3, r2
 8005ac0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d101      	bne.n	8005ad4 <HAL_SPI_Transmit+0x22>
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	e158      	b.n	8005d86 <HAL_SPI_Transmit+0x2d4>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005adc:	f7fe f882 	bl	8003be4 <HAL_GetTick>
 8005ae0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005ae2:	88fb      	ldrh	r3, [r7, #6]
 8005ae4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d002      	beq.n	8005af8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005af2:	2302      	movs	r3, #2
 8005af4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005af6:	e13d      	b.n	8005d74 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d002      	beq.n	8005b04 <HAL_SPI_Transmit+0x52>
 8005afe:	88fb      	ldrh	r3, [r7, #6]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d102      	bne.n	8005b0a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b08:	e134      	b.n	8005d74 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2203      	movs	r2, #3
 8005b0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	88fa      	ldrh	r2, [r7, #6]
 8005b22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	88fa      	ldrh	r2, [r7, #6]
 8005b28:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b54:	d10f      	bne.n	8005b76 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b74:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b80:	2b40      	cmp	r3, #64	; 0x40
 8005b82:	d007      	beq.n	8005b94 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b9c:	d94b      	bls.n	8005c36 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d002      	beq.n	8005bac <HAL_SPI_Transmit+0xfa>
 8005ba6:	8afb      	ldrh	r3, [r7, #22]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d13e      	bne.n	8005c2a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb0:	881a      	ldrh	r2, [r3, #0]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bbc:	1c9a      	adds	r2, r3, #2
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005bd0:	e02b      	b.n	8005c2a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f003 0302 	and.w	r3, r3, #2
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d112      	bne.n	8005c06 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be4:	881a      	ldrh	r2, [r3, #0]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf0:	1c9a      	adds	r2, r3, #2
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c04:	e011      	b.n	8005c2a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c06:	f7fd ffed 	bl	8003be4 <HAL_GetTick>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	683a      	ldr	r2, [r7, #0]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d803      	bhi.n	8005c1e <HAL_SPI_Transmit+0x16c>
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c1c:	d102      	bne.n	8005c24 <HAL_SPI_Transmit+0x172>
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d102      	bne.n	8005c2a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005c28:	e0a4      	b.n	8005d74 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d1ce      	bne.n	8005bd2 <HAL_SPI_Transmit+0x120>
 8005c34:	e07c      	b.n	8005d30 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d002      	beq.n	8005c44 <HAL_SPI_Transmit+0x192>
 8005c3e:	8afb      	ldrh	r3, [r7, #22]
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d170      	bne.n	8005d26 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d912      	bls.n	8005c74 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c52:	881a      	ldrh	r2, [r3, #0]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5e:	1c9a      	adds	r2, r3, #2
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	3b02      	subs	r3, #2
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c72:	e058      	b.n	8005d26 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	330c      	adds	r3, #12
 8005c7e:	7812      	ldrb	r2, [r2, #0]
 8005c80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c86:	1c5a      	adds	r2, r3, #1
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	3b01      	subs	r3, #1
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005c9a:	e044      	b.n	8005d26 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d12b      	bne.n	8005d02 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d912      	bls.n	8005cda <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb8:	881a      	ldrh	r2, [r3, #0]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc4:	1c9a      	adds	r2, r3, #2
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	3b02      	subs	r3, #2
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005cd8:	e025      	b.n	8005d26 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	330c      	adds	r3, #12
 8005ce4:	7812      	ldrb	r2, [r2, #0]
 8005ce6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cec:	1c5a      	adds	r2, r3, #1
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d00:	e011      	b.n	8005d26 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d02:	f7fd ff6f 	bl	8003be4 <HAL_GetTick>
 8005d06:	4602      	mov	r2, r0
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d803      	bhi.n	8005d1a <HAL_SPI_Transmit+0x268>
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d18:	d102      	bne.n	8005d20 <HAL_SPI_Transmit+0x26e>
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d102      	bne.n	8005d26 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005d24:	e026      	b.n	8005d74 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1b5      	bne.n	8005c9c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	6839      	ldr	r1, [r7, #0]
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f000 fce3 	bl	8006700 <SPI_EndRxTxTransaction>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d002      	beq.n	8005d46 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2220      	movs	r2, #32
 8005d44:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10a      	bne.n	8005d64 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d4e:	2300      	movs	r3, #0
 8005d50:	613b      	str	r3, [r7, #16]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	613b      	str	r3, [r7, #16]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	613b      	str	r3, [r7, #16]
 8005d62:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d002      	beq.n	8005d72 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	77fb      	strb	r3, [r7, #31]
 8005d70:	e000      	b.n	8005d74 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005d72:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005d84:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3720      	adds	r7, #32
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b088      	sub	sp, #32
 8005d92:	af02      	add	r7, sp, #8
 8005d94:	60f8      	str	r0, [r7, #12]
 8005d96:	60b9      	str	r1, [r7, #8]
 8005d98:	603b      	str	r3, [r7, #0]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005daa:	d112      	bne.n	8005dd2 <HAL_SPI_Receive+0x44>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d10e      	bne.n	8005dd2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2204      	movs	r2, #4
 8005db8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005dbc:	88fa      	ldrh	r2, [r7, #6]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	9300      	str	r3, [sp, #0]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	68ba      	ldr	r2, [r7, #8]
 8005dc6:	68b9      	ldr	r1, [r7, #8]
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f000 f910 	bl	8005fee <HAL_SPI_TransmitReceive>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	e109      	b.n	8005fe6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d101      	bne.n	8005de0 <HAL_SPI_Receive+0x52>
 8005ddc:	2302      	movs	r3, #2
 8005dde:	e102      	b.n	8005fe6 <HAL_SPI_Receive+0x258>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005de8:	f7fd fefc 	bl	8003be4 <HAL_GetTick>
 8005dec:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d002      	beq.n	8005e00 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005dfe:	e0e9      	b.n	8005fd4 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d002      	beq.n	8005e0c <HAL_SPI_Receive+0x7e>
 8005e06:	88fb      	ldrh	r3, [r7, #6]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d102      	bne.n	8005e12 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005e10:	e0e0      	b.n	8005fd4 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2204      	movs	r2, #4
 8005e16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	88fa      	ldrh	r2, [r7, #6]
 8005e2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	88fa      	ldrh	r2, [r7, #6]
 8005e32:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e5c:	d908      	bls.n	8005e70 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e6c:	605a      	str	r2, [r3, #4]
 8005e6e:	e007      	b.n	8005e80 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	685a      	ldr	r2, [r3, #4]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e7e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e88:	d10f      	bne.n	8005eaa <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e98:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005ea8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb4:	2b40      	cmp	r3, #64	; 0x40
 8005eb6:	d007      	beq.n	8005ec8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ec6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ed0:	d867      	bhi.n	8005fa2 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005ed2:	e030      	b.n	8005f36 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d117      	bne.n	8005f12 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f103 020c 	add.w	r2, r3, #12
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eee:	7812      	ldrb	r2, [r2, #0]
 8005ef0:	b2d2      	uxtb	r2, r2
 8005ef2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef8:	1c5a      	adds	r2, r3, #1
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	3b01      	subs	r3, #1
 8005f08:	b29a      	uxth	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005f10:	e011      	b.n	8005f36 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f12:	f7fd fe67 	bl	8003be4 <HAL_GetTick>
 8005f16:	4602      	mov	r2, r0
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	683a      	ldr	r2, [r7, #0]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d803      	bhi.n	8005f2a <HAL_SPI_Receive+0x19c>
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f28:	d102      	bne.n	8005f30 <HAL_SPI_Receive+0x1a2>
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d102      	bne.n	8005f36 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005f34:	e04e      	b.n	8005fd4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1c8      	bne.n	8005ed4 <HAL_SPI_Receive+0x146>
 8005f42:	e034      	b.n	8005fae <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d115      	bne.n	8005f7e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68da      	ldr	r2, [r3, #12]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5c:	b292      	uxth	r2, r2
 8005f5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f64:	1c9a      	adds	r2, r3, #2
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	3b01      	subs	r3, #1
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005f7c:	e011      	b.n	8005fa2 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f7e:	f7fd fe31 	bl	8003be4 <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d803      	bhi.n	8005f96 <HAL_SPI_Receive+0x208>
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f94:	d102      	bne.n	8005f9c <HAL_SPI_Receive+0x20e>
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d102      	bne.n	8005fa2 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005fa0:	e018      	b.n	8005fd4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1ca      	bne.n	8005f44 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	6839      	ldr	r1, [r7, #0]
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	f000 fb4c 	bl	8006650 <SPI_EndRxTransaction>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d002      	beq.n	8005fc4 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2220      	movs	r2, #32
 8005fc2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d002      	beq.n	8005fd2 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	75fb      	strb	r3, [r7, #23]
 8005fd0:	e000      	b.n	8005fd4 <HAL_SPI_Receive+0x246>
  }

error :
 8005fd2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3718      	adds	r7, #24
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b08a      	sub	sp, #40	; 0x28
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	60f8      	str	r0, [r7, #12]
 8005ff6:	60b9      	str	r1, [r7, #8]
 8005ff8:	607a      	str	r2, [r7, #4]
 8005ffa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006000:	2300      	movs	r3, #0
 8006002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800600c:	2b01      	cmp	r3, #1
 800600e:	d101      	bne.n	8006014 <HAL_SPI_TransmitReceive+0x26>
 8006010:	2302      	movs	r3, #2
 8006012:	e1fb      	b.n	800640c <HAL_SPI_TransmitReceive+0x41e>
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800601c:	f7fd fde2 	bl	8003be4 <HAL_GetTick>
 8006020:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006028:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006030:	887b      	ldrh	r3, [r7, #2]
 8006032:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006034:	887b      	ldrh	r3, [r7, #2]
 8006036:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006038:	7efb      	ldrb	r3, [r7, #27]
 800603a:	2b01      	cmp	r3, #1
 800603c:	d00e      	beq.n	800605c <HAL_SPI_TransmitReceive+0x6e>
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006044:	d106      	bne.n	8006054 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d102      	bne.n	8006054 <HAL_SPI_TransmitReceive+0x66>
 800604e:	7efb      	ldrb	r3, [r7, #27]
 8006050:	2b04      	cmp	r3, #4
 8006052:	d003      	beq.n	800605c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006054:	2302      	movs	r3, #2
 8006056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800605a:	e1cd      	b.n	80063f8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d005      	beq.n	800606e <HAL_SPI_TransmitReceive+0x80>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d002      	beq.n	800606e <HAL_SPI_TransmitReceive+0x80>
 8006068:	887b      	ldrh	r3, [r7, #2]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d103      	bne.n	8006076 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006074:	e1c0      	b.n	80063f8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b04      	cmp	r3, #4
 8006080:	d003      	beq.n	800608a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2205      	movs	r2, #5
 8006086:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	887a      	ldrh	r2, [r7, #2]
 800609a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	887a      	ldrh	r2, [r7, #2]
 80060a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	887a      	ldrh	r2, [r7, #2]
 80060b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	887a      	ldrh	r2, [r7, #2]
 80060b6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060cc:	d802      	bhi.n	80060d4 <HAL_SPI_TransmitReceive+0xe6>
 80060ce:	8a3b      	ldrh	r3, [r7, #16]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d908      	bls.n	80060e6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	685a      	ldr	r2, [r3, #4]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80060e2:	605a      	str	r2, [r3, #4]
 80060e4:	e007      	b.n	80060f6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	685a      	ldr	r2, [r3, #4]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060f4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006100:	2b40      	cmp	r3, #64	; 0x40
 8006102:	d007      	beq.n	8006114 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006112:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800611c:	d97c      	bls.n	8006218 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d002      	beq.n	800612c <HAL_SPI_TransmitReceive+0x13e>
 8006126:	8a7b      	ldrh	r3, [r7, #18]
 8006128:	2b01      	cmp	r3, #1
 800612a:	d169      	bne.n	8006200 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006130:	881a      	ldrh	r2, [r3, #0]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613c:	1c9a      	adds	r2, r3, #2
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006146:	b29b      	uxth	r3, r3
 8006148:	3b01      	subs	r3, #1
 800614a:	b29a      	uxth	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006150:	e056      	b.n	8006200 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f003 0302 	and.w	r3, r3, #2
 800615c:	2b02      	cmp	r3, #2
 800615e:	d11b      	bne.n	8006198 <HAL_SPI_TransmitReceive+0x1aa>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006164:	b29b      	uxth	r3, r3
 8006166:	2b00      	cmp	r3, #0
 8006168:	d016      	beq.n	8006198 <HAL_SPI_TransmitReceive+0x1aa>
 800616a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616c:	2b01      	cmp	r3, #1
 800616e:	d113      	bne.n	8006198 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006174:	881a      	ldrh	r2, [r3, #0]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006180:	1c9a      	adds	r2, r3, #2
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800618a:	b29b      	uxth	r3, r3
 800618c:	3b01      	subs	r3, #1
 800618e:	b29a      	uxth	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006194:	2300      	movs	r3, #0
 8006196:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d11c      	bne.n	80061e0 <HAL_SPI_TransmitReceive+0x1f2>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d016      	beq.n	80061e0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68da      	ldr	r2, [r3, #12]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061bc:	b292      	uxth	r2, r2
 80061be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c4:	1c9a      	adds	r2, r3, #2
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	3b01      	subs	r3, #1
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061dc:	2301      	movs	r3, #1
 80061de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80061e0:	f7fd fd00 	bl	8003be4 <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d807      	bhi.n	8006200 <HAL_SPI_TransmitReceive+0x212>
 80061f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f6:	d003      	beq.n	8006200 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80061f8:	2303      	movs	r3, #3
 80061fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80061fe:	e0fb      	b.n	80063f8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006204:	b29b      	uxth	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1a3      	bne.n	8006152 <HAL_SPI_TransmitReceive+0x164>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006210:	b29b      	uxth	r3, r3
 8006212:	2b00      	cmp	r3, #0
 8006214:	d19d      	bne.n	8006152 <HAL_SPI_TransmitReceive+0x164>
 8006216:	e0df      	b.n	80063d8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d003      	beq.n	8006228 <HAL_SPI_TransmitReceive+0x23a>
 8006220:	8a7b      	ldrh	r3, [r7, #18]
 8006222:	2b01      	cmp	r3, #1
 8006224:	f040 80cb 	bne.w	80063be <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800622c:	b29b      	uxth	r3, r3
 800622e:	2b01      	cmp	r3, #1
 8006230:	d912      	bls.n	8006258 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006236:	881a      	ldrh	r2, [r3, #0]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006242:	1c9a      	adds	r2, r3, #2
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800624c:	b29b      	uxth	r3, r3
 800624e:	3b02      	subs	r3, #2
 8006250:	b29a      	uxth	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006256:	e0b2      	b.n	80063be <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	330c      	adds	r3, #12
 8006262:	7812      	ldrb	r2, [r2, #0]
 8006264:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626a:	1c5a      	adds	r2, r3, #1
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006274:	b29b      	uxth	r3, r3
 8006276:	3b01      	subs	r3, #1
 8006278:	b29a      	uxth	r2, r3
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800627e:	e09e      	b.n	80063be <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f003 0302 	and.w	r3, r3, #2
 800628a:	2b02      	cmp	r3, #2
 800628c:	d134      	bne.n	80062f8 <HAL_SPI_TransmitReceive+0x30a>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006292:	b29b      	uxth	r3, r3
 8006294:	2b00      	cmp	r3, #0
 8006296:	d02f      	beq.n	80062f8 <HAL_SPI_TransmitReceive+0x30a>
 8006298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629a:	2b01      	cmp	r3, #1
 800629c:	d12c      	bne.n	80062f8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d912      	bls.n	80062ce <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ac:	881a      	ldrh	r2, [r3, #0]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b8:	1c9a      	adds	r2, r3, #2
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	3b02      	subs	r3, #2
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80062cc:	e012      	b.n	80062f4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	330c      	adds	r3, #12
 80062d8:	7812      	ldrb	r2, [r2, #0]
 80062da:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e0:	1c5a      	adds	r2, r3, #1
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	3b01      	subs	r3, #1
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062f4:	2300      	movs	r3, #0
 80062f6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f003 0301 	and.w	r3, r3, #1
 8006302:	2b01      	cmp	r3, #1
 8006304:	d148      	bne.n	8006398 <HAL_SPI_TransmitReceive+0x3aa>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800630c:	b29b      	uxth	r3, r3
 800630e:	2b00      	cmp	r3, #0
 8006310:	d042      	beq.n	8006398 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006318:	b29b      	uxth	r3, r3
 800631a:	2b01      	cmp	r3, #1
 800631c:	d923      	bls.n	8006366 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68da      	ldr	r2, [r3, #12]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006328:	b292      	uxth	r2, r2
 800632a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006330:	1c9a      	adds	r2, r3, #2
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800633c:	b29b      	uxth	r3, r3
 800633e:	3b02      	subs	r3, #2
 8006340:	b29a      	uxth	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800634e:	b29b      	uxth	r3, r3
 8006350:	2b01      	cmp	r3, #1
 8006352:	d81f      	bhi.n	8006394 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	685a      	ldr	r2, [r3, #4]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006362:	605a      	str	r2, [r3, #4]
 8006364:	e016      	b.n	8006394 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f103 020c 	add.w	r2, r3, #12
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006372:	7812      	ldrb	r2, [r2, #0]
 8006374:	b2d2      	uxtb	r2, r2
 8006376:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637c:	1c5a      	adds	r2, r3, #1
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006388:	b29b      	uxth	r3, r3
 800638a:	3b01      	subs	r3, #1
 800638c:	b29a      	uxth	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006394:	2301      	movs	r3, #1
 8006396:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006398:	f7fd fc24 	bl	8003be4 <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d803      	bhi.n	80063b0 <HAL_SPI_TransmitReceive+0x3c2>
 80063a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ae:	d102      	bne.n	80063b6 <HAL_SPI_TransmitReceive+0x3c8>
 80063b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d103      	bne.n	80063be <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80063bc:	e01c      	b.n	80063f8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f47f af5b 	bne.w	8006280 <HAL_SPI_TransmitReceive+0x292>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f47f af54 	bne.w	8006280 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063d8:	69fa      	ldr	r2, [r7, #28]
 80063da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f000 f98f 	bl	8006700 <SPI_EndRxTxTransaction>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d006      	beq.n	80063f6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2220      	movs	r2, #32
 80063f2:	661a      	str	r2, [r3, #96]	; 0x60
 80063f4:	e000      	b.n	80063f8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80063f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006408:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800640c:	4618      	mov	r0, r3
 800640e:	3728      	adds	r7, #40	; 0x28
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b088      	sub	sp, #32
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	603b      	str	r3, [r7, #0]
 8006420:	4613      	mov	r3, r2
 8006422:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006424:	f7fd fbde 	bl	8003be4 <HAL_GetTick>
 8006428:	4602      	mov	r2, r0
 800642a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642c:	1a9b      	subs	r3, r3, r2
 800642e:	683a      	ldr	r2, [r7, #0]
 8006430:	4413      	add	r3, r2
 8006432:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006434:	f7fd fbd6 	bl	8003be4 <HAL_GetTick>
 8006438:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800643a:	4b39      	ldr	r3, [pc, #228]	; (8006520 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	015b      	lsls	r3, r3, #5
 8006440:	0d1b      	lsrs	r3, r3, #20
 8006442:	69fa      	ldr	r2, [r7, #28]
 8006444:	fb02 f303 	mul.w	r3, r2, r3
 8006448:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800644a:	e054      	b.n	80064f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006452:	d050      	beq.n	80064f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006454:	f7fd fbc6 	bl	8003be4 <HAL_GetTick>
 8006458:	4602      	mov	r2, r0
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	69fa      	ldr	r2, [r7, #28]
 8006460:	429a      	cmp	r2, r3
 8006462:	d902      	bls.n	800646a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d13d      	bne.n	80064e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	685a      	ldr	r2, [r3, #4]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006478:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006482:	d111      	bne.n	80064a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800648c:	d004      	beq.n	8006498 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006496:	d107      	bne.n	80064a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064b0:	d10f      	bne.n	80064d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064c0:	601a      	str	r2, [r3, #0]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e017      	b.n	8006516 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d101      	bne.n	80064f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80064ec:	2300      	movs	r3, #0
 80064ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	3b01      	subs	r3, #1
 80064f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	689a      	ldr	r2, [r3, #8]
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	4013      	ands	r3, r2
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	429a      	cmp	r2, r3
 8006504:	bf0c      	ite	eq
 8006506:	2301      	moveq	r3, #1
 8006508:	2300      	movne	r3, #0
 800650a:	b2db      	uxtb	r3, r3
 800650c:	461a      	mov	r2, r3
 800650e:	79fb      	ldrb	r3, [r7, #7]
 8006510:	429a      	cmp	r2, r3
 8006512:	d19b      	bne.n	800644c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3720      	adds	r7, #32
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	20000004 	.word	0x20000004

08006524 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b08a      	sub	sp, #40	; 0x28
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
 8006530:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006532:	2300      	movs	r3, #0
 8006534:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006536:	f7fd fb55 	bl	8003be4 <HAL_GetTick>
 800653a:	4602      	mov	r2, r0
 800653c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653e:	1a9b      	subs	r3, r3, r2
 8006540:	683a      	ldr	r2, [r7, #0]
 8006542:	4413      	add	r3, r2
 8006544:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006546:	f7fd fb4d 	bl	8003be4 <HAL_GetTick>
 800654a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	330c      	adds	r3, #12
 8006552:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006554:	4b3d      	ldr	r3, [pc, #244]	; (800664c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	4613      	mov	r3, r2
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	4413      	add	r3, r2
 800655e:	00da      	lsls	r2, r3, #3
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	0d1b      	lsrs	r3, r3, #20
 8006564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006566:	fb02 f303 	mul.w	r3, r2, r3
 800656a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800656c:	e060      	b.n	8006630 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006574:	d107      	bne.n	8006586 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d104      	bne.n	8006586 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	b2db      	uxtb	r3, r3
 8006582:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006584:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800658c:	d050      	beq.n	8006630 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800658e:	f7fd fb29 	bl	8003be4 <HAL_GetTick>
 8006592:	4602      	mov	r2, r0
 8006594:	6a3b      	ldr	r3, [r7, #32]
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800659a:	429a      	cmp	r2, r3
 800659c:	d902      	bls.n	80065a4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800659e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d13d      	bne.n	8006620 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	685a      	ldr	r2, [r3, #4]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80065b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065bc:	d111      	bne.n	80065e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065c6:	d004      	beq.n	80065d2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065d0:	d107      	bne.n	80065e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065ea:	d10f      	bne.n	800660c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065fa:	601a      	str	r2, [r3, #0]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800660a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2200      	movs	r2, #0
 8006618:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	e010      	b.n	8006642 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d101      	bne.n	800662a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006626:	2300      	movs	r3, #0
 8006628:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	3b01      	subs	r3, #1
 800662e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	689a      	ldr	r2, [r3, #8]
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	4013      	ands	r3, r2
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	429a      	cmp	r2, r3
 800663e:	d196      	bne.n	800656e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3728      	adds	r7, #40	; 0x28
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	20000004 	.word	0x20000004

08006650 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af02      	add	r7, sp, #8
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006664:	d111      	bne.n	800668a <SPI_EndRxTransaction+0x3a>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800666e:	d004      	beq.n	800667a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006678:	d107      	bne.n	800668a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006688:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	9300      	str	r3, [sp, #0]
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	2200      	movs	r2, #0
 8006692:	2180      	movs	r1, #128	; 0x80
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f7ff febd 	bl	8006414 <SPI_WaitFlagStateUntilTimeout>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d007      	beq.n	80066b0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066a4:	f043 0220 	orr.w	r2, r3, #32
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80066ac:	2303      	movs	r3, #3
 80066ae:	e023      	b.n	80066f8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066b8:	d11d      	bne.n	80066f6 <SPI_EndRxTransaction+0xa6>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066c2:	d004      	beq.n	80066ce <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066cc:	d113      	bne.n	80066f6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	9300      	str	r3, [sp, #0]
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f7ff ff22 	bl	8006524 <SPI_WaitFifoStateUntilTimeout>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d007      	beq.n	80066f6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066ea:	f043 0220 	orr.w	r2, r3, #32
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e000      	b.n	80066f8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80066f6:	2300      	movs	r3, #0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3710      	adds	r7, #16
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af02      	add	r7, sp, #8
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	9300      	str	r3, [sp, #0]
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	2200      	movs	r2, #0
 8006714:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	f7ff ff03 	bl	8006524 <SPI_WaitFifoStateUntilTimeout>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d007      	beq.n	8006734 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006728:	f043 0220 	orr.w	r2, r3, #32
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e027      	b.n	8006784 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	9300      	str	r3, [sp, #0]
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	2200      	movs	r2, #0
 800673c:	2180      	movs	r1, #128	; 0x80
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f7ff fe68 	bl	8006414 <SPI_WaitFlagStateUntilTimeout>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d007      	beq.n	800675a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800674e:	f043 0220 	orr.w	r2, r3, #32
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e014      	b.n	8006784 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	9300      	str	r3, [sp, #0]
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	2200      	movs	r2, #0
 8006762:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f7ff fedc 	bl	8006524 <SPI_WaitFifoStateUntilTimeout>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d007      	beq.n	8006782 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006776:	f043 0220 	orr.w	r2, r3, #32
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e000      	b.n	8006784 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d101      	bne.n	800679e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e040      	b.n	8006820 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d106      	bne.n	80067b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f7fd f8d6 	bl	8003960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2224      	movs	r2, #36	; 0x24
 80067b8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f022 0201 	bic.w	r2, r2, #1
 80067c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 fc94 	bl	80070f8 <UART_SetConfig>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d101      	bne.n	80067da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e022      	b.n	8006820 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d002      	beq.n	80067e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 ff12 	bl	800760c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	685a      	ldr	r2, [r3, #4]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	689a      	ldr	r2, [r3, #8]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006806:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f042 0201 	orr.w	r2, r2, #1
 8006816:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 ff99 	bl	8007750 <UART_CheckIdleState>
 800681e:	4603      	mov	r3, r0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b08a      	sub	sp, #40	; 0x28
 800682c:	af02      	add	r7, sp, #8
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	603b      	str	r3, [r7, #0]
 8006834:	4613      	mov	r3, r2
 8006836:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800683c:	2b20      	cmp	r3, #32
 800683e:	f040 8082 	bne.w	8006946 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d002      	beq.n	800684e <HAL_UART_Transmit+0x26>
 8006848:	88fb      	ldrh	r3, [r7, #6]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d101      	bne.n	8006852 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e07a      	b.n	8006948 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006858:	2b01      	cmp	r3, #1
 800685a:	d101      	bne.n	8006860 <HAL_UART_Transmit+0x38>
 800685c:	2302      	movs	r3, #2
 800685e:	e073      	b.n	8006948 <HAL_UART_Transmit+0x120>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2221      	movs	r2, #33	; 0x21
 8006874:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006876:	f7fd f9b5 	bl	8003be4 <HAL_GetTick>
 800687a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	88fa      	ldrh	r2, [r7, #6]
 8006880:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	88fa      	ldrh	r2, [r7, #6]
 8006888:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006894:	d108      	bne.n	80068a8 <HAL_UART_Transmit+0x80>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d104      	bne.n	80068a8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800689e:	2300      	movs	r3, #0
 80068a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	61bb      	str	r3, [r7, #24]
 80068a6:	e003      	b.n	80068b0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068ac:	2300      	movs	r3, #0
 80068ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80068b8:	e02d      	b.n	8006916 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	9300      	str	r3, [sp, #0]
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	2200      	movs	r2, #0
 80068c2:	2180      	movs	r1, #128	; 0x80
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f000 ff8c 	bl	80077e2 <UART_WaitOnFlagUntilTimeout>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d001      	beq.n	80068d4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e039      	b.n	8006948 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d10b      	bne.n	80068f2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	881a      	ldrh	r2, [r3, #0]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068e6:	b292      	uxth	r2, r2
 80068e8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	3302      	adds	r3, #2
 80068ee:	61bb      	str	r3, [r7, #24]
 80068f0:	e008      	b.n	8006904 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	781a      	ldrb	r2, [r3, #0]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	b292      	uxth	r2, r2
 80068fc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	3301      	adds	r3, #1
 8006902:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800690a:	b29b      	uxth	r3, r3
 800690c:	3b01      	subs	r3, #1
 800690e:	b29a      	uxth	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800691c:	b29b      	uxth	r3, r3
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1cb      	bne.n	80068ba <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	9300      	str	r3, [sp, #0]
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	2200      	movs	r2, #0
 800692a:	2140      	movs	r1, #64	; 0x40
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f000 ff58 	bl	80077e2 <UART_WaitOnFlagUntilTimeout>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d001      	beq.n	800693c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006938:	2303      	movs	r3, #3
 800693a:	e005      	b.n	8006948 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2220      	movs	r2, #32
 8006940:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006942:	2300      	movs	r3, #0
 8006944:	e000      	b.n	8006948 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006946:	2302      	movs	r3, #2
  }
}
 8006948:	4618      	mov	r0, r3
 800694a:	3720      	adds	r7, #32
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b08a      	sub	sp, #40	; 0x28
 8006954:	af02      	add	r7, sp, #8
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	603b      	str	r3, [r7, #0]
 800695c:	4613      	mov	r3, r2
 800695e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006964:	2b20      	cmp	r3, #32
 8006966:	f040 80bf 	bne.w	8006ae8 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d002      	beq.n	8006976 <HAL_UART_Receive+0x26>
 8006970:	88fb      	ldrh	r3, [r7, #6]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d101      	bne.n	800697a <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e0b7      	b.n	8006aea <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006980:	2b01      	cmp	r3, #1
 8006982:	d101      	bne.n	8006988 <HAL_UART_Receive+0x38>
 8006984:	2302      	movs	r3, #2
 8006986:	e0b0      	b.n	8006aea <HAL_UART_Receive+0x19a>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2222      	movs	r2, #34	; 0x22
 800699c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069a4:	f7fd f91e 	bl	8003be4 <HAL_GetTick>
 80069a8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	88fa      	ldrh	r2, [r7, #6]
 80069ae:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	88fa      	ldrh	r2, [r7, #6]
 80069b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069c2:	d10e      	bne.n	80069e2 <HAL_UART_Receive+0x92>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d105      	bne.n	80069d8 <HAL_UART_Receive+0x88>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 80069d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069d6:	e02d      	b.n	8006a34 <HAL_UART_Receive+0xe4>
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	22ff      	movs	r2, #255	; 0xff
 80069dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069e0:	e028      	b.n	8006a34 <HAL_UART_Receive+0xe4>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d10d      	bne.n	8006a06 <HAL_UART_Receive+0xb6>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d104      	bne.n	80069fc <HAL_UART_Receive+0xac>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	22ff      	movs	r2, #255	; 0xff
 80069f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069fa:	e01b      	b.n	8006a34 <HAL_UART_Receive+0xe4>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	227f      	movs	r2, #127	; 0x7f
 8006a00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a04:	e016      	b.n	8006a34 <HAL_UART_Receive+0xe4>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a0e:	d10d      	bne.n	8006a2c <HAL_UART_Receive+0xdc>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d104      	bne.n	8006a22 <HAL_UART_Receive+0xd2>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	227f      	movs	r2, #127	; 0x7f
 8006a1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a20:	e008      	b.n	8006a34 <HAL_UART_Receive+0xe4>
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	223f      	movs	r2, #63	; 0x3f
 8006a26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a2a:	e003      	b.n	8006a34 <HAL_UART_Receive+0xe4>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a3a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a44:	d108      	bne.n	8006a58 <HAL_UART_Receive+0x108>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d104      	bne.n	8006a58 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	61bb      	str	r3, [r7, #24]
 8006a56:	e003      	b.n	8006a60 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006a68:	e033      	b.n	8006ad2 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	9300      	str	r3, [sp, #0]
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	2200      	movs	r2, #0
 8006a72:	2120      	movs	r1, #32
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f000 feb4 	bl	80077e2 <UART_WaitOnFlagUntilTimeout>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d001      	beq.n	8006a84 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8006a80:	2303      	movs	r3, #3
 8006a82:	e032      	b.n	8006aea <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10c      	bne.n	8006aa4 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006a90:	b29a      	uxth	r2, r3
 8006a92:	8a7b      	ldrh	r3, [r7, #18]
 8006a94:	4013      	ands	r3, r2
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	3302      	adds	r3, #2
 8006aa0:	61bb      	str	r3, [r7, #24]
 8006aa2:	e00d      	b.n	8006ac0 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	b2da      	uxtb	r2, r3
 8006aae:	8a7b      	ldrh	r3, [r7, #18]
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	b2da      	uxtb	r2, r3
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	3301      	adds	r3, #1
 8006abe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	b29a      	uxth	r2, r3
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1c5      	bne.n	8006a6a <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2220      	movs	r2, #32
 8006ae2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	e000      	b.n	8006aea <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8006ae8:	2302      	movs	r3, #2
  }
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3720      	adds	r7, #32
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
	...

08006af4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b0ba      	sub	sp, #232	; 0xe8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	69db      	ldr	r3, [r3, #28]
 8006b02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006b1a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006b1e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006b22:	4013      	ands	r3, r2
 8006b24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006b28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d115      	bne.n	8006b5c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b34:	f003 0320 	and.w	r3, r3, #32
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d00f      	beq.n	8006b5c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b40:	f003 0320 	and.w	r3, r3, #32
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d009      	beq.n	8006b5c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f000 82a6 	beq.w	800709e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	4798      	blx	r3
      }
      return;
 8006b5a:	e2a0      	b.n	800709e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006b5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f000 8117 	beq.w	8006d94 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006b66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b6a:	f003 0301 	and.w	r3, r3, #1
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d106      	bne.n	8006b80 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006b72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006b76:	4b85      	ldr	r3, [pc, #532]	; (8006d8c <HAL_UART_IRQHandler+0x298>)
 8006b78:	4013      	ands	r3, r2
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f000 810a 	beq.w	8006d94 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b84:	f003 0301 	and.w	r3, r3, #1
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d011      	beq.n	8006bb0 <HAL_UART_IRQHandler+0xbc>
 8006b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00b      	beq.n	8006bb0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ba6:	f043 0201 	orr.w	r2, r3, #1
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bb4:	f003 0302 	and.w	r3, r3, #2
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d011      	beq.n	8006be0 <HAL_UART_IRQHandler+0xec>
 8006bbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bc0:	f003 0301 	and.w	r3, r3, #1
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00b      	beq.n	8006be0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2202      	movs	r2, #2
 8006bce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bd6:	f043 0204 	orr.w	r2, r3, #4
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006be4:	f003 0304 	and.w	r3, r3, #4
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d011      	beq.n	8006c10 <HAL_UART_IRQHandler+0x11c>
 8006bec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00b      	beq.n	8006c10 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2204      	movs	r2, #4
 8006bfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c06:	f043 0202 	orr.w	r2, r3, #2
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c14:	f003 0308 	and.w	r3, r3, #8
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d017      	beq.n	8006c4c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c20:	f003 0320 	and.w	r3, r3, #32
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d105      	bne.n	8006c34 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006c28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c2c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00b      	beq.n	8006c4c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2208      	movs	r2, #8
 8006c3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c42:	f043 0208 	orr.w	r2, r3, #8
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d012      	beq.n	8006c7e <HAL_UART_IRQHandler+0x18a>
 8006c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d00c      	beq.n	8006c7e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c74:	f043 0220 	orr.w	r2, r3, #32
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	f000 820c 	beq.w	80070a2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c8e:	f003 0320 	and.w	r3, r3, #32
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00d      	beq.n	8006cb2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006c96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c9a:	f003 0320 	and.w	r3, r3, #32
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d007      	beq.n	8006cb2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d003      	beq.n	8006cb2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cb8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc6:	2b40      	cmp	r3, #64	; 0x40
 8006cc8:	d005      	beq.n	8006cd6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006cca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d04f      	beq.n	8006d76 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 fe47 	bl	800796a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce6:	2b40      	cmp	r3, #64	; 0x40
 8006ce8:	d141      	bne.n	8006d6e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	3308      	adds	r3, #8
 8006cf0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006cf8:	e853 3f00 	ldrex	r3, [r3]
 8006cfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006d00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	3308      	adds	r3, #8
 8006d12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006d16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006d1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006d22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006d26:	e841 2300 	strex	r3, r2, [r1]
 8006d2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006d2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1d9      	bne.n	8006cea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d013      	beq.n	8006d66 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d42:	4a13      	ldr	r2, [pc, #76]	; (8006d90 <HAL_UART_IRQHandler+0x29c>)
 8006d44:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7fd f8c9 	bl	8003ee2 <HAL_DMA_Abort_IT>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d017      	beq.n	8006d86 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006d60:	4610      	mov	r0, r2
 8006d62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d64:	e00f      	b.n	8006d86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 f9b0 	bl	80070cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d6c:	e00b      	b.n	8006d86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f9ac 	bl	80070cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d74:	e007      	b.n	8006d86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 f9a8 	bl	80070cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006d84:	e18d      	b.n	80070a2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d86:	bf00      	nop
    return;
 8006d88:	e18b      	b.n	80070a2 <HAL_UART_IRQHandler+0x5ae>
 8006d8a:	bf00      	nop
 8006d8c:	04000120 	.word	0x04000120
 8006d90:	08007a31 	.word	0x08007a31

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	f040 8146 	bne.w	800702a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006da2:	f003 0310 	and.w	r3, r3, #16
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	f000 813f 	beq.w	800702a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006db0:	f003 0310 	and.w	r3, r3, #16
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f000 8138 	beq.w	800702a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2210      	movs	r2, #16
 8006dc0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dcc:	2b40      	cmp	r3, #64	; 0x40
 8006dce:	f040 80b4 	bne.w	8006f3a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006dde:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f000 815f 	beq.w	80070a6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006dee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006df2:	429a      	cmp	r2, r3
 8006df4:	f080 8157 	bcs.w	80070a6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006dfe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 0320 	and.w	r3, r3, #32
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	f040 8085 	bne.w	8006f1e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e20:	e853 3f00 	ldrex	r3, [r3]
 8006e24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006e28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	461a      	mov	r2, r3
 8006e3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e42:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006e4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e4e:	e841 2300 	strex	r3, r2, [r1]
 8006e52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006e56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1da      	bne.n	8006e14 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	3308      	adds	r3, #8
 8006e64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e68:	e853 3f00 	ldrex	r3, [r3]
 8006e6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006e6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e70:	f023 0301 	bic.w	r3, r3, #1
 8006e74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	3308      	adds	r3, #8
 8006e7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006e82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006e86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006e8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006e8e:	e841 2300 	strex	r3, r2, [r1]
 8006e92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006e94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1e1      	bne.n	8006e5e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	3308      	adds	r3, #8
 8006ea0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ea4:	e853 3f00 	ldrex	r3, [r3]
 8006ea8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006eaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006eac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	3308      	adds	r3, #8
 8006eba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006ebe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006ec0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ec4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ec6:	e841 2300 	strex	r3, r2, [r1]
 8006eca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006ecc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1e3      	bne.n	8006e9a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2220      	movs	r2, #32
 8006ed6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ee6:	e853 3f00 	ldrex	r3, [r3]
 8006eea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006eec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006eee:	f023 0310 	bic.w	r3, r3, #16
 8006ef2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	461a      	mov	r2, r3
 8006efc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f00:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f02:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f08:	e841 2300 	strex	r3, r2, [r1]
 8006f0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d1e4      	bne.n	8006ede <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f7fc ffa4 	bl	8003e66 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	4619      	mov	r1, r3
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 f8d4 	bl	80070e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f38:	e0b5      	b.n	80070a6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	1ad3      	subs	r3, r2, r3
 8006f4a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	f000 80a7 	beq.w	80070aa <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006f5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f000 80a2 	beq.w	80070aa <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6e:	e853 3f00 	ldrex	r3, [r3]
 8006f72:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	461a      	mov	r2, r3
 8006f84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f88:	647b      	str	r3, [r7, #68]	; 0x44
 8006f8a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f90:	e841 2300 	strex	r3, r2, [r1]
 8006f94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d1e4      	bne.n	8006f66 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	3308      	adds	r3, #8
 8006fa2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa6:	e853 3f00 	ldrex	r3, [r3]
 8006faa:	623b      	str	r3, [r7, #32]
   return(result);
 8006fac:	6a3b      	ldr	r3, [r7, #32]
 8006fae:	f023 0301 	bic.w	r3, r3, #1
 8006fb2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	3308      	adds	r3, #8
 8006fbc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006fc0:	633a      	str	r2, [r7, #48]	; 0x30
 8006fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006fc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fc8:	e841 2300 	strex	r3, r2, [r1]
 8006fcc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1e3      	bne.n	8006f9c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2220      	movs	r2, #32
 8006fd8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	e853 3f00 	ldrex	r3, [r3]
 8006ff2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f023 0310 	bic.w	r3, r3, #16
 8006ffa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	461a      	mov	r2, r3
 8007004:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007008:	61fb      	str	r3, [r7, #28]
 800700a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700c:	69b9      	ldr	r1, [r7, #24]
 800700e:	69fa      	ldr	r2, [r7, #28]
 8007010:	e841 2300 	strex	r3, r2, [r1]
 8007014:	617b      	str	r3, [r7, #20]
   return(result);
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d1e4      	bne.n	8006fe6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800701c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007020:	4619      	mov	r1, r3
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 f85c 	bl	80070e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007028:	e03f      	b.n	80070aa <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800702a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800702e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00e      	beq.n	8007054 <HAL_UART_IRQHandler+0x560>
 8007036:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800703a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d008      	beq.n	8007054 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800704a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 fd2f 	bl	8007ab0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007052:	e02d      	b.n	80070b0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00e      	beq.n	800707e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007068:	2b00      	cmp	r3, #0
 800706a:	d008      	beq.n	800707e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007070:	2b00      	cmp	r3, #0
 8007072:	d01c      	beq.n	80070ae <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	4798      	blx	r3
    }
    return;
 800707c:	e017      	b.n	80070ae <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800707e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007086:	2b00      	cmp	r3, #0
 8007088:	d012      	beq.n	80070b0 <HAL_UART_IRQHandler+0x5bc>
 800708a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800708e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00c      	beq.n	80070b0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 fce0 	bl	8007a5c <UART_EndTransmit_IT>
    return;
 800709c:	e008      	b.n	80070b0 <HAL_UART_IRQHandler+0x5bc>
      return;
 800709e:	bf00      	nop
 80070a0:	e006      	b.n	80070b0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80070a2:	bf00      	nop
 80070a4:	e004      	b.n	80070b0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80070a6:	bf00      	nop
 80070a8:	e002      	b.n	80070b0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80070aa:	bf00      	nop
 80070ac:	e000      	b.n	80070b0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80070ae:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80070b0:	37e8      	adds	r7, #232	; 0xe8
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop

080070b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80070c0:	bf00      	nop
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80070d4:	bf00      	nop
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	460b      	mov	r3, r1
 80070ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80070ec:	bf00      	nop
 80070ee:	370c      	adds	r7, #12
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070f8:	b5b0      	push	{r4, r5, r7, lr}
 80070fa:	b088      	sub	sp, #32
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007100:	2300      	movs	r3, #0
 8007102:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	689a      	ldr	r2, [r3, #8]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	691b      	ldr	r3, [r3, #16]
 800710c:	431a      	orrs	r2, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	431a      	orrs	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	69db      	ldr	r3, [r3, #28]
 8007118:	4313      	orrs	r3, r2
 800711a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	4bad      	ldr	r3, [pc, #692]	; (80073d8 <UART_SetConfig+0x2e0>)
 8007124:	4013      	ands	r3, r2
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	6812      	ldr	r2, [r2, #0]
 800712a:	69f9      	ldr	r1, [r7, #28]
 800712c:	430b      	orrs	r3, r1
 800712e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	68da      	ldr	r2, [r3, #12]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	430a      	orrs	r2, r1
 8007144:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	699b      	ldr	r3, [r3, #24]
 800714a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4aa2      	ldr	r2, [pc, #648]	; (80073dc <UART_SetConfig+0x2e4>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d004      	beq.n	8007160 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a1b      	ldr	r3, [r3, #32]
 800715a:	69fa      	ldr	r2, [r7, #28]
 800715c:	4313      	orrs	r3, r2
 800715e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	69fa      	ldr	r2, [r7, #28]
 8007170:	430a      	orrs	r2, r1
 8007172:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a99      	ldr	r2, [pc, #612]	; (80073e0 <UART_SetConfig+0x2e8>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d121      	bne.n	80071c2 <UART_SetConfig+0xca>
 800717e:	4b99      	ldr	r3, [pc, #612]	; (80073e4 <UART_SetConfig+0x2ec>)
 8007180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007184:	f003 0303 	and.w	r3, r3, #3
 8007188:	2b03      	cmp	r3, #3
 800718a:	d817      	bhi.n	80071bc <UART_SetConfig+0xc4>
 800718c:	a201      	add	r2, pc, #4	; (adr r2, 8007194 <UART_SetConfig+0x9c>)
 800718e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007192:	bf00      	nop
 8007194:	080071a5 	.word	0x080071a5
 8007198:	080071b1 	.word	0x080071b1
 800719c:	080071ab 	.word	0x080071ab
 80071a0:	080071b7 	.word	0x080071b7
 80071a4:	2301      	movs	r3, #1
 80071a6:	76fb      	strb	r3, [r7, #27]
 80071a8:	e0e7      	b.n	800737a <UART_SetConfig+0x282>
 80071aa:	2302      	movs	r3, #2
 80071ac:	76fb      	strb	r3, [r7, #27]
 80071ae:	e0e4      	b.n	800737a <UART_SetConfig+0x282>
 80071b0:	2304      	movs	r3, #4
 80071b2:	76fb      	strb	r3, [r7, #27]
 80071b4:	e0e1      	b.n	800737a <UART_SetConfig+0x282>
 80071b6:	2308      	movs	r3, #8
 80071b8:	76fb      	strb	r3, [r7, #27]
 80071ba:	e0de      	b.n	800737a <UART_SetConfig+0x282>
 80071bc:	2310      	movs	r3, #16
 80071be:	76fb      	strb	r3, [r7, #27]
 80071c0:	e0db      	b.n	800737a <UART_SetConfig+0x282>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a88      	ldr	r2, [pc, #544]	; (80073e8 <UART_SetConfig+0x2f0>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d132      	bne.n	8007232 <UART_SetConfig+0x13a>
 80071cc:	4b85      	ldr	r3, [pc, #532]	; (80073e4 <UART_SetConfig+0x2ec>)
 80071ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071d2:	f003 030c 	and.w	r3, r3, #12
 80071d6:	2b0c      	cmp	r3, #12
 80071d8:	d828      	bhi.n	800722c <UART_SetConfig+0x134>
 80071da:	a201      	add	r2, pc, #4	; (adr r2, 80071e0 <UART_SetConfig+0xe8>)
 80071dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e0:	08007215 	.word	0x08007215
 80071e4:	0800722d 	.word	0x0800722d
 80071e8:	0800722d 	.word	0x0800722d
 80071ec:	0800722d 	.word	0x0800722d
 80071f0:	08007221 	.word	0x08007221
 80071f4:	0800722d 	.word	0x0800722d
 80071f8:	0800722d 	.word	0x0800722d
 80071fc:	0800722d 	.word	0x0800722d
 8007200:	0800721b 	.word	0x0800721b
 8007204:	0800722d 	.word	0x0800722d
 8007208:	0800722d 	.word	0x0800722d
 800720c:	0800722d 	.word	0x0800722d
 8007210:	08007227 	.word	0x08007227
 8007214:	2300      	movs	r3, #0
 8007216:	76fb      	strb	r3, [r7, #27]
 8007218:	e0af      	b.n	800737a <UART_SetConfig+0x282>
 800721a:	2302      	movs	r3, #2
 800721c:	76fb      	strb	r3, [r7, #27]
 800721e:	e0ac      	b.n	800737a <UART_SetConfig+0x282>
 8007220:	2304      	movs	r3, #4
 8007222:	76fb      	strb	r3, [r7, #27]
 8007224:	e0a9      	b.n	800737a <UART_SetConfig+0x282>
 8007226:	2308      	movs	r3, #8
 8007228:	76fb      	strb	r3, [r7, #27]
 800722a:	e0a6      	b.n	800737a <UART_SetConfig+0x282>
 800722c:	2310      	movs	r3, #16
 800722e:	76fb      	strb	r3, [r7, #27]
 8007230:	e0a3      	b.n	800737a <UART_SetConfig+0x282>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a6d      	ldr	r2, [pc, #436]	; (80073ec <UART_SetConfig+0x2f4>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d120      	bne.n	800727e <UART_SetConfig+0x186>
 800723c:	4b69      	ldr	r3, [pc, #420]	; (80073e4 <UART_SetConfig+0x2ec>)
 800723e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007242:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007246:	2b30      	cmp	r3, #48	; 0x30
 8007248:	d013      	beq.n	8007272 <UART_SetConfig+0x17a>
 800724a:	2b30      	cmp	r3, #48	; 0x30
 800724c:	d814      	bhi.n	8007278 <UART_SetConfig+0x180>
 800724e:	2b20      	cmp	r3, #32
 8007250:	d009      	beq.n	8007266 <UART_SetConfig+0x16e>
 8007252:	2b20      	cmp	r3, #32
 8007254:	d810      	bhi.n	8007278 <UART_SetConfig+0x180>
 8007256:	2b00      	cmp	r3, #0
 8007258:	d002      	beq.n	8007260 <UART_SetConfig+0x168>
 800725a:	2b10      	cmp	r3, #16
 800725c:	d006      	beq.n	800726c <UART_SetConfig+0x174>
 800725e:	e00b      	b.n	8007278 <UART_SetConfig+0x180>
 8007260:	2300      	movs	r3, #0
 8007262:	76fb      	strb	r3, [r7, #27]
 8007264:	e089      	b.n	800737a <UART_SetConfig+0x282>
 8007266:	2302      	movs	r3, #2
 8007268:	76fb      	strb	r3, [r7, #27]
 800726a:	e086      	b.n	800737a <UART_SetConfig+0x282>
 800726c:	2304      	movs	r3, #4
 800726e:	76fb      	strb	r3, [r7, #27]
 8007270:	e083      	b.n	800737a <UART_SetConfig+0x282>
 8007272:	2308      	movs	r3, #8
 8007274:	76fb      	strb	r3, [r7, #27]
 8007276:	e080      	b.n	800737a <UART_SetConfig+0x282>
 8007278:	2310      	movs	r3, #16
 800727a:	76fb      	strb	r3, [r7, #27]
 800727c:	e07d      	b.n	800737a <UART_SetConfig+0x282>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a5b      	ldr	r2, [pc, #364]	; (80073f0 <UART_SetConfig+0x2f8>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d120      	bne.n	80072ca <UART_SetConfig+0x1d2>
 8007288:	4b56      	ldr	r3, [pc, #344]	; (80073e4 <UART_SetConfig+0x2ec>)
 800728a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800728e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007292:	2bc0      	cmp	r3, #192	; 0xc0
 8007294:	d013      	beq.n	80072be <UART_SetConfig+0x1c6>
 8007296:	2bc0      	cmp	r3, #192	; 0xc0
 8007298:	d814      	bhi.n	80072c4 <UART_SetConfig+0x1cc>
 800729a:	2b80      	cmp	r3, #128	; 0x80
 800729c:	d009      	beq.n	80072b2 <UART_SetConfig+0x1ba>
 800729e:	2b80      	cmp	r3, #128	; 0x80
 80072a0:	d810      	bhi.n	80072c4 <UART_SetConfig+0x1cc>
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d002      	beq.n	80072ac <UART_SetConfig+0x1b4>
 80072a6:	2b40      	cmp	r3, #64	; 0x40
 80072a8:	d006      	beq.n	80072b8 <UART_SetConfig+0x1c0>
 80072aa:	e00b      	b.n	80072c4 <UART_SetConfig+0x1cc>
 80072ac:	2300      	movs	r3, #0
 80072ae:	76fb      	strb	r3, [r7, #27]
 80072b0:	e063      	b.n	800737a <UART_SetConfig+0x282>
 80072b2:	2302      	movs	r3, #2
 80072b4:	76fb      	strb	r3, [r7, #27]
 80072b6:	e060      	b.n	800737a <UART_SetConfig+0x282>
 80072b8:	2304      	movs	r3, #4
 80072ba:	76fb      	strb	r3, [r7, #27]
 80072bc:	e05d      	b.n	800737a <UART_SetConfig+0x282>
 80072be:	2308      	movs	r3, #8
 80072c0:	76fb      	strb	r3, [r7, #27]
 80072c2:	e05a      	b.n	800737a <UART_SetConfig+0x282>
 80072c4:	2310      	movs	r3, #16
 80072c6:	76fb      	strb	r3, [r7, #27]
 80072c8:	e057      	b.n	800737a <UART_SetConfig+0x282>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a49      	ldr	r2, [pc, #292]	; (80073f4 <UART_SetConfig+0x2fc>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d125      	bne.n	8007320 <UART_SetConfig+0x228>
 80072d4:	4b43      	ldr	r3, [pc, #268]	; (80073e4 <UART_SetConfig+0x2ec>)
 80072d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072e2:	d017      	beq.n	8007314 <UART_SetConfig+0x21c>
 80072e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072e8:	d817      	bhi.n	800731a <UART_SetConfig+0x222>
 80072ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072ee:	d00b      	beq.n	8007308 <UART_SetConfig+0x210>
 80072f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072f4:	d811      	bhi.n	800731a <UART_SetConfig+0x222>
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d003      	beq.n	8007302 <UART_SetConfig+0x20a>
 80072fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072fe:	d006      	beq.n	800730e <UART_SetConfig+0x216>
 8007300:	e00b      	b.n	800731a <UART_SetConfig+0x222>
 8007302:	2300      	movs	r3, #0
 8007304:	76fb      	strb	r3, [r7, #27]
 8007306:	e038      	b.n	800737a <UART_SetConfig+0x282>
 8007308:	2302      	movs	r3, #2
 800730a:	76fb      	strb	r3, [r7, #27]
 800730c:	e035      	b.n	800737a <UART_SetConfig+0x282>
 800730e:	2304      	movs	r3, #4
 8007310:	76fb      	strb	r3, [r7, #27]
 8007312:	e032      	b.n	800737a <UART_SetConfig+0x282>
 8007314:	2308      	movs	r3, #8
 8007316:	76fb      	strb	r3, [r7, #27]
 8007318:	e02f      	b.n	800737a <UART_SetConfig+0x282>
 800731a:	2310      	movs	r3, #16
 800731c:	76fb      	strb	r3, [r7, #27]
 800731e:	e02c      	b.n	800737a <UART_SetConfig+0x282>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a2d      	ldr	r2, [pc, #180]	; (80073dc <UART_SetConfig+0x2e4>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d125      	bne.n	8007376 <UART_SetConfig+0x27e>
 800732a:	4b2e      	ldr	r3, [pc, #184]	; (80073e4 <UART_SetConfig+0x2ec>)
 800732c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007330:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007334:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007338:	d017      	beq.n	800736a <UART_SetConfig+0x272>
 800733a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800733e:	d817      	bhi.n	8007370 <UART_SetConfig+0x278>
 8007340:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007344:	d00b      	beq.n	800735e <UART_SetConfig+0x266>
 8007346:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800734a:	d811      	bhi.n	8007370 <UART_SetConfig+0x278>
 800734c:	2b00      	cmp	r3, #0
 800734e:	d003      	beq.n	8007358 <UART_SetConfig+0x260>
 8007350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007354:	d006      	beq.n	8007364 <UART_SetConfig+0x26c>
 8007356:	e00b      	b.n	8007370 <UART_SetConfig+0x278>
 8007358:	2300      	movs	r3, #0
 800735a:	76fb      	strb	r3, [r7, #27]
 800735c:	e00d      	b.n	800737a <UART_SetConfig+0x282>
 800735e:	2302      	movs	r3, #2
 8007360:	76fb      	strb	r3, [r7, #27]
 8007362:	e00a      	b.n	800737a <UART_SetConfig+0x282>
 8007364:	2304      	movs	r3, #4
 8007366:	76fb      	strb	r3, [r7, #27]
 8007368:	e007      	b.n	800737a <UART_SetConfig+0x282>
 800736a:	2308      	movs	r3, #8
 800736c:	76fb      	strb	r3, [r7, #27]
 800736e:	e004      	b.n	800737a <UART_SetConfig+0x282>
 8007370:	2310      	movs	r3, #16
 8007372:	76fb      	strb	r3, [r7, #27]
 8007374:	e001      	b.n	800737a <UART_SetConfig+0x282>
 8007376:	2310      	movs	r3, #16
 8007378:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a17      	ldr	r2, [pc, #92]	; (80073dc <UART_SetConfig+0x2e4>)
 8007380:	4293      	cmp	r3, r2
 8007382:	f040 8087 	bne.w	8007494 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007386:	7efb      	ldrb	r3, [r7, #27]
 8007388:	2b08      	cmp	r3, #8
 800738a:	d837      	bhi.n	80073fc <UART_SetConfig+0x304>
 800738c:	a201      	add	r2, pc, #4	; (adr r2, 8007394 <UART_SetConfig+0x29c>)
 800738e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007392:	bf00      	nop
 8007394:	080073b9 	.word	0x080073b9
 8007398:	080073fd 	.word	0x080073fd
 800739c:	080073c1 	.word	0x080073c1
 80073a0:	080073fd 	.word	0x080073fd
 80073a4:	080073c7 	.word	0x080073c7
 80073a8:	080073fd 	.word	0x080073fd
 80073ac:	080073fd 	.word	0x080073fd
 80073b0:	080073fd 	.word	0x080073fd
 80073b4:	080073cf 	.word	0x080073cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073b8:	f7fd fd90 	bl	8004edc <HAL_RCC_GetPCLK1Freq>
 80073bc:	6178      	str	r0, [r7, #20]
        break;
 80073be:	e022      	b.n	8007406 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073c0:	4b0d      	ldr	r3, [pc, #52]	; (80073f8 <UART_SetConfig+0x300>)
 80073c2:	617b      	str	r3, [r7, #20]
        break;
 80073c4:	e01f      	b.n	8007406 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073c6:	f7fd fcf1 	bl	8004dac <HAL_RCC_GetSysClockFreq>
 80073ca:	6178      	str	r0, [r7, #20]
        break;
 80073cc:	e01b      	b.n	8007406 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073d2:	617b      	str	r3, [r7, #20]
        break;
 80073d4:	e017      	b.n	8007406 <UART_SetConfig+0x30e>
 80073d6:	bf00      	nop
 80073d8:	efff69f3 	.word	0xefff69f3
 80073dc:	40008000 	.word	0x40008000
 80073e0:	40013800 	.word	0x40013800
 80073e4:	40021000 	.word	0x40021000
 80073e8:	40004400 	.word	0x40004400
 80073ec:	40004800 	.word	0x40004800
 80073f0:	40004c00 	.word	0x40004c00
 80073f4:	40005000 	.word	0x40005000
 80073f8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80073fc:	2300      	movs	r3, #0
 80073fe:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	76bb      	strb	r3, [r7, #26]
        break;
 8007404:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	2b00      	cmp	r3, #0
 800740a:	f000 80f1 	beq.w	80075f0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	685a      	ldr	r2, [r3, #4]
 8007412:	4613      	mov	r3, r2
 8007414:	005b      	lsls	r3, r3, #1
 8007416:	4413      	add	r3, r2
 8007418:	697a      	ldr	r2, [r7, #20]
 800741a:	429a      	cmp	r2, r3
 800741c:	d305      	bcc.n	800742a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007424:	697a      	ldr	r2, [r7, #20]
 8007426:	429a      	cmp	r2, r3
 8007428:	d902      	bls.n	8007430 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	76bb      	strb	r3, [r7, #26]
 800742e:	e0df      	b.n	80075f0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	4618      	mov	r0, r3
 8007434:	f04f 0100 	mov.w	r1, #0
 8007438:	f04f 0200 	mov.w	r2, #0
 800743c:	f04f 0300 	mov.w	r3, #0
 8007440:	020b      	lsls	r3, r1, #8
 8007442:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007446:	0202      	lsls	r2, r0, #8
 8007448:	6879      	ldr	r1, [r7, #4]
 800744a:	6849      	ldr	r1, [r1, #4]
 800744c:	0849      	lsrs	r1, r1, #1
 800744e:	4608      	mov	r0, r1
 8007450:	f04f 0100 	mov.w	r1, #0
 8007454:	1814      	adds	r4, r2, r0
 8007456:	eb43 0501 	adc.w	r5, r3, r1
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	461a      	mov	r2, r3
 8007460:	f04f 0300 	mov.w	r3, #0
 8007464:	4620      	mov	r0, r4
 8007466:	4629      	mov	r1, r5
 8007468:	f7f9 fb9e 	bl	8000ba8 <__aeabi_uldivmod>
 800746c:	4602      	mov	r2, r0
 800746e:	460b      	mov	r3, r1
 8007470:	4613      	mov	r3, r2
 8007472:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800747a:	d308      	bcc.n	800748e <UART_SetConfig+0x396>
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007482:	d204      	bcs.n	800748e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	693a      	ldr	r2, [r7, #16]
 800748a:	60da      	str	r2, [r3, #12]
 800748c:	e0b0      	b.n	80075f0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	76bb      	strb	r3, [r7, #26]
 8007492:	e0ad      	b.n	80075f0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	69db      	ldr	r3, [r3, #28]
 8007498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800749c:	d15b      	bne.n	8007556 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800749e:	7efb      	ldrb	r3, [r7, #27]
 80074a0:	2b08      	cmp	r3, #8
 80074a2:	d828      	bhi.n	80074f6 <UART_SetConfig+0x3fe>
 80074a4:	a201      	add	r2, pc, #4	; (adr r2, 80074ac <UART_SetConfig+0x3b4>)
 80074a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074aa:	bf00      	nop
 80074ac:	080074d1 	.word	0x080074d1
 80074b0:	080074d9 	.word	0x080074d9
 80074b4:	080074e1 	.word	0x080074e1
 80074b8:	080074f7 	.word	0x080074f7
 80074bc:	080074e7 	.word	0x080074e7
 80074c0:	080074f7 	.word	0x080074f7
 80074c4:	080074f7 	.word	0x080074f7
 80074c8:	080074f7 	.word	0x080074f7
 80074cc:	080074ef 	.word	0x080074ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074d0:	f7fd fd04 	bl	8004edc <HAL_RCC_GetPCLK1Freq>
 80074d4:	6178      	str	r0, [r7, #20]
        break;
 80074d6:	e013      	b.n	8007500 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074d8:	f7fd fd16 	bl	8004f08 <HAL_RCC_GetPCLK2Freq>
 80074dc:	6178      	str	r0, [r7, #20]
        break;
 80074de:	e00f      	b.n	8007500 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074e0:	4b49      	ldr	r3, [pc, #292]	; (8007608 <UART_SetConfig+0x510>)
 80074e2:	617b      	str	r3, [r7, #20]
        break;
 80074e4:	e00c      	b.n	8007500 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074e6:	f7fd fc61 	bl	8004dac <HAL_RCC_GetSysClockFreq>
 80074ea:	6178      	str	r0, [r7, #20]
        break;
 80074ec:	e008      	b.n	8007500 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074f2:	617b      	str	r3, [r7, #20]
        break;
 80074f4:	e004      	b.n	8007500 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80074f6:	2300      	movs	r3, #0
 80074f8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	76bb      	strb	r3, [r7, #26]
        break;
 80074fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d074      	beq.n	80075f0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	005a      	lsls	r2, r3, #1
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	085b      	lsrs	r3, r3, #1
 8007510:	441a      	add	r2, r3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	fbb2 f3f3 	udiv	r3, r2, r3
 800751a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	2b0f      	cmp	r3, #15
 8007520:	d916      	bls.n	8007550 <UART_SetConfig+0x458>
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007528:	d212      	bcs.n	8007550 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	b29b      	uxth	r3, r3
 800752e:	f023 030f 	bic.w	r3, r3, #15
 8007532:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	085b      	lsrs	r3, r3, #1
 8007538:	b29b      	uxth	r3, r3
 800753a:	f003 0307 	and.w	r3, r3, #7
 800753e:	b29a      	uxth	r2, r3
 8007540:	89fb      	ldrh	r3, [r7, #14]
 8007542:	4313      	orrs	r3, r2
 8007544:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	89fa      	ldrh	r2, [r7, #14]
 800754c:	60da      	str	r2, [r3, #12]
 800754e:	e04f      	b.n	80075f0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	76bb      	strb	r3, [r7, #26]
 8007554:	e04c      	b.n	80075f0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007556:	7efb      	ldrb	r3, [r7, #27]
 8007558:	2b08      	cmp	r3, #8
 800755a:	d828      	bhi.n	80075ae <UART_SetConfig+0x4b6>
 800755c:	a201      	add	r2, pc, #4	; (adr r2, 8007564 <UART_SetConfig+0x46c>)
 800755e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007562:	bf00      	nop
 8007564:	08007589 	.word	0x08007589
 8007568:	08007591 	.word	0x08007591
 800756c:	08007599 	.word	0x08007599
 8007570:	080075af 	.word	0x080075af
 8007574:	0800759f 	.word	0x0800759f
 8007578:	080075af 	.word	0x080075af
 800757c:	080075af 	.word	0x080075af
 8007580:	080075af 	.word	0x080075af
 8007584:	080075a7 	.word	0x080075a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007588:	f7fd fca8 	bl	8004edc <HAL_RCC_GetPCLK1Freq>
 800758c:	6178      	str	r0, [r7, #20]
        break;
 800758e:	e013      	b.n	80075b8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007590:	f7fd fcba 	bl	8004f08 <HAL_RCC_GetPCLK2Freq>
 8007594:	6178      	str	r0, [r7, #20]
        break;
 8007596:	e00f      	b.n	80075b8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007598:	4b1b      	ldr	r3, [pc, #108]	; (8007608 <UART_SetConfig+0x510>)
 800759a:	617b      	str	r3, [r7, #20]
        break;
 800759c:	e00c      	b.n	80075b8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800759e:	f7fd fc05 	bl	8004dac <HAL_RCC_GetSysClockFreq>
 80075a2:	6178      	str	r0, [r7, #20]
        break;
 80075a4:	e008      	b.n	80075b8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075aa:	617b      	str	r3, [r7, #20]
        break;
 80075ac:	e004      	b.n	80075b8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80075ae:	2300      	movs	r3, #0
 80075b0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	76bb      	strb	r3, [r7, #26]
        break;
 80075b6:	bf00      	nop
    }

    if (pclk != 0U)
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d018      	beq.n	80075f0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	085a      	lsrs	r2, r3, #1
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	441a      	add	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80075d0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	2b0f      	cmp	r3, #15
 80075d6:	d909      	bls.n	80075ec <UART_SetConfig+0x4f4>
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075de:	d205      	bcs.n	80075ec <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	60da      	str	r2, [r3, #12]
 80075ea:	e001      	b.n	80075f0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80075fc:	7ebb      	ldrb	r3, [r7, #26]
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3720      	adds	r7, #32
 8007602:	46bd      	mov	sp, r7
 8007604:	bdb0      	pop	{r4, r5, r7, pc}
 8007606:	bf00      	nop
 8007608:	00f42400 	.word	0x00f42400

0800760c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007618:	f003 0301 	and.w	r3, r3, #1
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00a      	beq.n	8007636 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	430a      	orrs	r2, r1
 8007634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763a:	f003 0302 	and.w	r3, r3, #2
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00a      	beq.n	8007658 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	430a      	orrs	r2, r1
 8007656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765c:	f003 0304 	and.w	r3, r3, #4
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00a      	beq.n	800767a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	430a      	orrs	r2, r1
 8007678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767e:	f003 0308 	and.w	r3, r3, #8
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00a      	beq.n	800769c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	430a      	orrs	r2, r1
 800769a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a0:	f003 0310 	and.w	r3, r3, #16
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d00a      	beq.n	80076be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	430a      	orrs	r2, r1
 80076bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c2:	f003 0320 	and.w	r3, r3, #32
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00a      	beq.n	80076e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	430a      	orrs	r2, r1
 80076de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d01a      	beq.n	8007722 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	430a      	orrs	r2, r1
 8007700:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007706:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800770a:	d10a      	bne.n	8007722 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	430a      	orrs	r2, r1
 8007720:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00a      	beq.n	8007744 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	430a      	orrs	r2, r1
 8007742:	605a      	str	r2, [r3, #4]
  }
}
 8007744:	bf00      	nop
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b086      	sub	sp, #24
 8007754:	af02      	add	r7, sp, #8
 8007756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007760:	f7fc fa40 	bl	8003be4 <HAL_GetTick>
 8007764:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 0308 	and.w	r3, r3, #8
 8007770:	2b08      	cmp	r3, #8
 8007772:	d10e      	bne.n	8007792 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007774:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007778:	9300      	str	r3, [sp, #0]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f82d 	bl	80077e2 <UART_WaitOnFlagUntilTimeout>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d001      	beq.n	8007792 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800778e:	2303      	movs	r3, #3
 8007790:	e023      	b.n	80077da <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f003 0304 	and.w	r3, r3, #4
 800779c:	2b04      	cmp	r3, #4
 800779e:	d10e      	bne.n	80077be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077a4:	9300      	str	r3, [sp, #0]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 f817 	bl	80077e2 <UART_WaitOnFlagUntilTimeout>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d001      	beq.n	80077be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077ba:	2303      	movs	r3, #3
 80077bc:	e00d      	b.n	80077da <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2220      	movs	r2, #32
 80077c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2220      	movs	r2, #32
 80077c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3710      	adds	r7, #16
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b09c      	sub	sp, #112	; 0x70
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	60f8      	str	r0, [r7, #12]
 80077ea:	60b9      	str	r1, [r7, #8]
 80077ec:	603b      	str	r3, [r7, #0]
 80077ee:	4613      	mov	r3, r2
 80077f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077f2:	e0a5      	b.n	8007940 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077fa:	f000 80a1 	beq.w	8007940 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077fe:	f7fc f9f1 	bl	8003be4 <HAL_GetTick>
 8007802:	4602      	mov	r2, r0
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	1ad3      	subs	r3, r2, r3
 8007808:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800780a:	429a      	cmp	r2, r3
 800780c:	d302      	bcc.n	8007814 <UART_WaitOnFlagUntilTimeout+0x32>
 800780e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007810:	2b00      	cmp	r3, #0
 8007812:	d13e      	bne.n	8007892 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800781c:	e853 3f00 	ldrex	r3, [r3]
 8007820:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007824:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007828:	667b      	str	r3, [r7, #100]	; 0x64
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	461a      	mov	r2, r3
 8007830:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007832:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007834:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007836:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007838:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800783a:	e841 2300 	strex	r3, r2, [r1]
 800783e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1e6      	bne.n	8007814 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	3308      	adds	r3, #8
 800784c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007850:	e853 3f00 	ldrex	r3, [r3]
 8007854:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007858:	f023 0301 	bic.w	r3, r3, #1
 800785c:	663b      	str	r3, [r7, #96]	; 0x60
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	3308      	adds	r3, #8
 8007864:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007866:	64ba      	str	r2, [r7, #72]	; 0x48
 8007868:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800786c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800786e:	e841 2300 	strex	r3, r2, [r1]
 8007872:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007876:	2b00      	cmp	r3, #0
 8007878:	d1e5      	bne.n	8007846 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2220      	movs	r2, #32
 800787e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2220      	movs	r2, #32
 8007884:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2200      	movs	r2, #0
 800788a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800788e:	2303      	movs	r3, #3
 8007890:	e067      	b.n	8007962 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 0304 	and.w	r3, r3, #4
 800789c:	2b00      	cmp	r3, #0
 800789e:	d04f      	beq.n	8007940 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	69db      	ldr	r3, [r3, #28]
 80078a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078ae:	d147      	bne.n	8007940 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078b8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c2:	e853 3f00 	ldrex	r3, [r3]
 80078c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80078ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	461a      	mov	r2, r3
 80078d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078d8:	637b      	str	r3, [r7, #52]	; 0x34
 80078da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078e0:	e841 2300 	strex	r3, r2, [r1]
 80078e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80078e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1e6      	bne.n	80078ba <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3308      	adds	r3, #8
 80078f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	e853 3f00 	ldrex	r3, [r3]
 80078fa:	613b      	str	r3, [r7, #16]
   return(result);
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	f023 0301 	bic.w	r3, r3, #1
 8007902:	66bb      	str	r3, [r7, #104]	; 0x68
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	3308      	adds	r3, #8
 800790a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800790c:	623a      	str	r2, [r7, #32]
 800790e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007910:	69f9      	ldr	r1, [r7, #28]
 8007912:	6a3a      	ldr	r2, [r7, #32]
 8007914:	e841 2300 	strex	r3, r2, [r1]
 8007918:	61bb      	str	r3, [r7, #24]
   return(result);
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d1e5      	bne.n	80078ec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2220      	movs	r2, #32
 8007924:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2220      	movs	r2, #32
 800792a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2220      	movs	r2, #32
 8007930:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800793c:	2303      	movs	r3, #3
 800793e:	e010      	b.n	8007962 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	69da      	ldr	r2, [r3, #28]
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	4013      	ands	r3, r2
 800794a:	68ba      	ldr	r2, [r7, #8]
 800794c:	429a      	cmp	r2, r3
 800794e:	bf0c      	ite	eq
 8007950:	2301      	moveq	r3, #1
 8007952:	2300      	movne	r3, #0
 8007954:	b2db      	uxtb	r3, r3
 8007956:	461a      	mov	r2, r3
 8007958:	79fb      	ldrb	r3, [r7, #7]
 800795a:	429a      	cmp	r2, r3
 800795c:	f43f af4a 	beq.w	80077f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3770      	adds	r7, #112	; 0x70
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800796a:	b480      	push	{r7}
 800796c:	b095      	sub	sp, #84	; 0x54
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800797a:	e853 3f00 	ldrex	r3, [r3]
 800797e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007982:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	461a      	mov	r2, r3
 800798e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007990:	643b      	str	r3, [r7, #64]	; 0x40
 8007992:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007994:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007996:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007998:	e841 2300 	strex	r3, r2, [r1]
 800799c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800799e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d1e6      	bne.n	8007972 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	3308      	adds	r3, #8
 80079aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ac:	6a3b      	ldr	r3, [r7, #32]
 80079ae:	e853 3f00 	ldrex	r3, [r3]
 80079b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	f023 0301 	bic.w	r3, r3, #1
 80079ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	3308      	adds	r3, #8
 80079c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079cc:	e841 2300 	strex	r3, r2, [r1]
 80079d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1e5      	bne.n	80079a4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d118      	bne.n	8007a12 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	e853 3f00 	ldrex	r3, [r3]
 80079ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	f023 0310 	bic.w	r3, r3, #16
 80079f4:	647b      	str	r3, [r7, #68]	; 0x44
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	461a      	mov	r2, r3
 80079fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079fe:	61bb      	str	r3, [r7, #24]
 8007a00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a02:	6979      	ldr	r1, [r7, #20]
 8007a04:	69ba      	ldr	r2, [r7, #24]
 8007a06:	e841 2300 	strex	r3, r2, [r1]
 8007a0a:	613b      	str	r3, [r7, #16]
   return(result);
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d1e6      	bne.n	80079e0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2220      	movs	r2, #32
 8007a16:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007a24:	bf00      	nop
 8007a26:	3754      	adds	r7, #84	; 0x54
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	f7ff fb3c 	bl	80070cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a54:	bf00      	nop
 8007a56:	3710      	adds	r7, #16
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b088      	sub	sp, #32
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	e853 3f00 	ldrex	r3, [r3]
 8007a70:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a78:	61fb      	str	r3, [r7, #28]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	461a      	mov	r2, r3
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	61bb      	str	r3, [r7, #24]
 8007a84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a86:	6979      	ldr	r1, [r7, #20]
 8007a88:	69ba      	ldr	r2, [r7, #24]
 8007a8a:	e841 2300 	strex	r3, r2, [r1]
 8007a8e:	613b      	str	r3, [r7, #16]
   return(result);
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d1e6      	bne.n	8007a64 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2220      	movs	r2, #32
 8007a9a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f7ff fb08 	bl	80070b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007aa8:	bf00      	nop
 8007aaa:	3720      	adds	r7, #32
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007ab8:	bf00      	nop
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <__errno>:
 8007ac4:	4b01      	ldr	r3, [pc, #4]	; (8007acc <__errno+0x8>)
 8007ac6:	6818      	ldr	r0, [r3, #0]
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	20000034 	.word	0x20000034

08007ad0 <__libc_init_array>:
 8007ad0:	b570      	push	{r4, r5, r6, lr}
 8007ad2:	4d0d      	ldr	r5, [pc, #52]	; (8007b08 <__libc_init_array+0x38>)
 8007ad4:	4c0d      	ldr	r4, [pc, #52]	; (8007b0c <__libc_init_array+0x3c>)
 8007ad6:	1b64      	subs	r4, r4, r5
 8007ad8:	10a4      	asrs	r4, r4, #2
 8007ada:	2600      	movs	r6, #0
 8007adc:	42a6      	cmp	r6, r4
 8007ade:	d109      	bne.n	8007af4 <__libc_init_array+0x24>
 8007ae0:	4d0b      	ldr	r5, [pc, #44]	; (8007b10 <__libc_init_array+0x40>)
 8007ae2:	4c0c      	ldr	r4, [pc, #48]	; (8007b14 <__libc_init_array+0x44>)
 8007ae4:	f002 fddc 	bl	800a6a0 <_init>
 8007ae8:	1b64      	subs	r4, r4, r5
 8007aea:	10a4      	asrs	r4, r4, #2
 8007aec:	2600      	movs	r6, #0
 8007aee:	42a6      	cmp	r6, r4
 8007af0:	d105      	bne.n	8007afe <__libc_init_array+0x2e>
 8007af2:	bd70      	pop	{r4, r5, r6, pc}
 8007af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007af8:	4798      	blx	r3
 8007afa:	3601      	adds	r6, #1
 8007afc:	e7ee      	b.n	8007adc <__libc_init_array+0xc>
 8007afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b02:	4798      	blx	r3
 8007b04:	3601      	adds	r6, #1
 8007b06:	e7f2      	b.n	8007aee <__libc_init_array+0x1e>
 8007b08:	0800afc4 	.word	0x0800afc4
 8007b0c:	0800afc4 	.word	0x0800afc4
 8007b10:	0800afc4 	.word	0x0800afc4
 8007b14:	0800afc8 	.word	0x0800afc8

08007b18 <malloc>:
 8007b18:	4b02      	ldr	r3, [pc, #8]	; (8007b24 <malloc+0xc>)
 8007b1a:	4601      	mov	r1, r0
 8007b1c:	6818      	ldr	r0, [r3, #0]
 8007b1e:	f000 b869 	b.w	8007bf4 <_malloc_r>
 8007b22:	bf00      	nop
 8007b24:	20000034 	.word	0x20000034

08007b28 <memcpy>:
 8007b28:	440a      	add	r2, r1
 8007b2a:	4291      	cmp	r1, r2
 8007b2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b30:	d100      	bne.n	8007b34 <memcpy+0xc>
 8007b32:	4770      	bx	lr
 8007b34:	b510      	push	{r4, lr}
 8007b36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b3e:	4291      	cmp	r1, r2
 8007b40:	d1f9      	bne.n	8007b36 <memcpy+0xe>
 8007b42:	bd10      	pop	{r4, pc}

08007b44 <memset>:
 8007b44:	4402      	add	r2, r0
 8007b46:	4603      	mov	r3, r0
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d100      	bne.n	8007b4e <memset+0xa>
 8007b4c:	4770      	bx	lr
 8007b4e:	f803 1b01 	strb.w	r1, [r3], #1
 8007b52:	e7f9      	b.n	8007b48 <memset+0x4>

08007b54 <_free_r>:
 8007b54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b56:	2900      	cmp	r1, #0
 8007b58:	d048      	beq.n	8007bec <_free_r+0x98>
 8007b5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b5e:	9001      	str	r0, [sp, #4]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f1a1 0404 	sub.w	r4, r1, #4
 8007b66:	bfb8      	it	lt
 8007b68:	18e4      	addlt	r4, r4, r3
 8007b6a:	f001 ff19 	bl	80099a0 <__malloc_lock>
 8007b6e:	4a20      	ldr	r2, [pc, #128]	; (8007bf0 <_free_r+0x9c>)
 8007b70:	9801      	ldr	r0, [sp, #4]
 8007b72:	6813      	ldr	r3, [r2, #0]
 8007b74:	4615      	mov	r5, r2
 8007b76:	b933      	cbnz	r3, 8007b86 <_free_r+0x32>
 8007b78:	6063      	str	r3, [r4, #4]
 8007b7a:	6014      	str	r4, [r2, #0]
 8007b7c:	b003      	add	sp, #12
 8007b7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b82:	f001 bf13 	b.w	80099ac <__malloc_unlock>
 8007b86:	42a3      	cmp	r3, r4
 8007b88:	d90b      	bls.n	8007ba2 <_free_r+0x4e>
 8007b8a:	6821      	ldr	r1, [r4, #0]
 8007b8c:	1862      	adds	r2, r4, r1
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	bf04      	itt	eq
 8007b92:	681a      	ldreq	r2, [r3, #0]
 8007b94:	685b      	ldreq	r3, [r3, #4]
 8007b96:	6063      	str	r3, [r4, #4]
 8007b98:	bf04      	itt	eq
 8007b9a:	1852      	addeq	r2, r2, r1
 8007b9c:	6022      	streq	r2, [r4, #0]
 8007b9e:	602c      	str	r4, [r5, #0]
 8007ba0:	e7ec      	b.n	8007b7c <_free_r+0x28>
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	b10b      	cbz	r3, 8007bac <_free_r+0x58>
 8007ba8:	42a3      	cmp	r3, r4
 8007baa:	d9fa      	bls.n	8007ba2 <_free_r+0x4e>
 8007bac:	6811      	ldr	r1, [r2, #0]
 8007bae:	1855      	adds	r5, r2, r1
 8007bb0:	42a5      	cmp	r5, r4
 8007bb2:	d10b      	bne.n	8007bcc <_free_r+0x78>
 8007bb4:	6824      	ldr	r4, [r4, #0]
 8007bb6:	4421      	add	r1, r4
 8007bb8:	1854      	adds	r4, r2, r1
 8007bba:	42a3      	cmp	r3, r4
 8007bbc:	6011      	str	r1, [r2, #0]
 8007bbe:	d1dd      	bne.n	8007b7c <_free_r+0x28>
 8007bc0:	681c      	ldr	r4, [r3, #0]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	6053      	str	r3, [r2, #4]
 8007bc6:	4421      	add	r1, r4
 8007bc8:	6011      	str	r1, [r2, #0]
 8007bca:	e7d7      	b.n	8007b7c <_free_r+0x28>
 8007bcc:	d902      	bls.n	8007bd4 <_free_r+0x80>
 8007bce:	230c      	movs	r3, #12
 8007bd0:	6003      	str	r3, [r0, #0]
 8007bd2:	e7d3      	b.n	8007b7c <_free_r+0x28>
 8007bd4:	6825      	ldr	r5, [r4, #0]
 8007bd6:	1961      	adds	r1, r4, r5
 8007bd8:	428b      	cmp	r3, r1
 8007bda:	bf04      	itt	eq
 8007bdc:	6819      	ldreq	r1, [r3, #0]
 8007bde:	685b      	ldreq	r3, [r3, #4]
 8007be0:	6063      	str	r3, [r4, #4]
 8007be2:	bf04      	itt	eq
 8007be4:	1949      	addeq	r1, r1, r5
 8007be6:	6021      	streq	r1, [r4, #0]
 8007be8:	6054      	str	r4, [r2, #4]
 8007bea:	e7c7      	b.n	8007b7c <_free_r+0x28>
 8007bec:	b003      	add	sp, #12
 8007bee:	bd30      	pop	{r4, r5, pc}
 8007bf0:	2000030c 	.word	0x2000030c

08007bf4 <_malloc_r>:
 8007bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bf6:	1ccd      	adds	r5, r1, #3
 8007bf8:	f025 0503 	bic.w	r5, r5, #3
 8007bfc:	3508      	adds	r5, #8
 8007bfe:	2d0c      	cmp	r5, #12
 8007c00:	bf38      	it	cc
 8007c02:	250c      	movcc	r5, #12
 8007c04:	2d00      	cmp	r5, #0
 8007c06:	4606      	mov	r6, r0
 8007c08:	db01      	blt.n	8007c0e <_malloc_r+0x1a>
 8007c0a:	42a9      	cmp	r1, r5
 8007c0c:	d903      	bls.n	8007c16 <_malloc_r+0x22>
 8007c0e:	230c      	movs	r3, #12
 8007c10:	6033      	str	r3, [r6, #0]
 8007c12:	2000      	movs	r0, #0
 8007c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c16:	f001 fec3 	bl	80099a0 <__malloc_lock>
 8007c1a:	4921      	ldr	r1, [pc, #132]	; (8007ca0 <_malloc_r+0xac>)
 8007c1c:	680a      	ldr	r2, [r1, #0]
 8007c1e:	4614      	mov	r4, r2
 8007c20:	b99c      	cbnz	r4, 8007c4a <_malloc_r+0x56>
 8007c22:	4f20      	ldr	r7, [pc, #128]	; (8007ca4 <_malloc_r+0xb0>)
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	b923      	cbnz	r3, 8007c32 <_malloc_r+0x3e>
 8007c28:	4621      	mov	r1, r4
 8007c2a:	4630      	mov	r0, r6
 8007c2c:	f000 fd4a 	bl	80086c4 <_sbrk_r>
 8007c30:	6038      	str	r0, [r7, #0]
 8007c32:	4629      	mov	r1, r5
 8007c34:	4630      	mov	r0, r6
 8007c36:	f000 fd45 	bl	80086c4 <_sbrk_r>
 8007c3a:	1c43      	adds	r3, r0, #1
 8007c3c:	d123      	bne.n	8007c86 <_malloc_r+0x92>
 8007c3e:	230c      	movs	r3, #12
 8007c40:	6033      	str	r3, [r6, #0]
 8007c42:	4630      	mov	r0, r6
 8007c44:	f001 feb2 	bl	80099ac <__malloc_unlock>
 8007c48:	e7e3      	b.n	8007c12 <_malloc_r+0x1e>
 8007c4a:	6823      	ldr	r3, [r4, #0]
 8007c4c:	1b5b      	subs	r3, r3, r5
 8007c4e:	d417      	bmi.n	8007c80 <_malloc_r+0x8c>
 8007c50:	2b0b      	cmp	r3, #11
 8007c52:	d903      	bls.n	8007c5c <_malloc_r+0x68>
 8007c54:	6023      	str	r3, [r4, #0]
 8007c56:	441c      	add	r4, r3
 8007c58:	6025      	str	r5, [r4, #0]
 8007c5a:	e004      	b.n	8007c66 <_malloc_r+0x72>
 8007c5c:	6863      	ldr	r3, [r4, #4]
 8007c5e:	42a2      	cmp	r2, r4
 8007c60:	bf0c      	ite	eq
 8007c62:	600b      	streq	r3, [r1, #0]
 8007c64:	6053      	strne	r3, [r2, #4]
 8007c66:	4630      	mov	r0, r6
 8007c68:	f001 fea0 	bl	80099ac <__malloc_unlock>
 8007c6c:	f104 000b 	add.w	r0, r4, #11
 8007c70:	1d23      	adds	r3, r4, #4
 8007c72:	f020 0007 	bic.w	r0, r0, #7
 8007c76:	1ac2      	subs	r2, r0, r3
 8007c78:	d0cc      	beq.n	8007c14 <_malloc_r+0x20>
 8007c7a:	1a1b      	subs	r3, r3, r0
 8007c7c:	50a3      	str	r3, [r4, r2]
 8007c7e:	e7c9      	b.n	8007c14 <_malloc_r+0x20>
 8007c80:	4622      	mov	r2, r4
 8007c82:	6864      	ldr	r4, [r4, #4]
 8007c84:	e7cc      	b.n	8007c20 <_malloc_r+0x2c>
 8007c86:	1cc4      	adds	r4, r0, #3
 8007c88:	f024 0403 	bic.w	r4, r4, #3
 8007c8c:	42a0      	cmp	r0, r4
 8007c8e:	d0e3      	beq.n	8007c58 <_malloc_r+0x64>
 8007c90:	1a21      	subs	r1, r4, r0
 8007c92:	4630      	mov	r0, r6
 8007c94:	f000 fd16 	bl	80086c4 <_sbrk_r>
 8007c98:	3001      	adds	r0, #1
 8007c9a:	d1dd      	bne.n	8007c58 <_malloc_r+0x64>
 8007c9c:	e7cf      	b.n	8007c3e <_malloc_r+0x4a>
 8007c9e:	bf00      	nop
 8007ca0:	2000030c 	.word	0x2000030c
 8007ca4:	20000310 	.word	0x20000310

08007ca8 <__cvt>:
 8007ca8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cac:	ec55 4b10 	vmov	r4, r5, d0
 8007cb0:	2d00      	cmp	r5, #0
 8007cb2:	460e      	mov	r6, r1
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	462b      	mov	r3, r5
 8007cb8:	bfbb      	ittet	lt
 8007cba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007cbe:	461d      	movlt	r5, r3
 8007cc0:	2300      	movge	r3, #0
 8007cc2:	232d      	movlt	r3, #45	; 0x2d
 8007cc4:	700b      	strb	r3, [r1, #0]
 8007cc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cc8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007ccc:	4691      	mov	r9, r2
 8007cce:	f023 0820 	bic.w	r8, r3, #32
 8007cd2:	bfbc      	itt	lt
 8007cd4:	4622      	movlt	r2, r4
 8007cd6:	4614      	movlt	r4, r2
 8007cd8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007cdc:	d005      	beq.n	8007cea <__cvt+0x42>
 8007cde:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007ce2:	d100      	bne.n	8007ce6 <__cvt+0x3e>
 8007ce4:	3601      	adds	r6, #1
 8007ce6:	2102      	movs	r1, #2
 8007ce8:	e000      	b.n	8007cec <__cvt+0x44>
 8007cea:	2103      	movs	r1, #3
 8007cec:	ab03      	add	r3, sp, #12
 8007cee:	9301      	str	r3, [sp, #4]
 8007cf0:	ab02      	add	r3, sp, #8
 8007cf2:	9300      	str	r3, [sp, #0]
 8007cf4:	ec45 4b10 	vmov	d0, r4, r5
 8007cf8:	4653      	mov	r3, sl
 8007cfa:	4632      	mov	r2, r6
 8007cfc:	f000 fe40 	bl	8008980 <_dtoa_r>
 8007d00:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007d04:	4607      	mov	r7, r0
 8007d06:	d102      	bne.n	8007d0e <__cvt+0x66>
 8007d08:	f019 0f01 	tst.w	r9, #1
 8007d0c:	d022      	beq.n	8007d54 <__cvt+0xac>
 8007d0e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007d12:	eb07 0906 	add.w	r9, r7, r6
 8007d16:	d110      	bne.n	8007d3a <__cvt+0x92>
 8007d18:	783b      	ldrb	r3, [r7, #0]
 8007d1a:	2b30      	cmp	r3, #48	; 0x30
 8007d1c:	d10a      	bne.n	8007d34 <__cvt+0x8c>
 8007d1e:	2200      	movs	r2, #0
 8007d20:	2300      	movs	r3, #0
 8007d22:	4620      	mov	r0, r4
 8007d24:	4629      	mov	r1, r5
 8007d26:	f7f8 fecf 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d2a:	b918      	cbnz	r0, 8007d34 <__cvt+0x8c>
 8007d2c:	f1c6 0601 	rsb	r6, r6, #1
 8007d30:	f8ca 6000 	str.w	r6, [sl]
 8007d34:	f8da 3000 	ldr.w	r3, [sl]
 8007d38:	4499      	add	r9, r3
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	4620      	mov	r0, r4
 8007d40:	4629      	mov	r1, r5
 8007d42:	f7f8 fec1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d46:	b108      	cbz	r0, 8007d4c <__cvt+0xa4>
 8007d48:	f8cd 900c 	str.w	r9, [sp, #12]
 8007d4c:	2230      	movs	r2, #48	; 0x30
 8007d4e:	9b03      	ldr	r3, [sp, #12]
 8007d50:	454b      	cmp	r3, r9
 8007d52:	d307      	bcc.n	8007d64 <__cvt+0xbc>
 8007d54:	9b03      	ldr	r3, [sp, #12]
 8007d56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d58:	1bdb      	subs	r3, r3, r7
 8007d5a:	4638      	mov	r0, r7
 8007d5c:	6013      	str	r3, [r2, #0]
 8007d5e:	b004      	add	sp, #16
 8007d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d64:	1c59      	adds	r1, r3, #1
 8007d66:	9103      	str	r1, [sp, #12]
 8007d68:	701a      	strb	r2, [r3, #0]
 8007d6a:	e7f0      	b.n	8007d4e <__cvt+0xa6>

08007d6c <__exponent>:
 8007d6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2900      	cmp	r1, #0
 8007d72:	bfb8      	it	lt
 8007d74:	4249      	neglt	r1, r1
 8007d76:	f803 2b02 	strb.w	r2, [r3], #2
 8007d7a:	bfb4      	ite	lt
 8007d7c:	222d      	movlt	r2, #45	; 0x2d
 8007d7e:	222b      	movge	r2, #43	; 0x2b
 8007d80:	2909      	cmp	r1, #9
 8007d82:	7042      	strb	r2, [r0, #1]
 8007d84:	dd2a      	ble.n	8007ddc <__exponent+0x70>
 8007d86:	f10d 0407 	add.w	r4, sp, #7
 8007d8a:	46a4      	mov	ip, r4
 8007d8c:	270a      	movs	r7, #10
 8007d8e:	46a6      	mov	lr, r4
 8007d90:	460a      	mov	r2, r1
 8007d92:	fb91 f6f7 	sdiv	r6, r1, r7
 8007d96:	fb07 1516 	mls	r5, r7, r6, r1
 8007d9a:	3530      	adds	r5, #48	; 0x30
 8007d9c:	2a63      	cmp	r2, #99	; 0x63
 8007d9e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007da2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007da6:	4631      	mov	r1, r6
 8007da8:	dcf1      	bgt.n	8007d8e <__exponent+0x22>
 8007daa:	3130      	adds	r1, #48	; 0x30
 8007dac:	f1ae 0502 	sub.w	r5, lr, #2
 8007db0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007db4:	1c44      	adds	r4, r0, #1
 8007db6:	4629      	mov	r1, r5
 8007db8:	4561      	cmp	r1, ip
 8007dba:	d30a      	bcc.n	8007dd2 <__exponent+0x66>
 8007dbc:	f10d 0209 	add.w	r2, sp, #9
 8007dc0:	eba2 020e 	sub.w	r2, r2, lr
 8007dc4:	4565      	cmp	r5, ip
 8007dc6:	bf88      	it	hi
 8007dc8:	2200      	movhi	r2, #0
 8007dca:	4413      	add	r3, r2
 8007dcc:	1a18      	subs	r0, r3, r0
 8007dce:	b003      	add	sp, #12
 8007dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dd6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007dda:	e7ed      	b.n	8007db8 <__exponent+0x4c>
 8007ddc:	2330      	movs	r3, #48	; 0x30
 8007dde:	3130      	adds	r1, #48	; 0x30
 8007de0:	7083      	strb	r3, [r0, #2]
 8007de2:	70c1      	strb	r1, [r0, #3]
 8007de4:	1d03      	adds	r3, r0, #4
 8007de6:	e7f1      	b.n	8007dcc <__exponent+0x60>

08007de8 <_printf_float>:
 8007de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dec:	ed2d 8b02 	vpush	{d8}
 8007df0:	b08d      	sub	sp, #52	; 0x34
 8007df2:	460c      	mov	r4, r1
 8007df4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007df8:	4616      	mov	r6, r2
 8007dfa:	461f      	mov	r7, r3
 8007dfc:	4605      	mov	r5, r0
 8007dfe:	f001 fd63 	bl	80098c8 <_localeconv_r>
 8007e02:	f8d0 a000 	ldr.w	sl, [r0]
 8007e06:	4650      	mov	r0, sl
 8007e08:	f7f8 f9e2 	bl	80001d0 <strlen>
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	930a      	str	r3, [sp, #40]	; 0x28
 8007e10:	6823      	ldr	r3, [r4, #0]
 8007e12:	9305      	str	r3, [sp, #20]
 8007e14:	f8d8 3000 	ldr.w	r3, [r8]
 8007e18:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007e1c:	3307      	adds	r3, #7
 8007e1e:	f023 0307 	bic.w	r3, r3, #7
 8007e22:	f103 0208 	add.w	r2, r3, #8
 8007e26:	f8c8 2000 	str.w	r2, [r8]
 8007e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007e32:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007e36:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007e3a:	9307      	str	r3, [sp, #28]
 8007e3c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007e40:	ee08 0a10 	vmov	s16, r0
 8007e44:	4b9f      	ldr	r3, [pc, #636]	; (80080c4 <_printf_float+0x2dc>)
 8007e46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e4e:	f7f8 fe6d 	bl	8000b2c <__aeabi_dcmpun>
 8007e52:	bb88      	cbnz	r0, 8007eb8 <_printf_float+0xd0>
 8007e54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e58:	4b9a      	ldr	r3, [pc, #616]	; (80080c4 <_printf_float+0x2dc>)
 8007e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e5e:	f7f8 fe47 	bl	8000af0 <__aeabi_dcmple>
 8007e62:	bb48      	cbnz	r0, 8007eb8 <_printf_float+0xd0>
 8007e64:	2200      	movs	r2, #0
 8007e66:	2300      	movs	r3, #0
 8007e68:	4640      	mov	r0, r8
 8007e6a:	4649      	mov	r1, r9
 8007e6c:	f7f8 fe36 	bl	8000adc <__aeabi_dcmplt>
 8007e70:	b110      	cbz	r0, 8007e78 <_printf_float+0x90>
 8007e72:	232d      	movs	r3, #45	; 0x2d
 8007e74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e78:	4b93      	ldr	r3, [pc, #588]	; (80080c8 <_printf_float+0x2e0>)
 8007e7a:	4894      	ldr	r0, [pc, #592]	; (80080cc <_printf_float+0x2e4>)
 8007e7c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007e80:	bf94      	ite	ls
 8007e82:	4698      	movls	r8, r3
 8007e84:	4680      	movhi	r8, r0
 8007e86:	2303      	movs	r3, #3
 8007e88:	6123      	str	r3, [r4, #16]
 8007e8a:	9b05      	ldr	r3, [sp, #20]
 8007e8c:	f023 0204 	bic.w	r2, r3, #4
 8007e90:	6022      	str	r2, [r4, #0]
 8007e92:	f04f 0900 	mov.w	r9, #0
 8007e96:	9700      	str	r7, [sp, #0]
 8007e98:	4633      	mov	r3, r6
 8007e9a:	aa0b      	add	r2, sp, #44	; 0x2c
 8007e9c:	4621      	mov	r1, r4
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	f000 f9d8 	bl	8008254 <_printf_common>
 8007ea4:	3001      	adds	r0, #1
 8007ea6:	f040 8090 	bne.w	8007fca <_printf_float+0x1e2>
 8007eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8007eae:	b00d      	add	sp, #52	; 0x34
 8007eb0:	ecbd 8b02 	vpop	{d8}
 8007eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eb8:	4642      	mov	r2, r8
 8007eba:	464b      	mov	r3, r9
 8007ebc:	4640      	mov	r0, r8
 8007ebe:	4649      	mov	r1, r9
 8007ec0:	f7f8 fe34 	bl	8000b2c <__aeabi_dcmpun>
 8007ec4:	b140      	cbz	r0, 8007ed8 <_printf_float+0xf0>
 8007ec6:	464b      	mov	r3, r9
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	bfbc      	itt	lt
 8007ecc:	232d      	movlt	r3, #45	; 0x2d
 8007ece:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007ed2:	487f      	ldr	r0, [pc, #508]	; (80080d0 <_printf_float+0x2e8>)
 8007ed4:	4b7f      	ldr	r3, [pc, #508]	; (80080d4 <_printf_float+0x2ec>)
 8007ed6:	e7d1      	b.n	8007e7c <_printf_float+0x94>
 8007ed8:	6863      	ldr	r3, [r4, #4]
 8007eda:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007ede:	9206      	str	r2, [sp, #24]
 8007ee0:	1c5a      	adds	r2, r3, #1
 8007ee2:	d13f      	bne.n	8007f64 <_printf_float+0x17c>
 8007ee4:	2306      	movs	r3, #6
 8007ee6:	6063      	str	r3, [r4, #4]
 8007ee8:	9b05      	ldr	r3, [sp, #20]
 8007eea:	6861      	ldr	r1, [r4, #4]
 8007eec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	9303      	str	r3, [sp, #12]
 8007ef4:	ab0a      	add	r3, sp, #40	; 0x28
 8007ef6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007efa:	ab09      	add	r3, sp, #36	; 0x24
 8007efc:	ec49 8b10 	vmov	d0, r8, r9
 8007f00:	9300      	str	r3, [sp, #0]
 8007f02:	6022      	str	r2, [r4, #0]
 8007f04:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007f08:	4628      	mov	r0, r5
 8007f0a:	f7ff fecd 	bl	8007ca8 <__cvt>
 8007f0e:	9b06      	ldr	r3, [sp, #24]
 8007f10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f12:	2b47      	cmp	r3, #71	; 0x47
 8007f14:	4680      	mov	r8, r0
 8007f16:	d108      	bne.n	8007f2a <_printf_float+0x142>
 8007f18:	1cc8      	adds	r0, r1, #3
 8007f1a:	db02      	blt.n	8007f22 <_printf_float+0x13a>
 8007f1c:	6863      	ldr	r3, [r4, #4]
 8007f1e:	4299      	cmp	r1, r3
 8007f20:	dd41      	ble.n	8007fa6 <_printf_float+0x1be>
 8007f22:	f1ab 0b02 	sub.w	fp, fp, #2
 8007f26:	fa5f fb8b 	uxtb.w	fp, fp
 8007f2a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007f2e:	d820      	bhi.n	8007f72 <_printf_float+0x18a>
 8007f30:	3901      	subs	r1, #1
 8007f32:	465a      	mov	r2, fp
 8007f34:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007f38:	9109      	str	r1, [sp, #36]	; 0x24
 8007f3a:	f7ff ff17 	bl	8007d6c <__exponent>
 8007f3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f40:	1813      	adds	r3, r2, r0
 8007f42:	2a01      	cmp	r2, #1
 8007f44:	4681      	mov	r9, r0
 8007f46:	6123      	str	r3, [r4, #16]
 8007f48:	dc02      	bgt.n	8007f50 <_printf_float+0x168>
 8007f4a:	6822      	ldr	r2, [r4, #0]
 8007f4c:	07d2      	lsls	r2, r2, #31
 8007f4e:	d501      	bpl.n	8007f54 <_printf_float+0x16c>
 8007f50:	3301      	adds	r3, #1
 8007f52:	6123      	str	r3, [r4, #16]
 8007f54:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d09c      	beq.n	8007e96 <_printf_float+0xae>
 8007f5c:	232d      	movs	r3, #45	; 0x2d
 8007f5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f62:	e798      	b.n	8007e96 <_printf_float+0xae>
 8007f64:	9a06      	ldr	r2, [sp, #24]
 8007f66:	2a47      	cmp	r2, #71	; 0x47
 8007f68:	d1be      	bne.n	8007ee8 <_printf_float+0x100>
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1bc      	bne.n	8007ee8 <_printf_float+0x100>
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e7b9      	b.n	8007ee6 <_printf_float+0xfe>
 8007f72:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007f76:	d118      	bne.n	8007faa <_printf_float+0x1c2>
 8007f78:	2900      	cmp	r1, #0
 8007f7a:	6863      	ldr	r3, [r4, #4]
 8007f7c:	dd0b      	ble.n	8007f96 <_printf_float+0x1ae>
 8007f7e:	6121      	str	r1, [r4, #16]
 8007f80:	b913      	cbnz	r3, 8007f88 <_printf_float+0x1a0>
 8007f82:	6822      	ldr	r2, [r4, #0]
 8007f84:	07d0      	lsls	r0, r2, #31
 8007f86:	d502      	bpl.n	8007f8e <_printf_float+0x1a6>
 8007f88:	3301      	adds	r3, #1
 8007f8a:	440b      	add	r3, r1
 8007f8c:	6123      	str	r3, [r4, #16]
 8007f8e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007f90:	f04f 0900 	mov.w	r9, #0
 8007f94:	e7de      	b.n	8007f54 <_printf_float+0x16c>
 8007f96:	b913      	cbnz	r3, 8007f9e <_printf_float+0x1b6>
 8007f98:	6822      	ldr	r2, [r4, #0]
 8007f9a:	07d2      	lsls	r2, r2, #31
 8007f9c:	d501      	bpl.n	8007fa2 <_printf_float+0x1ba>
 8007f9e:	3302      	adds	r3, #2
 8007fa0:	e7f4      	b.n	8007f8c <_printf_float+0x1a4>
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e7f2      	b.n	8007f8c <_printf_float+0x1a4>
 8007fa6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007faa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fac:	4299      	cmp	r1, r3
 8007fae:	db05      	blt.n	8007fbc <_printf_float+0x1d4>
 8007fb0:	6823      	ldr	r3, [r4, #0]
 8007fb2:	6121      	str	r1, [r4, #16]
 8007fb4:	07d8      	lsls	r0, r3, #31
 8007fb6:	d5ea      	bpl.n	8007f8e <_printf_float+0x1a6>
 8007fb8:	1c4b      	adds	r3, r1, #1
 8007fba:	e7e7      	b.n	8007f8c <_printf_float+0x1a4>
 8007fbc:	2900      	cmp	r1, #0
 8007fbe:	bfd4      	ite	le
 8007fc0:	f1c1 0202 	rsble	r2, r1, #2
 8007fc4:	2201      	movgt	r2, #1
 8007fc6:	4413      	add	r3, r2
 8007fc8:	e7e0      	b.n	8007f8c <_printf_float+0x1a4>
 8007fca:	6823      	ldr	r3, [r4, #0]
 8007fcc:	055a      	lsls	r2, r3, #21
 8007fce:	d407      	bmi.n	8007fe0 <_printf_float+0x1f8>
 8007fd0:	6923      	ldr	r3, [r4, #16]
 8007fd2:	4642      	mov	r2, r8
 8007fd4:	4631      	mov	r1, r6
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	47b8      	blx	r7
 8007fda:	3001      	adds	r0, #1
 8007fdc:	d12c      	bne.n	8008038 <_printf_float+0x250>
 8007fde:	e764      	b.n	8007eaa <_printf_float+0xc2>
 8007fe0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007fe4:	f240 80e0 	bls.w	80081a8 <_printf_float+0x3c0>
 8007fe8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007fec:	2200      	movs	r2, #0
 8007fee:	2300      	movs	r3, #0
 8007ff0:	f7f8 fd6a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	d034      	beq.n	8008062 <_printf_float+0x27a>
 8007ff8:	4a37      	ldr	r2, [pc, #220]	; (80080d8 <_printf_float+0x2f0>)
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	4631      	mov	r1, r6
 8007ffe:	4628      	mov	r0, r5
 8008000:	47b8      	blx	r7
 8008002:	3001      	adds	r0, #1
 8008004:	f43f af51 	beq.w	8007eaa <_printf_float+0xc2>
 8008008:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800800c:	429a      	cmp	r2, r3
 800800e:	db02      	blt.n	8008016 <_printf_float+0x22e>
 8008010:	6823      	ldr	r3, [r4, #0]
 8008012:	07d8      	lsls	r0, r3, #31
 8008014:	d510      	bpl.n	8008038 <_printf_float+0x250>
 8008016:	ee18 3a10 	vmov	r3, s16
 800801a:	4652      	mov	r2, sl
 800801c:	4631      	mov	r1, r6
 800801e:	4628      	mov	r0, r5
 8008020:	47b8      	blx	r7
 8008022:	3001      	adds	r0, #1
 8008024:	f43f af41 	beq.w	8007eaa <_printf_float+0xc2>
 8008028:	f04f 0800 	mov.w	r8, #0
 800802c:	f104 091a 	add.w	r9, r4, #26
 8008030:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008032:	3b01      	subs	r3, #1
 8008034:	4543      	cmp	r3, r8
 8008036:	dc09      	bgt.n	800804c <_printf_float+0x264>
 8008038:	6823      	ldr	r3, [r4, #0]
 800803a:	079b      	lsls	r3, r3, #30
 800803c:	f100 8105 	bmi.w	800824a <_printf_float+0x462>
 8008040:	68e0      	ldr	r0, [r4, #12]
 8008042:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008044:	4298      	cmp	r0, r3
 8008046:	bfb8      	it	lt
 8008048:	4618      	movlt	r0, r3
 800804a:	e730      	b.n	8007eae <_printf_float+0xc6>
 800804c:	2301      	movs	r3, #1
 800804e:	464a      	mov	r2, r9
 8008050:	4631      	mov	r1, r6
 8008052:	4628      	mov	r0, r5
 8008054:	47b8      	blx	r7
 8008056:	3001      	adds	r0, #1
 8008058:	f43f af27 	beq.w	8007eaa <_printf_float+0xc2>
 800805c:	f108 0801 	add.w	r8, r8, #1
 8008060:	e7e6      	b.n	8008030 <_printf_float+0x248>
 8008062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008064:	2b00      	cmp	r3, #0
 8008066:	dc39      	bgt.n	80080dc <_printf_float+0x2f4>
 8008068:	4a1b      	ldr	r2, [pc, #108]	; (80080d8 <_printf_float+0x2f0>)
 800806a:	2301      	movs	r3, #1
 800806c:	4631      	mov	r1, r6
 800806e:	4628      	mov	r0, r5
 8008070:	47b8      	blx	r7
 8008072:	3001      	adds	r0, #1
 8008074:	f43f af19 	beq.w	8007eaa <_printf_float+0xc2>
 8008078:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800807c:	4313      	orrs	r3, r2
 800807e:	d102      	bne.n	8008086 <_printf_float+0x29e>
 8008080:	6823      	ldr	r3, [r4, #0]
 8008082:	07d9      	lsls	r1, r3, #31
 8008084:	d5d8      	bpl.n	8008038 <_printf_float+0x250>
 8008086:	ee18 3a10 	vmov	r3, s16
 800808a:	4652      	mov	r2, sl
 800808c:	4631      	mov	r1, r6
 800808e:	4628      	mov	r0, r5
 8008090:	47b8      	blx	r7
 8008092:	3001      	adds	r0, #1
 8008094:	f43f af09 	beq.w	8007eaa <_printf_float+0xc2>
 8008098:	f04f 0900 	mov.w	r9, #0
 800809c:	f104 0a1a 	add.w	sl, r4, #26
 80080a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080a2:	425b      	negs	r3, r3
 80080a4:	454b      	cmp	r3, r9
 80080a6:	dc01      	bgt.n	80080ac <_printf_float+0x2c4>
 80080a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080aa:	e792      	b.n	8007fd2 <_printf_float+0x1ea>
 80080ac:	2301      	movs	r3, #1
 80080ae:	4652      	mov	r2, sl
 80080b0:	4631      	mov	r1, r6
 80080b2:	4628      	mov	r0, r5
 80080b4:	47b8      	blx	r7
 80080b6:	3001      	adds	r0, #1
 80080b8:	f43f aef7 	beq.w	8007eaa <_printf_float+0xc2>
 80080bc:	f109 0901 	add.w	r9, r9, #1
 80080c0:	e7ee      	b.n	80080a0 <_printf_float+0x2b8>
 80080c2:	bf00      	nop
 80080c4:	7fefffff 	.word	0x7fefffff
 80080c8:	0800abdc 	.word	0x0800abdc
 80080cc:	0800abe0 	.word	0x0800abe0
 80080d0:	0800abe8 	.word	0x0800abe8
 80080d4:	0800abe4 	.word	0x0800abe4
 80080d8:	0800abec 	.word	0x0800abec
 80080dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80080e0:	429a      	cmp	r2, r3
 80080e2:	bfa8      	it	ge
 80080e4:	461a      	movge	r2, r3
 80080e6:	2a00      	cmp	r2, #0
 80080e8:	4691      	mov	r9, r2
 80080ea:	dc37      	bgt.n	800815c <_printf_float+0x374>
 80080ec:	f04f 0b00 	mov.w	fp, #0
 80080f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080f4:	f104 021a 	add.w	r2, r4, #26
 80080f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80080fa:	9305      	str	r3, [sp, #20]
 80080fc:	eba3 0309 	sub.w	r3, r3, r9
 8008100:	455b      	cmp	r3, fp
 8008102:	dc33      	bgt.n	800816c <_printf_float+0x384>
 8008104:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008108:	429a      	cmp	r2, r3
 800810a:	db3b      	blt.n	8008184 <_printf_float+0x39c>
 800810c:	6823      	ldr	r3, [r4, #0]
 800810e:	07da      	lsls	r2, r3, #31
 8008110:	d438      	bmi.n	8008184 <_printf_float+0x39c>
 8008112:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008114:	9b05      	ldr	r3, [sp, #20]
 8008116:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008118:	1ad3      	subs	r3, r2, r3
 800811a:	eba2 0901 	sub.w	r9, r2, r1
 800811e:	4599      	cmp	r9, r3
 8008120:	bfa8      	it	ge
 8008122:	4699      	movge	r9, r3
 8008124:	f1b9 0f00 	cmp.w	r9, #0
 8008128:	dc35      	bgt.n	8008196 <_printf_float+0x3ae>
 800812a:	f04f 0800 	mov.w	r8, #0
 800812e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008132:	f104 0a1a 	add.w	sl, r4, #26
 8008136:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800813a:	1a9b      	subs	r3, r3, r2
 800813c:	eba3 0309 	sub.w	r3, r3, r9
 8008140:	4543      	cmp	r3, r8
 8008142:	f77f af79 	ble.w	8008038 <_printf_float+0x250>
 8008146:	2301      	movs	r3, #1
 8008148:	4652      	mov	r2, sl
 800814a:	4631      	mov	r1, r6
 800814c:	4628      	mov	r0, r5
 800814e:	47b8      	blx	r7
 8008150:	3001      	adds	r0, #1
 8008152:	f43f aeaa 	beq.w	8007eaa <_printf_float+0xc2>
 8008156:	f108 0801 	add.w	r8, r8, #1
 800815a:	e7ec      	b.n	8008136 <_printf_float+0x34e>
 800815c:	4613      	mov	r3, r2
 800815e:	4631      	mov	r1, r6
 8008160:	4642      	mov	r2, r8
 8008162:	4628      	mov	r0, r5
 8008164:	47b8      	blx	r7
 8008166:	3001      	adds	r0, #1
 8008168:	d1c0      	bne.n	80080ec <_printf_float+0x304>
 800816a:	e69e      	b.n	8007eaa <_printf_float+0xc2>
 800816c:	2301      	movs	r3, #1
 800816e:	4631      	mov	r1, r6
 8008170:	4628      	mov	r0, r5
 8008172:	9205      	str	r2, [sp, #20]
 8008174:	47b8      	blx	r7
 8008176:	3001      	adds	r0, #1
 8008178:	f43f ae97 	beq.w	8007eaa <_printf_float+0xc2>
 800817c:	9a05      	ldr	r2, [sp, #20]
 800817e:	f10b 0b01 	add.w	fp, fp, #1
 8008182:	e7b9      	b.n	80080f8 <_printf_float+0x310>
 8008184:	ee18 3a10 	vmov	r3, s16
 8008188:	4652      	mov	r2, sl
 800818a:	4631      	mov	r1, r6
 800818c:	4628      	mov	r0, r5
 800818e:	47b8      	blx	r7
 8008190:	3001      	adds	r0, #1
 8008192:	d1be      	bne.n	8008112 <_printf_float+0x32a>
 8008194:	e689      	b.n	8007eaa <_printf_float+0xc2>
 8008196:	9a05      	ldr	r2, [sp, #20]
 8008198:	464b      	mov	r3, r9
 800819a:	4442      	add	r2, r8
 800819c:	4631      	mov	r1, r6
 800819e:	4628      	mov	r0, r5
 80081a0:	47b8      	blx	r7
 80081a2:	3001      	adds	r0, #1
 80081a4:	d1c1      	bne.n	800812a <_printf_float+0x342>
 80081a6:	e680      	b.n	8007eaa <_printf_float+0xc2>
 80081a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081aa:	2a01      	cmp	r2, #1
 80081ac:	dc01      	bgt.n	80081b2 <_printf_float+0x3ca>
 80081ae:	07db      	lsls	r3, r3, #31
 80081b0:	d538      	bpl.n	8008224 <_printf_float+0x43c>
 80081b2:	2301      	movs	r3, #1
 80081b4:	4642      	mov	r2, r8
 80081b6:	4631      	mov	r1, r6
 80081b8:	4628      	mov	r0, r5
 80081ba:	47b8      	blx	r7
 80081bc:	3001      	adds	r0, #1
 80081be:	f43f ae74 	beq.w	8007eaa <_printf_float+0xc2>
 80081c2:	ee18 3a10 	vmov	r3, s16
 80081c6:	4652      	mov	r2, sl
 80081c8:	4631      	mov	r1, r6
 80081ca:	4628      	mov	r0, r5
 80081cc:	47b8      	blx	r7
 80081ce:	3001      	adds	r0, #1
 80081d0:	f43f ae6b 	beq.w	8007eaa <_printf_float+0xc2>
 80081d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80081d8:	2200      	movs	r2, #0
 80081da:	2300      	movs	r3, #0
 80081dc:	f7f8 fc74 	bl	8000ac8 <__aeabi_dcmpeq>
 80081e0:	b9d8      	cbnz	r0, 800821a <_printf_float+0x432>
 80081e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081e4:	f108 0201 	add.w	r2, r8, #1
 80081e8:	3b01      	subs	r3, #1
 80081ea:	4631      	mov	r1, r6
 80081ec:	4628      	mov	r0, r5
 80081ee:	47b8      	blx	r7
 80081f0:	3001      	adds	r0, #1
 80081f2:	d10e      	bne.n	8008212 <_printf_float+0x42a>
 80081f4:	e659      	b.n	8007eaa <_printf_float+0xc2>
 80081f6:	2301      	movs	r3, #1
 80081f8:	4652      	mov	r2, sl
 80081fa:	4631      	mov	r1, r6
 80081fc:	4628      	mov	r0, r5
 80081fe:	47b8      	blx	r7
 8008200:	3001      	adds	r0, #1
 8008202:	f43f ae52 	beq.w	8007eaa <_printf_float+0xc2>
 8008206:	f108 0801 	add.w	r8, r8, #1
 800820a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800820c:	3b01      	subs	r3, #1
 800820e:	4543      	cmp	r3, r8
 8008210:	dcf1      	bgt.n	80081f6 <_printf_float+0x40e>
 8008212:	464b      	mov	r3, r9
 8008214:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008218:	e6dc      	b.n	8007fd4 <_printf_float+0x1ec>
 800821a:	f04f 0800 	mov.w	r8, #0
 800821e:	f104 0a1a 	add.w	sl, r4, #26
 8008222:	e7f2      	b.n	800820a <_printf_float+0x422>
 8008224:	2301      	movs	r3, #1
 8008226:	4642      	mov	r2, r8
 8008228:	e7df      	b.n	80081ea <_printf_float+0x402>
 800822a:	2301      	movs	r3, #1
 800822c:	464a      	mov	r2, r9
 800822e:	4631      	mov	r1, r6
 8008230:	4628      	mov	r0, r5
 8008232:	47b8      	blx	r7
 8008234:	3001      	adds	r0, #1
 8008236:	f43f ae38 	beq.w	8007eaa <_printf_float+0xc2>
 800823a:	f108 0801 	add.w	r8, r8, #1
 800823e:	68e3      	ldr	r3, [r4, #12]
 8008240:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008242:	1a5b      	subs	r3, r3, r1
 8008244:	4543      	cmp	r3, r8
 8008246:	dcf0      	bgt.n	800822a <_printf_float+0x442>
 8008248:	e6fa      	b.n	8008040 <_printf_float+0x258>
 800824a:	f04f 0800 	mov.w	r8, #0
 800824e:	f104 0919 	add.w	r9, r4, #25
 8008252:	e7f4      	b.n	800823e <_printf_float+0x456>

08008254 <_printf_common>:
 8008254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008258:	4616      	mov	r6, r2
 800825a:	4699      	mov	r9, r3
 800825c:	688a      	ldr	r2, [r1, #8]
 800825e:	690b      	ldr	r3, [r1, #16]
 8008260:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008264:	4293      	cmp	r3, r2
 8008266:	bfb8      	it	lt
 8008268:	4613      	movlt	r3, r2
 800826a:	6033      	str	r3, [r6, #0]
 800826c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008270:	4607      	mov	r7, r0
 8008272:	460c      	mov	r4, r1
 8008274:	b10a      	cbz	r2, 800827a <_printf_common+0x26>
 8008276:	3301      	adds	r3, #1
 8008278:	6033      	str	r3, [r6, #0]
 800827a:	6823      	ldr	r3, [r4, #0]
 800827c:	0699      	lsls	r1, r3, #26
 800827e:	bf42      	ittt	mi
 8008280:	6833      	ldrmi	r3, [r6, #0]
 8008282:	3302      	addmi	r3, #2
 8008284:	6033      	strmi	r3, [r6, #0]
 8008286:	6825      	ldr	r5, [r4, #0]
 8008288:	f015 0506 	ands.w	r5, r5, #6
 800828c:	d106      	bne.n	800829c <_printf_common+0x48>
 800828e:	f104 0a19 	add.w	sl, r4, #25
 8008292:	68e3      	ldr	r3, [r4, #12]
 8008294:	6832      	ldr	r2, [r6, #0]
 8008296:	1a9b      	subs	r3, r3, r2
 8008298:	42ab      	cmp	r3, r5
 800829a:	dc26      	bgt.n	80082ea <_printf_common+0x96>
 800829c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80082a0:	1e13      	subs	r3, r2, #0
 80082a2:	6822      	ldr	r2, [r4, #0]
 80082a4:	bf18      	it	ne
 80082a6:	2301      	movne	r3, #1
 80082a8:	0692      	lsls	r2, r2, #26
 80082aa:	d42b      	bmi.n	8008304 <_printf_common+0xb0>
 80082ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082b0:	4649      	mov	r1, r9
 80082b2:	4638      	mov	r0, r7
 80082b4:	47c0      	blx	r8
 80082b6:	3001      	adds	r0, #1
 80082b8:	d01e      	beq.n	80082f8 <_printf_common+0xa4>
 80082ba:	6823      	ldr	r3, [r4, #0]
 80082bc:	68e5      	ldr	r5, [r4, #12]
 80082be:	6832      	ldr	r2, [r6, #0]
 80082c0:	f003 0306 	and.w	r3, r3, #6
 80082c4:	2b04      	cmp	r3, #4
 80082c6:	bf08      	it	eq
 80082c8:	1aad      	subeq	r5, r5, r2
 80082ca:	68a3      	ldr	r3, [r4, #8]
 80082cc:	6922      	ldr	r2, [r4, #16]
 80082ce:	bf0c      	ite	eq
 80082d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082d4:	2500      	movne	r5, #0
 80082d6:	4293      	cmp	r3, r2
 80082d8:	bfc4      	itt	gt
 80082da:	1a9b      	subgt	r3, r3, r2
 80082dc:	18ed      	addgt	r5, r5, r3
 80082de:	2600      	movs	r6, #0
 80082e0:	341a      	adds	r4, #26
 80082e2:	42b5      	cmp	r5, r6
 80082e4:	d11a      	bne.n	800831c <_printf_common+0xc8>
 80082e6:	2000      	movs	r0, #0
 80082e8:	e008      	b.n	80082fc <_printf_common+0xa8>
 80082ea:	2301      	movs	r3, #1
 80082ec:	4652      	mov	r2, sl
 80082ee:	4649      	mov	r1, r9
 80082f0:	4638      	mov	r0, r7
 80082f2:	47c0      	blx	r8
 80082f4:	3001      	adds	r0, #1
 80082f6:	d103      	bne.n	8008300 <_printf_common+0xac>
 80082f8:	f04f 30ff 	mov.w	r0, #4294967295
 80082fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008300:	3501      	adds	r5, #1
 8008302:	e7c6      	b.n	8008292 <_printf_common+0x3e>
 8008304:	18e1      	adds	r1, r4, r3
 8008306:	1c5a      	adds	r2, r3, #1
 8008308:	2030      	movs	r0, #48	; 0x30
 800830a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800830e:	4422      	add	r2, r4
 8008310:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008314:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008318:	3302      	adds	r3, #2
 800831a:	e7c7      	b.n	80082ac <_printf_common+0x58>
 800831c:	2301      	movs	r3, #1
 800831e:	4622      	mov	r2, r4
 8008320:	4649      	mov	r1, r9
 8008322:	4638      	mov	r0, r7
 8008324:	47c0      	blx	r8
 8008326:	3001      	adds	r0, #1
 8008328:	d0e6      	beq.n	80082f8 <_printf_common+0xa4>
 800832a:	3601      	adds	r6, #1
 800832c:	e7d9      	b.n	80082e2 <_printf_common+0x8e>
	...

08008330 <_printf_i>:
 8008330:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008334:	460c      	mov	r4, r1
 8008336:	4691      	mov	r9, r2
 8008338:	7e27      	ldrb	r7, [r4, #24]
 800833a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800833c:	2f78      	cmp	r7, #120	; 0x78
 800833e:	4680      	mov	r8, r0
 8008340:	469a      	mov	sl, r3
 8008342:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008346:	d807      	bhi.n	8008358 <_printf_i+0x28>
 8008348:	2f62      	cmp	r7, #98	; 0x62
 800834a:	d80a      	bhi.n	8008362 <_printf_i+0x32>
 800834c:	2f00      	cmp	r7, #0
 800834e:	f000 80d8 	beq.w	8008502 <_printf_i+0x1d2>
 8008352:	2f58      	cmp	r7, #88	; 0x58
 8008354:	f000 80a3 	beq.w	800849e <_printf_i+0x16e>
 8008358:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800835c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008360:	e03a      	b.n	80083d8 <_printf_i+0xa8>
 8008362:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008366:	2b15      	cmp	r3, #21
 8008368:	d8f6      	bhi.n	8008358 <_printf_i+0x28>
 800836a:	a001      	add	r0, pc, #4	; (adr r0, 8008370 <_printf_i+0x40>)
 800836c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008370:	080083c9 	.word	0x080083c9
 8008374:	080083dd 	.word	0x080083dd
 8008378:	08008359 	.word	0x08008359
 800837c:	08008359 	.word	0x08008359
 8008380:	08008359 	.word	0x08008359
 8008384:	08008359 	.word	0x08008359
 8008388:	080083dd 	.word	0x080083dd
 800838c:	08008359 	.word	0x08008359
 8008390:	08008359 	.word	0x08008359
 8008394:	08008359 	.word	0x08008359
 8008398:	08008359 	.word	0x08008359
 800839c:	080084e9 	.word	0x080084e9
 80083a0:	0800840d 	.word	0x0800840d
 80083a4:	080084cb 	.word	0x080084cb
 80083a8:	08008359 	.word	0x08008359
 80083ac:	08008359 	.word	0x08008359
 80083b0:	0800850b 	.word	0x0800850b
 80083b4:	08008359 	.word	0x08008359
 80083b8:	0800840d 	.word	0x0800840d
 80083bc:	08008359 	.word	0x08008359
 80083c0:	08008359 	.word	0x08008359
 80083c4:	080084d3 	.word	0x080084d3
 80083c8:	680b      	ldr	r3, [r1, #0]
 80083ca:	1d1a      	adds	r2, r3, #4
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	600a      	str	r2, [r1, #0]
 80083d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80083d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083d8:	2301      	movs	r3, #1
 80083da:	e0a3      	b.n	8008524 <_printf_i+0x1f4>
 80083dc:	6825      	ldr	r5, [r4, #0]
 80083de:	6808      	ldr	r0, [r1, #0]
 80083e0:	062e      	lsls	r6, r5, #24
 80083e2:	f100 0304 	add.w	r3, r0, #4
 80083e6:	d50a      	bpl.n	80083fe <_printf_i+0xce>
 80083e8:	6805      	ldr	r5, [r0, #0]
 80083ea:	600b      	str	r3, [r1, #0]
 80083ec:	2d00      	cmp	r5, #0
 80083ee:	da03      	bge.n	80083f8 <_printf_i+0xc8>
 80083f0:	232d      	movs	r3, #45	; 0x2d
 80083f2:	426d      	negs	r5, r5
 80083f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083f8:	485e      	ldr	r0, [pc, #376]	; (8008574 <_printf_i+0x244>)
 80083fa:	230a      	movs	r3, #10
 80083fc:	e019      	b.n	8008432 <_printf_i+0x102>
 80083fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008402:	6805      	ldr	r5, [r0, #0]
 8008404:	600b      	str	r3, [r1, #0]
 8008406:	bf18      	it	ne
 8008408:	b22d      	sxthne	r5, r5
 800840a:	e7ef      	b.n	80083ec <_printf_i+0xbc>
 800840c:	680b      	ldr	r3, [r1, #0]
 800840e:	6825      	ldr	r5, [r4, #0]
 8008410:	1d18      	adds	r0, r3, #4
 8008412:	6008      	str	r0, [r1, #0]
 8008414:	0628      	lsls	r0, r5, #24
 8008416:	d501      	bpl.n	800841c <_printf_i+0xec>
 8008418:	681d      	ldr	r5, [r3, #0]
 800841a:	e002      	b.n	8008422 <_printf_i+0xf2>
 800841c:	0669      	lsls	r1, r5, #25
 800841e:	d5fb      	bpl.n	8008418 <_printf_i+0xe8>
 8008420:	881d      	ldrh	r5, [r3, #0]
 8008422:	4854      	ldr	r0, [pc, #336]	; (8008574 <_printf_i+0x244>)
 8008424:	2f6f      	cmp	r7, #111	; 0x6f
 8008426:	bf0c      	ite	eq
 8008428:	2308      	moveq	r3, #8
 800842a:	230a      	movne	r3, #10
 800842c:	2100      	movs	r1, #0
 800842e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008432:	6866      	ldr	r6, [r4, #4]
 8008434:	60a6      	str	r6, [r4, #8]
 8008436:	2e00      	cmp	r6, #0
 8008438:	bfa2      	ittt	ge
 800843a:	6821      	ldrge	r1, [r4, #0]
 800843c:	f021 0104 	bicge.w	r1, r1, #4
 8008440:	6021      	strge	r1, [r4, #0]
 8008442:	b90d      	cbnz	r5, 8008448 <_printf_i+0x118>
 8008444:	2e00      	cmp	r6, #0
 8008446:	d04d      	beq.n	80084e4 <_printf_i+0x1b4>
 8008448:	4616      	mov	r6, r2
 800844a:	fbb5 f1f3 	udiv	r1, r5, r3
 800844e:	fb03 5711 	mls	r7, r3, r1, r5
 8008452:	5dc7      	ldrb	r7, [r0, r7]
 8008454:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008458:	462f      	mov	r7, r5
 800845a:	42bb      	cmp	r3, r7
 800845c:	460d      	mov	r5, r1
 800845e:	d9f4      	bls.n	800844a <_printf_i+0x11a>
 8008460:	2b08      	cmp	r3, #8
 8008462:	d10b      	bne.n	800847c <_printf_i+0x14c>
 8008464:	6823      	ldr	r3, [r4, #0]
 8008466:	07df      	lsls	r7, r3, #31
 8008468:	d508      	bpl.n	800847c <_printf_i+0x14c>
 800846a:	6923      	ldr	r3, [r4, #16]
 800846c:	6861      	ldr	r1, [r4, #4]
 800846e:	4299      	cmp	r1, r3
 8008470:	bfde      	ittt	le
 8008472:	2330      	movle	r3, #48	; 0x30
 8008474:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008478:	f106 36ff 	addle.w	r6, r6, #4294967295
 800847c:	1b92      	subs	r2, r2, r6
 800847e:	6122      	str	r2, [r4, #16]
 8008480:	f8cd a000 	str.w	sl, [sp]
 8008484:	464b      	mov	r3, r9
 8008486:	aa03      	add	r2, sp, #12
 8008488:	4621      	mov	r1, r4
 800848a:	4640      	mov	r0, r8
 800848c:	f7ff fee2 	bl	8008254 <_printf_common>
 8008490:	3001      	adds	r0, #1
 8008492:	d14c      	bne.n	800852e <_printf_i+0x1fe>
 8008494:	f04f 30ff 	mov.w	r0, #4294967295
 8008498:	b004      	add	sp, #16
 800849a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800849e:	4835      	ldr	r0, [pc, #212]	; (8008574 <_printf_i+0x244>)
 80084a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80084a4:	6823      	ldr	r3, [r4, #0]
 80084a6:	680e      	ldr	r6, [r1, #0]
 80084a8:	061f      	lsls	r7, r3, #24
 80084aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80084ae:	600e      	str	r6, [r1, #0]
 80084b0:	d514      	bpl.n	80084dc <_printf_i+0x1ac>
 80084b2:	07d9      	lsls	r1, r3, #31
 80084b4:	bf44      	itt	mi
 80084b6:	f043 0320 	orrmi.w	r3, r3, #32
 80084ba:	6023      	strmi	r3, [r4, #0]
 80084bc:	b91d      	cbnz	r5, 80084c6 <_printf_i+0x196>
 80084be:	6823      	ldr	r3, [r4, #0]
 80084c0:	f023 0320 	bic.w	r3, r3, #32
 80084c4:	6023      	str	r3, [r4, #0]
 80084c6:	2310      	movs	r3, #16
 80084c8:	e7b0      	b.n	800842c <_printf_i+0xfc>
 80084ca:	6823      	ldr	r3, [r4, #0]
 80084cc:	f043 0320 	orr.w	r3, r3, #32
 80084d0:	6023      	str	r3, [r4, #0]
 80084d2:	2378      	movs	r3, #120	; 0x78
 80084d4:	4828      	ldr	r0, [pc, #160]	; (8008578 <_printf_i+0x248>)
 80084d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80084da:	e7e3      	b.n	80084a4 <_printf_i+0x174>
 80084dc:	065e      	lsls	r6, r3, #25
 80084de:	bf48      	it	mi
 80084e0:	b2ad      	uxthmi	r5, r5
 80084e2:	e7e6      	b.n	80084b2 <_printf_i+0x182>
 80084e4:	4616      	mov	r6, r2
 80084e6:	e7bb      	b.n	8008460 <_printf_i+0x130>
 80084e8:	680b      	ldr	r3, [r1, #0]
 80084ea:	6826      	ldr	r6, [r4, #0]
 80084ec:	6960      	ldr	r0, [r4, #20]
 80084ee:	1d1d      	adds	r5, r3, #4
 80084f0:	600d      	str	r5, [r1, #0]
 80084f2:	0635      	lsls	r5, r6, #24
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	d501      	bpl.n	80084fc <_printf_i+0x1cc>
 80084f8:	6018      	str	r0, [r3, #0]
 80084fa:	e002      	b.n	8008502 <_printf_i+0x1d2>
 80084fc:	0671      	lsls	r1, r6, #25
 80084fe:	d5fb      	bpl.n	80084f8 <_printf_i+0x1c8>
 8008500:	8018      	strh	r0, [r3, #0]
 8008502:	2300      	movs	r3, #0
 8008504:	6123      	str	r3, [r4, #16]
 8008506:	4616      	mov	r6, r2
 8008508:	e7ba      	b.n	8008480 <_printf_i+0x150>
 800850a:	680b      	ldr	r3, [r1, #0]
 800850c:	1d1a      	adds	r2, r3, #4
 800850e:	600a      	str	r2, [r1, #0]
 8008510:	681e      	ldr	r6, [r3, #0]
 8008512:	6862      	ldr	r2, [r4, #4]
 8008514:	2100      	movs	r1, #0
 8008516:	4630      	mov	r0, r6
 8008518:	f7f7 fe62 	bl	80001e0 <memchr>
 800851c:	b108      	cbz	r0, 8008522 <_printf_i+0x1f2>
 800851e:	1b80      	subs	r0, r0, r6
 8008520:	6060      	str	r0, [r4, #4]
 8008522:	6863      	ldr	r3, [r4, #4]
 8008524:	6123      	str	r3, [r4, #16]
 8008526:	2300      	movs	r3, #0
 8008528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800852c:	e7a8      	b.n	8008480 <_printf_i+0x150>
 800852e:	6923      	ldr	r3, [r4, #16]
 8008530:	4632      	mov	r2, r6
 8008532:	4649      	mov	r1, r9
 8008534:	4640      	mov	r0, r8
 8008536:	47d0      	blx	sl
 8008538:	3001      	adds	r0, #1
 800853a:	d0ab      	beq.n	8008494 <_printf_i+0x164>
 800853c:	6823      	ldr	r3, [r4, #0]
 800853e:	079b      	lsls	r3, r3, #30
 8008540:	d413      	bmi.n	800856a <_printf_i+0x23a>
 8008542:	68e0      	ldr	r0, [r4, #12]
 8008544:	9b03      	ldr	r3, [sp, #12]
 8008546:	4298      	cmp	r0, r3
 8008548:	bfb8      	it	lt
 800854a:	4618      	movlt	r0, r3
 800854c:	e7a4      	b.n	8008498 <_printf_i+0x168>
 800854e:	2301      	movs	r3, #1
 8008550:	4632      	mov	r2, r6
 8008552:	4649      	mov	r1, r9
 8008554:	4640      	mov	r0, r8
 8008556:	47d0      	blx	sl
 8008558:	3001      	adds	r0, #1
 800855a:	d09b      	beq.n	8008494 <_printf_i+0x164>
 800855c:	3501      	adds	r5, #1
 800855e:	68e3      	ldr	r3, [r4, #12]
 8008560:	9903      	ldr	r1, [sp, #12]
 8008562:	1a5b      	subs	r3, r3, r1
 8008564:	42ab      	cmp	r3, r5
 8008566:	dcf2      	bgt.n	800854e <_printf_i+0x21e>
 8008568:	e7eb      	b.n	8008542 <_printf_i+0x212>
 800856a:	2500      	movs	r5, #0
 800856c:	f104 0619 	add.w	r6, r4, #25
 8008570:	e7f5      	b.n	800855e <_printf_i+0x22e>
 8008572:	bf00      	nop
 8008574:	0800abee 	.word	0x0800abee
 8008578:	0800abff 	.word	0x0800abff

0800857c <iprintf>:
 800857c:	b40f      	push	{r0, r1, r2, r3}
 800857e:	4b0a      	ldr	r3, [pc, #40]	; (80085a8 <iprintf+0x2c>)
 8008580:	b513      	push	{r0, r1, r4, lr}
 8008582:	681c      	ldr	r4, [r3, #0]
 8008584:	b124      	cbz	r4, 8008590 <iprintf+0x14>
 8008586:	69a3      	ldr	r3, [r4, #24]
 8008588:	b913      	cbnz	r3, 8008590 <iprintf+0x14>
 800858a:	4620      	mov	r0, r4
 800858c:	f001 f8fe 	bl	800978c <__sinit>
 8008590:	ab05      	add	r3, sp, #20
 8008592:	9a04      	ldr	r2, [sp, #16]
 8008594:	68a1      	ldr	r1, [r4, #8]
 8008596:	9301      	str	r3, [sp, #4]
 8008598:	4620      	mov	r0, r4
 800859a:	f001 fdc3 	bl	800a124 <_vfiprintf_r>
 800859e:	b002      	add	sp, #8
 80085a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085a4:	b004      	add	sp, #16
 80085a6:	4770      	bx	lr
 80085a8:	20000034 	.word	0x20000034

080085ac <putchar>:
 80085ac:	4b09      	ldr	r3, [pc, #36]	; (80085d4 <putchar+0x28>)
 80085ae:	b513      	push	{r0, r1, r4, lr}
 80085b0:	681c      	ldr	r4, [r3, #0]
 80085b2:	4601      	mov	r1, r0
 80085b4:	b134      	cbz	r4, 80085c4 <putchar+0x18>
 80085b6:	69a3      	ldr	r3, [r4, #24]
 80085b8:	b923      	cbnz	r3, 80085c4 <putchar+0x18>
 80085ba:	9001      	str	r0, [sp, #4]
 80085bc:	4620      	mov	r0, r4
 80085be:	f001 f8e5 	bl	800978c <__sinit>
 80085c2:	9901      	ldr	r1, [sp, #4]
 80085c4:	68a2      	ldr	r2, [r4, #8]
 80085c6:	4620      	mov	r0, r4
 80085c8:	b002      	add	sp, #8
 80085ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085ce:	f001 bed9 	b.w	800a384 <_putc_r>
 80085d2:	bf00      	nop
 80085d4:	20000034 	.word	0x20000034

080085d8 <_puts_r>:
 80085d8:	b570      	push	{r4, r5, r6, lr}
 80085da:	460e      	mov	r6, r1
 80085dc:	4605      	mov	r5, r0
 80085de:	b118      	cbz	r0, 80085e8 <_puts_r+0x10>
 80085e0:	6983      	ldr	r3, [r0, #24]
 80085e2:	b90b      	cbnz	r3, 80085e8 <_puts_r+0x10>
 80085e4:	f001 f8d2 	bl	800978c <__sinit>
 80085e8:	69ab      	ldr	r3, [r5, #24]
 80085ea:	68ac      	ldr	r4, [r5, #8]
 80085ec:	b913      	cbnz	r3, 80085f4 <_puts_r+0x1c>
 80085ee:	4628      	mov	r0, r5
 80085f0:	f001 f8cc 	bl	800978c <__sinit>
 80085f4:	4b2c      	ldr	r3, [pc, #176]	; (80086a8 <_puts_r+0xd0>)
 80085f6:	429c      	cmp	r4, r3
 80085f8:	d120      	bne.n	800863c <_puts_r+0x64>
 80085fa:	686c      	ldr	r4, [r5, #4]
 80085fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085fe:	07db      	lsls	r3, r3, #31
 8008600:	d405      	bmi.n	800860e <_puts_r+0x36>
 8008602:	89a3      	ldrh	r3, [r4, #12]
 8008604:	0598      	lsls	r0, r3, #22
 8008606:	d402      	bmi.n	800860e <_puts_r+0x36>
 8008608:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800860a:	f001 f962 	bl	80098d2 <__retarget_lock_acquire_recursive>
 800860e:	89a3      	ldrh	r3, [r4, #12]
 8008610:	0719      	lsls	r1, r3, #28
 8008612:	d51d      	bpl.n	8008650 <_puts_r+0x78>
 8008614:	6923      	ldr	r3, [r4, #16]
 8008616:	b1db      	cbz	r3, 8008650 <_puts_r+0x78>
 8008618:	3e01      	subs	r6, #1
 800861a:	68a3      	ldr	r3, [r4, #8]
 800861c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008620:	3b01      	subs	r3, #1
 8008622:	60a3      	str	r3, [r4, #8]
 8008624:	bb39      	cbnz	r1, 8008676 <_puts_r+0x9e>
 8008626:	2b00      	cmp	r3, #0
 8008628:	da38      	bge.n	800869c <_puts_r+0xc4>
 800862a:	4622      	mov	r2, r4
 800862c:	210a      	movs	r1, #10
 800862e:	4628      	mov	r0, r5
 8008630:	f000 f858 	bl	80086e4 <__swbuf_r>
 8008634:	3001      	adds	r0, #1
 8008636:	d011      	beq.n	800865c <_puts_r+0x84>
 8008638:	250a      	movs	r5, #10
 800863a:	e011      	b.n	8008660 <_puts_r+0x88>
 800863c:	4b1b      	ldr	r3, [pc, #108]	; (80086ac <_puts_r+0xd4>)
 800863e:	429c      	cmp	r4, r3
 8008640:	d101      	bne.n	8008646 <_puts_r+0x6e>
 8008642:	68ac      	ldr	r4, [r5, #8]
 8008644:	e7da      	b.n	80085fc <_puts_r+0x24>
 8008646:	4b1a      	ldr	r3, [pc, #104]	; (80086b0 <_puts_r+0xd8>)
 8008648:	429c      	cmp	r4, r3
 800864a:	bf08      	it	eq
 800864c:	68ec      	ldreq	r4, [r5, #12]
 800864e:	e7d5      	b.n	80085fc <_puts_r+0x24>
 8008650:	4621      	mov	r1, r4
 8008652:	4628      	mov	r0, r5
 8008654:	f000 f898 	bl	8008788 <__swsetup_r>
 8008658:	2800      	cmp	r0, #0
 800865a:	d0dd      	beq.n	8008618 <_puts_r+0x40>
 800865c:	f04f 35ff 	mov.w	r5, #4294967295
 8008660:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008662:	07da      	lsls	r2, r3, #31
 8008664:	d405      	bmi.n	8008672 <_puts_r+0x9a>
 8008666:	89a3      	ldrh	r3, [r4, #12]
 8008668:	059b      	lsls	r3, r3, #22
 800866a:	d402      	bmi.n	8008672 <_puts_r+0x9a>
 800866c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800866e:	f001 f931 	bl	80098d4 <__retarget_lock_release_recursive>
 8008672:	4628      	mov	r0, r5
 8008674:	bd70      	pop	{r4, r5, r6, pc}
 8008676:	2b00      	cmp	r3, #0
 8008678:	da04      	bge.n	8008684 <_puts_r+0xac>
 800867a:	69a2      	ldr	r2, [r4, #24]
 800867c:	429a      	cmp	r2, r3
 800867e:	dc06      	bgt.n	800868e <_puts_r+0xb6>
 8008680:	290a      	cmp	r1, #10
 8008682:	d004      	beq.n	800868e <_puts_r+0xb6>
 8008684:	6823      	ldr	r3, [r4, #0]
 8008686:	1c5a      	adds	r2, r3, #1
 8008688:	6022      	str	r2, [r4, #0]
 800868a:	7019      	strb	r1, [r3, #0]
 800868c:	e7c5      	b.n	800861a <_puts_r+0x42>
 800868e:	4622      	mov	r2, r4
 8008690:	4628      	mov	r0, r5
 8008692:	f000 f827 	bl	80086e4 <__swbuf_r>
 8008696:	3001      	adds	r0, #1
 8008698:	d1bf      	bne.n	800861a <_puts_r+0x42>
 800869a:	e7df      	b.n	800865c <_puts_r+0x84>
 800869c:	6823      	ldr	r3, [r4, #0]
 800869e:	250a      	movs	r5, #10
 80086a0:	1c5a      	adds	r2, r3, #1
 80086a2:	6022      	str	r2, [r4, #0]
 80086a4:	701d      	strb	r5, [r3, #0]
 80086a6:	e7db      	b.n	8008660 <_puts_r+0x88>
 80086a8:	0800acc4 	.word	0x0800acc4
 80086ac:	0800ace4 	.word	0x0800ace4
 80086b0:	0800aca4 	.word	0x0800aca4

080086b4 <puts>:
 80086b4:	4b02      	ldr	r3, [pc, #8]	; (80086c0 <puts+0xc>)
 80086b6:	4601      	mov	r1, r0
 80086b8:	6818      	ldr	r0, [r3, #0]
 80086ba:	f7ff bf8d 	b.w	80085d8 <_puts_r>
 80086be:	bf00      	nop
 80086c0:	20000034 	.word	0x20000034

080086c4 <_sbrk_r>:
 80086c4:	b538      	push	{r3, r4, r5, lr}
 80086c6:	4d06      	ldr	r5, [pc, #24]	; (80086e0 <_sbrk_r+0x1c>)
 80086c8:	2300      	movs	r3, #0
 80086ca:	4604      	mov	r4, r0
 80086cc:	4608      	mov	r0, r1
 80086ce:	602b      	str	r3, [r5, #0]
 80086d0:	f7fa fd90 	bl	80031f4 <_sbrk>
 80086d4:	1c43      	adds	r3, r0, #1
 80086d6:	d102      	bne.n	80086de <_sbrk_r+0x1a>
 80086d8:	682b      	ldr	r3, [r5, #0]
 80086da:	b103      	cbz	r3, 80086de <_sbrk_r+0x1a>
 80086dc:	6023      	str	r3, [r4, #0]
 80086de:	bd38      	pop	{r3, r4, r5, pc}
 80086e0:	200006bc 	.word	0x200006bc

080086e4 <__swbuf_r>:
 80086e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086e6:	460e      	mov	r6, r1
 80086e8:	4614      	mov	r4, r2
 80086ea:	4605      	mov	r5, r0
 80086ec:	b118      	cbz	r0, 80086f6 <__swbuf_r+0x12>
 80086ee:	6983      	ldr	r3, [r0, #24]
 80086f0:	b90b      	cbnz	r3, 80086f6 <__swbuf_r+0x12>
 80086f2:	f001 f84b 	bl	800978c <__sinit>
 80086f6:	4b21      	ldr	r3, [pc, #132]	; (800877c <__swbuf_r+0x98>)
 80086f8:	429c      	cmp	r4, r3
 80086fa:	d12b      	bne.n	8008754 <__swbuf_r+0x70>
 80086fc:	686c      	ldr	r4, [r5, #4]
 80086fe:	69a3      	ldr	r3, [r4, #24]
 8008700:	60a3      	str	r3, [r4, #8]
 8008702:	89a3      	ldrh	r3, [r4, #12]
 8008704:	071a      	lsls	r2, r3, #28
 8008706:	d52f      	bpl.n	8008768 <__swbuf_r+0x84>
 8008708:	6923      	ldr	r3, [r4, #16]
 800870a:	b36b      	cbz	r3, 8008768 <__swbuf_r+0x84>
 800870c:	6923      	ldr	r3, [r4, #16]
 800870e:	6820      	ldr	r0, [r4, #0]
 8008710:	1ac0      	subs	r0, r0, r3
 8008712:	6963      	ldr	r3, [r4, #20]
 8008714:	b2f6      	uxtb	r6, r6
 8008716:	4283      	cmp	r3, r0
 8008718:	4637      	mov	r7, r6
 800871a:	dc04      	bgt.n	8008726 <__swbuf_r+0x42>
 800871c:	4621      	mov	r1, r4
 800871e:	4628      	mov	r0, r5
 8008720:	f000 ffa0 	bl	8009664 <_fflush_r>
 8008724:	bb30      	cbnz	r0, 8008774 <__swbuf_r+0x90>
 8008726:	68a3      	ldr	r3, [r4, #8]
 8008728:	3b01      	subs	r3, #1
 800872a:	60a3      	str	r3, [r4, #8]
 800872c:	6823      	ldr	r3, [r4, #0]
 800872e:	1c5a      	adds	r2, r3, #1
 8008730:	6022      	str	r2, [r4, #0]
 8008732:	701e      	strb	r6, [r3, #0]
 8008734:	6963      	ldr	r3, [r4, #20]
 8008736:	3001      	adds	r0, #1
 8008738:	4283      	cmp	r3, r0
 800873a:	d004      	beq.n	8008746 <__swbuf_r+0x62>
 800873c:	89a3      	ldrh	r3, [r4, #12]
 800873e:	07db      	lsls	r3, r3, #31
 8008740:	d506      	bpl.n	8008750 <__swbuf_r+0x6c>
 8008742:	2e0a      	cmp	r6, #10
 8008744:	d104      	bne.n	8008750 <__swbuf_r+0x6c>
 8008746:	4621      	mov	r1, r4
 8008748:	4628      	mov	r0, r5
 800874a:	f000 ff8b 	bl	8009664 <_fflush_r>
 800874e:	b988      	cbnz	r0, 8008774 <__swbuf_r+0x90>
 8008750:	4638      	mov	r0, r7
 8008752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008754:	4b0a      	ldr	r3, [pc, #40]	; (8008780 <__swbuf_r+0x9c>)
 8008756:	429c      	cmp	r4, r3
 8008758:	d101      	bne.n	800875e <__swbuf_r+0x7a>
 800875a:	68ac      	ldr	r4, [r5, #8]
 800875c:	e7cf      	b.n	80086fe <__swbuf_r+0x1a>
 800875e:	4b09      	ldr	r3, [pc, #36]	; (8008784 <__swbuf_r+0xa0>)
 8008760:	429c      	cmp	r4, r3
 8008762:	bf08      	it	eq
 8008764:	68ec      	ldreq	r4, [r5, #12]
 8008766:	e7ca      	b.n	80086fe <__swbuf_r+0x1a>
 8008768:	4621      	mov	r1, r4
 800876a:	4628      	mov	r0, r5
 800876c:	f000 f80c 	bl	8008788 <__swsetup_r>
 8008770:	2800      	cmp	r0, #0
 8008772:	d0cb      	beq.n	800870c <__swbuf_r+0x28>
 8008774:	f04f 37ff 	mov.w	r7, #4294967295
 8008778:	e7ea      	b.n	8008750 <__swbuf_r+0x6c>
 800877a:	bf00      	nop
 800877c:	0800acc4 	.word	0x0800acc4
 8008780:	0800ace4 	.word	0x0800ace4
 8008784:	0800aca4 	.word	0x0800aca4

08008788 <__swsetup_r>:
 8008788:	4b32      	ldr	r3, [pc, #200]	; (8008854 <__swsetup_r+0xcc>)
 800878a:	b570      	push	{r4, r5, r6, lr}
 800878c:	681d      	ldr	r5, [r3, #0]
 800878e:	4606      	mov	r6, r0
 8008790:	460c      	mov	r4, r1
 8008792:	b125      	cbz	r5, 800879e <__swsetup_r+0x16>
 8008794:	69ab      	ldr	r3, [r5, #24]
 8008796:	b913      	cbnz	r3, 800879e <__swsetup_r+0x16>
 8008798:	4628      	mov	r0, r5
 800879a:	f000 fff7 	bl	800978c <__sinit>
 800879e:	4b2e      	ldr	r3, [pc, #184]	; (8008858 <__swsetup_r+0xd0>)
 80087a0:	429c      	cmp	r4, r3
 80087a2:	d10f      	bne.n	80087c4 <__swsetup_r+0x3c>
 80087a4:	686c      	ldr	r4, [r5, #4]
 80087a6:	89a3      	ldrh	r3, [r4, #12]
 80087a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087ac:	0719      	lsls	r1, r3, #28
 80087ae:	d42c      	bmi.n	800880a <__swsetup_r+0x82>
 80087b0:	06dd      	lsls	r5, r3, #27
 80087b2:	d411      	bmi.n	80087d8 <__swsetup_r+0x50>
 80087b4:	2309      	movs	r3, #9
 80087b6:	6033      	str	r3, [r6, #0]
 80087b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80087bc:	81a3      	strh	r3, [r4, #12]
 80087be:	f04f 30ff 	mov.w	r0, #4294967295
 80087c2:	e03e      	b.n	8008842 <__swsetup_r+0xba>
 80087c4:	4b25      	ldr	r3, [pc, #148]	; (800885c <__swsetup_r+0xd4>)
 80087c6:	429c      	cmp	r4, r3
 80087c8:	d101      	bne.n	80087ce <__swsetup_r+0x46>
 80087ca:	68ac      	ldr	r4, [r5, #8]
 80087cc:	e7eb      	b.n	80087a6 <__swsetup_r+0x1e>
 80087ce:	4b24      	ldr	r3, [pc, #144]	; (8008860 <__swsetup_r+0xd8>)
 80087d0:	429c      	cmp	r4, r3
 80087d2:	bf08      	it	eq
 80087d4:	68ec      	ldreq	r4, [r5, #12]
 80087d6:	e7e6      	b.n	80087a6 <__swsetup_r+0x1e>
 80087d8:	0758      	lsls	r0, r3, #29
 80087da:	d512      	bpl.n	8008802 <__swsetup_r+0x7a>
 80087dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087de:	b141      	cbz	r1, 80087f2 <__swsetup_r+0x6a>
 80087e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087e4:	4299      	cmp	r1, r3
 80087e6:	d002      	beq.n	80087ee <__swsetup_r+0x66>
 80087e8:	4630      	mov	r0, r6
 80087ea:	f7ff f9b3 	bl	8007b54 <_free_r>
 80087ee:	2300      	movs	r3, #0
 80087f0:	6363      	str	r3, [r4, #52]	; 0x34
 80087f2:	89a3      	ldrh	r3, [r4, #12]
 80087f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80087f8:	81a3      	strh	r3, [r4, #12]
 80087fa:	2300      	movs	r3, #0
 80087fc:	6063      	str	r3, [r4, #4]
 80087fe:	6923      	ldr	r3, [r4, #16]
 8008800:	6023      	str	r3, [r4, #0]
 8008802:	89a3      	ldrh	r3, [r4, #12]
 8008804:	f043 0308 	orr.w	r3, r3, #8
 8008808:	81a3      	strh	r3, [r4, #12]
 800880a:	6923      	ldr	r3, [r4, #16]
 800880c:	b94b      	cbnz	r3, 8008822 <__swsetup_r+0x9a>
 800880e:	89a3      	ldrh	r3, [r4, #12]
 8008810:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008818:	d003      	beq.n	8008822 <__swsetup_r+0x9a>
 800881a:	4621      	mov	r1, r4
 800881c:	4630      	mov	r0, r6
 800881e:	f001 f87f 	bl	8009920 <__smakebuf_r>
 8008822:	89a0      	ldrh	r0, [r4, #12]
 8008824:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008828:	f010 0301 	ands.w	r3, r0, #1
 800882c:	d00a      	beq.n	8008844 <__swsetup_r+0xbc>
 800882e:	2300      	movs	r3, #0
 8008830:	60a3      	str	r3, [r4, #8]
 8008832:	6963      	ldr	r3, [r4, #20]
 8008834:	425b      	negs	r3, r3
 8008836:	61a3      	str	r3, [r4, #24]
 8008838:	6923      	ldr	r3, [r4, #16]
 800883a:	b943      	cbnz	r3, 800884e <__swsetup_r+0xc6>
 800883c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008840:	d1ba      	bne.n	80087b8 <__swsetup_r+0x30>
 8008842:	bd70      	pop	{r4, r5, r6, pc}
 8008844:	0781      	lsls	r1, r0, #30
 8008846:	bf58      	it	pl
 8008848:	6963      	ldrpl	r3, [r4, #20]
 800884a:	60a3      	str	r3, [r4, #8]
 800884c:	e7f4      	b.n	8008838 <__swsetup_r+0xb0>
 800884e:	2000      	movs	r0, #0
 8008850:	e7f7      	b.n	8008842 <__swsetup_r+0xba>
 8008852:	bf00      	nop
 8008854:	20000034 	.word	0x20000034
 8008858:	0800acc4 	.word	0x0800acc4
 800885c:	0800ace4 	.word	0x0800ace4
 8008860:	0800aca4 	.word	0x0800aca4

08008864 <quorem>:
 8008864:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008868:	6903      	ldr	r3, [r0, #16]
 800886a:	690c      	ldr	r4, [r1, #16]
 800886c:	42a3      	cmp	r3, r4
 800886e:	4607      	mov	r7, r0
 8008870:	f2c0 8081 	blt.w	8008976 <quorem+0x112>
 8008874:	3c01      	subs	r4, #1
 8008876:	f101 0814 	add.w	r8, r1, #20
 800887a:	f100 0514 	add.w	r5, r0, #20
 800887e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008882:	9301      	str	r3, [sp, #4]
 8008884:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008888:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800888c:	3301      	adds	r3, #1
 800888e:	429a      	cmp	r2, r3
 8008890:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008894:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008898:	fbb2 f6f3 	udiv	r6, r2, r3
 800889c:	d331      	bcc.n	8008902 <quorem+0x9e>
 800889e:	f04f 0e00 	mov.w	lr, #0
 80088a2:	4640      	mov	r0, r8
 80088a4:	46ac      	mov	ip, r5
 80088a6:	46f2      	mov	sl, lr
 80088a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80088ac:	b293      	uxth	r3, r2
 80088ae:	fb06 e303 	mla	r3, r6, r3, lr
 80088b2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	ebaa 0303 	sub.w	r3, sl, r3
 80088bc:	0c12      	lsrs	r2, r2, #16
 80088be:	f8dc a000 	ldr.w	sl, [ip]
 80088c2:	fb06 e202 	mla	r2, r6, r2, lr
 80088c6:	fa13 f38a 	uxtah	r3, r3, sl
 80088ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80088ce:	fa1f fa82 	uxth.w	sl, r2
 80088d2:	f8dc 2000 	ldr.w	r2, [ip]
 80088d6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80088da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80088de:	b29b      	uxth	r3, r3
 80088e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088e4:	4581      	cmp	r9, r0
 80088e6:	f84c 3b04 	str.w	r3, [ip], #4
 80088ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80088ee:	d2db      	bcs.n	80088a8 <quorem+0x44>
 80088f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80088f4:	b92b      	cbnz	r3, 8008902 <quorem+0x9e>
 80088f6:	9b01      	ldr	r3, [sp, #4]
 80088f8:	3b04      	subs	r3, #4
 80088fa:	429d      	cmp	r5, r3
 80088fc:	461a      	mov	r2, r3
 80088fe:	d32e      	bcc.n	800895e <quorem+0xfa>
 8008900:	613c      	str	r4, [r7, #16]
 8008902:	4638      	mov	r0, r7
 8008904:	f001 fad6 	bl	8009eb4 <__mcmp>
 8008908:	2800      	cmp	r0, #0
 800890a:	db24      	blt.n	8008956 <quorem+0xf2>
 800890c:	3601      	adds	r6, #1
 800890e:	4628      	mov	r0, r5
 8008910:	f04f 0c00 	mov.w	ip, #0
 8008914:	f858 2b04 	ldr.w	r2, [r8], #4
 8008918:	f8d0 e000 	ldr.w	lr, [r0]
 800891c:	b293      	uxth	r3, r2
 800891e:	ebac 0303 	sub.w	r3, ip, r3
 8008922:	0c12      	lsrs	r2, r2, #16
 8008924:	fa13 f38e 	uxtah	r3, r3, lr
 8008928:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800892c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008930:	b29b      	uxth	r3, r3
 8008932:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008936:	45c1      	cmp	r9, r8
 8008938:	f840 3b04 	str.w	r3, [r0], #4
 800893c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008940:	d2e8      	bcs.n	8008914 <quorem+0xb0>
 8008942:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008946:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800894a:	b922      	cbnz	r2, 8008956 <quorem+0xf2>
 800894c:	3b04      	subs	r3, #4
 800894e:	429d      	cmp	r5, r3
 8008950:	461a      	mov	r2, r3
 8008952:	d30a      	bcc.n	800896a <quorem+0x106>
 8008954:	613c      	str	r4, [r7, #16]
 8008956:	4630      	mov	r0, r6
 8008958:	b003      	add	sp, #12
 800895a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800895e:	6812      	ldr	r2, [r2, #0]
 8008960:	3b04      	subs	r3, #4
 8008962:	2a00      	cmp	r2, #0
 8008964:	d1cc      	bne.n	8008900 <quorem+0x9c>
 8008966:	3c01      	subs	r4, #1
 8008968:	e7c7      	b.n	80088fa <quorem+0x96>
 800896a:	6812      	ldr	r2, [r2, #0]
 800896c:	3b04      	subs	r3, #4
 800896e:	2a00      	cmp	r2, #0
 8008970:	d1f0      	bne.n	8008954 <quorem+0xf0>
 8008972:	3c01      	subs	r4, #1
 8008974:	e7eb      	b.n	800894e <quorem+0xea>
 8008976:	2000      	movs	r0, #0
 8008978:	e7ee      	b.n	8008958 <quorem+0xf4>
 800897a:	0000      	movs	r0, r0
 800897c:	0000      	movs	r0, r0
	...

08008980 <_dtoa_r>:
 8008980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008984:	ed2d 8b02 	vpush	{d8}
 8008988:	ec57 6b10 	vmov	r6, r7, d0
 800898c:	b095      	sub	sp, #84	; 0x54
 800898e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008990:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008994:	9105      	str	r1, [sp, #20]
 8008996:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800899a:	4604      	mov	r4, r0
 800899c:	9209      	str	r2, [sp, #36]	; 0x24
 800899e:	930f      	str	r3, [sp, #60]	; 0x3c
 80089a0:	b975      	cbnz	r5, 80089c0 <_dtoa_r+0x40>
 80089a2:	2010      	movs	r0, #16
 80089a4:	f7ff f8b8 	bl	8007b18 <malloc>
 80089a8:	4602      	mov	r2, r0
 80089aa:	6260      	str	r0, [r4, #36]	; 0x24
 80089ac:	b920      	cbnz	r0, 80089b8 <_dtoa_r+0x38>
 80089ae:	4bb2      	ldr	r3, [pc, #712]	; (8008c78 <_dtoa_r+0x2f8>)
 80089b0:	21ea      	movs	r1, #234	; 0xea
 80089b2:	48b2      	ldr	r0, [pc, #712]	; (8008c7c <_dtoa_r+0x2fc>)
 80089b4:	f001 fd84 	bl	800a4c0 <__assert_func>
 80089b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80089bc:	6005      	str	r5, [r0, #0]
 80089be:	60c5      	str	r5, [r0, #12]
 80089c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089c2:	6819      	ldr	r1, [r3, #0]
 80089c4:	b151      	cbz	r1, 80089dc <_dtoa_r+0x5c>
 80089c6:	685a      	ldr	r2, [r3, #4]
 80089c8:	604a      	str	r2, [r1, #4]
 80089ca:	2301      	movs	r3, #1
 80089cc:	4093      	lsls	r3, r2
 80089ce:	608b      	str	r3, [r1, #8]
 80089d0:	4620      	mov	r0, r4
 80089d2:	f001 f831 	bl	8009a38 <_Bfree>
 80089d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089d8:	2200      	movs	r2, #0
 80089da:	601a      	str	r2, [r3, #0]
 80089dc:	1e3b      	subs	r3, r7, #0
 80089de:	bfb9      	ittee	lt
 80089e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80089e4:	9303      	strlt	r3, [sp, #12]
 80089e6:	2300      	movge	r3, #0
 80089e8:	f8c8 3000 	strge.w	r3, [r8]
 80089ec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80089f0:	4ba3      	ldr	r3, [pc, #652]	; (8008c80 <_dtoa_r+0x300>)
 80089f2:	bfbc      	itt	lt
 80089f4:	2201      	movlt	r2, #1
 80089f6:	f8c8 2000 	strlt.w	r2, [r8]
 80089fa:	ea33 0309 	bics.w	r3, r3, r9
 80089fe:	d11b      	bne.n	8008a38 <_dtoa_r+0xb8>
 8008a00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a02:	f242 730f 	movw	r3, #9999	; 0x270f
 8008a06:	6013      	str	r3, [r2, #0]
 8008a08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a0c:	4333      	orrs	r3, r6
 8008a0e:	f000 857a 	beq.w	8009506 <_dtoa_r+0xb86>
 8008a12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a14:	b963      	cbnz	r3, 8008a30 <_dtoa_r+0xb0>
 8008a16:	4b9b      	ldr	r3, [pc, #620]	; (8008c84 <_dtoa_r+0x304>)
 8008a18:	e024      	b.n	8008a64 <_dtoa_r+0xe4>
 8008a1a:	4b9b      	ldr	r3, [pc, #620]	; (8008c88 <_dtoa_r+0x308>)
 8008a1c:	9300      	str	r3, [sp, #0]
 8008a1e:	3308      	adds	r3, #8
 8008a20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a22:	6013      	str	r3, [r2, #0]
 8008a24:	9800      	ldr	r0, [sp, #0]
 8008a26:	b015      	add	sp, #84	; 0x54
 8008a28:	ecbd 8b02 	vpop	{d8}
 8008a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a30:	4b94      	ldr	r3, [pc, #592]	; (8008c84 <_dtoa_r+0x304>)
 8008a32:	9300      	str	r3, [sp, #0]
 8008a34:	3303      	adds	r3, #3
 8008a36:	e7f3      	b.n	8008a20 <_dtoa_r+0xa0>
 8008a38:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	ec51 0b17 	vmov	r0, r1, d7
 8008a42:	2300      	movs	r3, #0
 8008a44:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008a48:	f7f8 f83e 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a4c:	4680      	mov	r8, r0
 8008a4e:	b158      	cbz	r0, 8008a68 <_dtoa_r+0xe8>
 8008a50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a52:	2301      	movs	r3, #1
 8008a54:	6013      	str	r3, [r2, #0]
 8008a56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f000 8551 	beq.w	8009500 <_dtoa_r+0xb80>
 8008a5e:	488b      	ldr	r0, [pc, #556]	; (8008c8c <_dtoa_r+0x30c>)
 8008a60:	6018      	str	r0, [r3, #0]
 8008a62:	1e43      	subs	r3, r0, #1
 8008a64:	9300      	str	r3, [sp, #0]
 8008a66:	e7dd      	b.n	8008a24 <_dtoa_r+0xa4>
 8008a68:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008a6c:	aa12      	add	r2, sp, #72	; 0x48
 8008a6e:	a913      	add	r1, sp, #76	; 0x4c
 8008a70:	4620      	mov	r0, r4
 8008a72:	f001 fac3 	bl	8009ffc <__d2b>
 8008a76:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008a7a:	4683      	mov	fp, r0
 8008a7c:	2d00      	cmp	r5, #0
 8008a7e:	d07c      	beq.n	8008b7a <_dtoa_r+0x1fa>
 8008a80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a82:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008a86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a8a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008a8e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008a92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008a96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008a9a:	4b7d      	ldr	r3, [pc, #500]	; (8008c90 <_dtoa_r+0x310>)
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	4630      	mov	r0, r6
 8008aa0:	4639      	mov	r1, r7
 8008aa2:	f7f7 fbf1 	bl	8000288 <__aeabi_dsub>
 8008aa6:	a36e      	add	r3, pc, #440	; (adr r3, 8008c60 <_dtoa_r+0x2e0>)
 8008aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aac:	f7f7 fda4 	bl	80005f8 <__aeabi_dmul>
 8008ab0:	a36d      	add	r3, pc, #436	; (adr r3, 8008c68 <_dtoa_r+0x2e8>)
 8008ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab6:	f7f7 fbe9 	bl	800028c <__adddf3>
 8008aba:	4606      	mov	r6, r0
 8008abc:	4628      	mov	r0, r5
 8008abe:	460f      	mov	r7, r1
 8008ac0:	f7f7 fd30 	bl	8000524 <__aeabi_i2d>
 8008ac4:	a36a      	add	r3, pc, #424	; (adr r3, 8008c70 <_dtoa_r+0x2f0>)
 8008ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aca:	f7f7 fd95 	bl	80005f8 <__aeabi_dmul>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	4630      	mov	r0, r6
 8008ad4:	4639      	mov	r1, r7
 8008ad6:	f7f7 fbd9 	bl	800028c <__adddf3>
 8008ada:	4606      	mov	r6, r0
 8008adc:	460f      	mov	r7, r1
 8008ade:	f7f8 f83b 	bl	8000b58 <__aeabi_d2iz>
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	4682      	mov	sl, r0
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	4630      	mov	r0, r6
 8008aea:	4639      	mov	r1, r7
 8008aec:	f7f7 fff6 	bl	8000adc <__aeabi_dcmplt>
 8008af0:	b148      	cbz	r0, 8008b06 <_dtoa_r+0x186>
 8008af2:	4650      	mov	r0, sl
 8008af4:	f7f7 fd16 	bl	8000524 <__aeabi_i2d>
 8008af8:	4632      	mov	r2, r6
 8008afa:	463b      	mov	r3, r7
 8008afc:	f7f7 ffe4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b00:	b908      	cbnz	r0, 8008b06 <_dtoa_r+0x186>
 8008b02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b06:	f1ba 0f16 	cmp.w	sl, #22
 8008b0a:	d854      	bhi.n	8008bb6 <_dtoa_r+0x236>
 8008b0c:	4b61      	ldr	r3, [pc, #388]	; (8008c94 <_dtoa_r+0x314>)
 8008b0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008b1a:	f7f7 ffdf 	bl	8000adc <__aeabi_dcmplt>
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	d04b      	beq.n	8008bba <_dtoa_r+0x23a>
 8008b22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b26:	2300      	movs	r3, #0
 8008b28:	930e      	str	r3, [sp, #56]	; 0x38
 8008b2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008b2c:	1b5d      	subs	r5, r3, r5
 8008b2e:	1e6b      	subs	r3, r5, #1
 8008b30:	9304      	str	r3, [sp, #16]
 8008b32:	bf43      	ittte	mi
 8008b34:	2300      	movmi	r3, #0
 8008b36:	f1c5 0801 	rsbmi	r8, r5, #1
 8008b3a:	9304      	strmi	r3, [sp, #16]
 8008b3c:	f04f 0800 	movpl.w	r8, #0
 8008b40:	f1ba 0f00 	cmp.w	sl, #0
 8008b44:	db3b      	blt.n	8008bbe <_dtoa_r+0x23e>
 8008b46:	9b04      	ldr	r3, [sp, #16]
 8008b48:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008b4c:	4453      	add	r3, sl
 8008b4e:	9304      	str	r3, [sp, #16]
 8008b50:	2300      	movs	r3, #0
 8008b52:	9306      	str	r3, [sp, #24]
 8008b54:	9b05      	ldr	r3, [sp, #20]
 8008b56:	2b09      	cmp	r3, #9
 8008b58:	d869      	bhi.n	8008c2e <_dtoa_r+0x2ae>
 8008b5a:	2b05      	cmp	r3, #5
 8008b5c:	bfc4      	itt	gt
 8008b5e:	3b04      	subgt	r3, #4
 8008b60:	9305      	strgt	r3, [sp, #20]
 8008b62:	9b05      	ldr	r3, [sp, #20]
 8008b64:	f1a3 0302 	sub.w	r3, r3, #2
 8008b68:	bfcc      	ite	gt
 8008b6a:	2500      	movgt	r5, #0
 8008b6c:	2501      	movle	r5, #1
 8008b6e:	2b03      	cmp	r3, #3
 8008b70:	d869      	bhi.n	8008c46 <_dtoa_r+0x2c6>
 8008b72:	e8df f003 	tbb	[pc, r3]
 8008b76:	4e2c      	.short	0x4e2c
 8008b78:	5a4c      	.short	0x5a4c
 8008b7a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008b7e:	441d      	add	r5, r3
 8008b80:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008b84:	2b20      	cmp	r3, #32
 8008b86:	bfc1      	itttt	gt
 8008b88:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008b8c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008b90:	fa09 f303 	lslgt.w	r3, r9, r3
 8008b94:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008b98:	bfda      	itte	le
 8008b9a:	f1c3 0320 	rsble	r3, r3, #32
 8008b9e:	fa06 f003 	lslle.w	r0, r6, r3
 8008ba2:	4318      	orrgt	r0, r3
 8008ba4:	f7f7 fcae 	bl	8000504 <__aeabi_ui2d>
 8008ba8:	2301      	movs	r3, #1
 8008baa:	4606      	mov	r6, r0
 8008bac:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008bb0:	3d01      	subs	r5, #1
 8008bb2:	9310      	str	r3, [sp, #64]	; 0x40
 8008bb4:	e771      	b.n	8008a9a <_dtoa_r+0x11a>
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e7b6      	b.n	8008b28 <_dtoa_r+0x1a8>
 8008bba:	900e      	str	r0, [sp, #56]	; 0x38
 8008bbc:	e7b5      	b.n	8008b2a <_dtoa_r+0x1aa>
 8008bbe:	f1ca 0300 	rsb	r3, sl, #0
 8008bc2:	9306      	str	r3, [sp, #24]
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	eba8 080a 	sub.w	r8, r8, sl
 8008bca:	930d      	str	r3, [sp, #52]	; 0x34
 8008bcc:	e7c2      	b.n	8008b54 <_dtoa_r+0x1d4>
 8008bce:	2300      	movs	r3, #0
 8008bd0:	9308      	str	r3, [sp, #32]
 8008bd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	dc39      	bgt.n	8008c4c <_dtoa_r+0x2cc>
 8008bd8:	f04f 0901 	mov.w	r9, #1
 8008bdc:	f8cd 9004 	str.w	r9, [sp, #4]
 8008be0:	464b      	mov	r3, r9
 8008be2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008be6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008be8:	2200      	movs	r2, #0
 8008bea:	6042      	str	r2, [r0, #4]
 8008bec:	2204      	movs	r2, #4
 8008bee:	f102 0614 	add.w	r6, r2, #20
 8008bf2:	429e      	cmp	r6, r3
 8008bf4:	6841      	ldr	r1, [r0, #4]
 8008bf6:	d92f      	bls.n	8008c58 <_dtoa_r+0x2d8>
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	f000 fedd 	bl	80099b8 <_Balloc>
 8008bfe:	9000      	str	r0, [sp, #0]
 8008c00:	2800      	cmp	r0, #0
 8008c02:	d14b      	bne.n	8008c9c <_dtoa_r+0x31c>
 8008c04:	4b24      	ldr	r3, [pc, #144]	; (8008c98 <_dtoa_r+0x318>)
 8008c06:	4602      	mov	r2, r0
 8008c08:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008c0c:	e6d1      	b.n	80089b2 <_dtoa_r+0x32>
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e7de      	b.n	8008bd0 <_dtoa_r+0x250>
 8008c12:	2300      	movs	r3, #0
 8008c14:	9308      	str	r3, [sp, #32]
 8008c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c18:	eb0a 0903 	add.w	r9, sl, r3
 8008c1c:	f109 0301 	add.w	r3, r9, #1
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	9301      	str	r3, [sp, #4]
 8008c24:	bfb8      	it	lt
 8008c26:	2301      	movlt	r3, #1
 8008c28:	e7dd      	b.n	8008be6 <_dtoa_r+0x266>
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e7f2      	b.n	8008c14 <_dtoa_r+0x294>
 8008c2e:	2501      	movs	r5, #1
 8008c30:	2300      	movs	r3, #0
 8008c32:	9305      	str	r3, [sp, #20]
 8008c34:	9508      	str	r5, [sp, #32]
 8008c36:	f04f 39ff 	mov.w	r9, #4294967295
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008c40:	2312      	movs	r3, #18
 8008c42:	9209      	str	r2, [sp, #36]	; 0x24
 8008c44:	e7cf      	b.n	8008be6 <_dtoa_r+0x266>
 8008c46:	2301      	movs	r3, #1
 8008c48:	9308      	str	r3, [sp, #32]
 8008c4a:	e7f4      	b.n	8008c36 <_dtoa_r+0x2b6>
 8008c4c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008c50:	f8cd 9004 	str.w	r9, [sp, #4]
 8008c54:	464b      	mov	r3, r9
 8008c56:	e7c6      	b.n	8008be6 <_dtoa_r+0x266>
 8008c58:	3101      	adds	r1, #1
 8008c5a:	6041      	str	r1, [r0, #4]
 8008c5c:	0052      	lsls	r2, r2, #1
 8008c5e:	e7c6      	b.n	8008bee <_dtoa_r+0x26e>
 8008c60:	636f4361 	.word	0x636f4361
 8008c64:	3fd287a7 	.word	0x3fd287a7
 8008c68:	8b60c8b3 	.word	0x8b60c8b3
 8008c6c:	3fc68a28 	.word	0x3fc68a28
 8008c70:	509f79fb 	.word	0x509f79fb
 8008c74:	3fd34413 	.word	0x3fd34413
 8008c78:	0800ac1d 	.word	0x0800ac1d
 8008c7c:	0800ac34 	.word	0x0800ac34
 8008c80:	7ff00000 	.word	0x7ff00000
 8008c84:	0800ac19 	.word	0x0800ac19
 8008c88:	0800ac10 	.word	0x0800ac10
 8008c8c:	0800abed 	.word	0x0800abed
 8008c90:	3ff80000 	.word	0x3ff80000
 8008c94:	0800ad90 	.word	0x0800ad90
 8008c98:	0800ac93 	.word	0x0800ac93
 8008c9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c9e:	9a00      	ldr	r2, [sp, #0]
 8008ca0:	601a      	str	r2, [r3, #0]
 8008ca2:	9b01      	ldr	r3, [sp, #4]
 8008ca4:	2b0e      	cmp	r3, #14
 8008ca6:	f200 80ad 	bhi.w	8008e04 <_dtoa_r+0x484>
 8008caa:	2d00      	cmp	r5, #0
 8008cac:	f000 80aa 	beq.w	8008e04 <_dtoa_r+0x484>
 8008cb0:	f1ba 0f00 	cmp.w	sl, #0
 8008cb4:	dd36      	ble.n	8008d24 <_dtoa_r+0x3a4>
 8008cb6:	4ac3      	ldr	r2, [pc, #780]	; (8008fc4 <_dtoa_r+0x644>)
 8008cb8:	f00a 030f 	and.w	r3, sl, #15
 8008cbc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008cc0:	ed93 7b00 	vldr	d7, [r3]
 8008cc4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008cc8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008ccc:	eeb0 8a47 	vmov.f32	s16, s14
 8008cd0:	eef0 8a67 	vmov.f32	s17, s15
 8008cd4:	d016      	beq.n	8008d04 <_dtoa_r+0x384>
 8008cd6:	4bbc      	ldr	r3, [pc, #752]	; (8008fc8 <_dtoa_r+0x648>)
 8008cd8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008cdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ce0:	f7f7 fdb4 	bl	800084c <__aeabi_ddiv>
 8008ce4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ce8:	f007 070f 	and.w	r7, r7, #15
 8008cec:	2503      	movs	r5, #3
 8008cee:	4eb6      	ldr	r6, [pc, #728]	; (8008fc8 <_dtoa_r+0x648>)
 8008cf0:	b957      	cbnz	r7, 8008d08 <_dtoa_r+0x388>
 8008cf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cf6:	ec53 2b18 	vmov	r2, r3, d8
 8008cfa:	f7f7 fda7 	bl	800084c <__aeabi_ddiv>
 8008cfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d02:	e029      	b.n	8008d58 <_dtoa_r+0x3d8>
 8008d04:	2502      	movs	r5, #2
 8008d06:	e7f2      	b.n	8008cee <_dtoa_r+0x36e>
 8008d08:	07f9      	lsls	r1, r7, #31
 8008d0a:	d508      	bpl.n	8008d1e <_dtoa_r+0x39e>
 8008d0c:	ec51 0b18 	vmov	r0, r1, d8
 8008d10:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008d14:	f7f7 fc70 	bl	80005f8 <__aeabi_dmul>
 8008d18:	ec41 0b18 	vmov	d8, r0, r1
 8008d1c:	3501      	adds	r5, #1
 8008d1e:	107f      	asrs	r7, r7, #1
 8008d20:	3608      	adds	r6, #8
 8008d22:	e7e5      	b.n	8008cf0 <_dtoa_r+0x370>
 8008d24:	f000 80a6 	beq.w	8008e74 <_dtoa_r+0x4f4>
 8008d28:	f1ca 0600 	rsb	r6, sl, #0
 8008d2c:	4ba5      	ldr	r3, [pc, #660]	; (8008fc4 <_dtoa_r+0x644>)
 8008d2e:	4fa6      	ldr	r7, [pc, #664]	; (8008fc8 <_dtoa_r+0x648>)
 8008d30:	f006 020f 	and.w	r2, r6, #15
 8008d34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008d40:	f7f7 fc5a 	bl	80005f8 <__aeabi_dmul>
 8008d44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d48:	1136      	asrs	r6, r6, #4
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	2502      	movs	r5, #2
 8008d4e:	2e00      	cmp	r6, #0
 8008d50:	f040 8085 	bne.w	8008e5e <_dtoa_r+0x4de>
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d1d2      	bne.n	8008cfe <_dtoa_r+0x37e>
 8008d58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	f000 808c 	beq.w	8008e78 <_dtoa_r+0x4f8>
 8008d60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008d64:	4b99      	ldr	r3, [pc, #612]	; (8008fcc <_dtoa_r+0x64c>)
 8008d66:	2200      	movs	r2, #0
 8008d68:	4630      	mov	r0, r6
 8008d6a:	4639      	mov	r1, r7
 8008d6c:	f7f7 feb6 	bl	8000adc <__aeabi_dcmplt>
 8008d70:	2800      	cmp	r0, #0
 8008d72:	f000 8081 	beq.w	8008e78 <_dtoa_r+0x4f8>
 8008d76:	9b01      	ldr	r3, [sp, #4]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d07d      	beq.n	8008e78 <_dtoa_r+0x4f8>
 8008d7c:	f1b9 0f00 	cmp.w	r9, #0
 8008d80:	dd3c      	ble.n	8008dfc <_dtoa_r+0x47c>
 8008d82:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008d86:	9307      	str	r3, [sp, #28]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	4b91      	ldr	r3, [pc, #580]	; (8008fd0 <_dtoa_r+0x650>)
 8008d8c:	4630      	mov	r0, r6
 8008d8e:	4639      	mov	r1, r7
 8008d90:	f7f7 fc32 	bl	80005f8 <__aeabi_dmul>
 8008d94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d98:	3501      	adds	r5, #1
 8008d9a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008d9e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008da2:	4628      	mov	r0, r5
 8008da4:	f7f7 fbbe 	bl	8000524 <__aeabi_i2d>
 8008da8:	4632      	mov	r2, r6
 8008daa:	463b      	mov	r3, r7
 8008dac:	f7f7 fc24 	bl	80005f8 <__aeabi_dmul>
 8008db0:	4b88      	ldr	r3, [pc, #544]	; (8008fd4 <_dtoa_r+0x654>)
 8008db2:	2200      	movs	r2, #0
 8008db4:	f7f7 fa6a 	bl	800028c <__adddf3>
 8008db8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008dbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008dc0:	9303      	str	r3, [sp, #12]
 8008dc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d15c      	bne.n	8008e82 <_dtoa_r+0x502>
 8008dc8:	4b83      	ldr	r3, [pc, #524]	; (8008fd8 <_dtoa_r+0x658>)
 8008dca:	2200      	movs	r2, #0
 8008dcc:	4630      	mov	r0, r6
 8008dce:	4639      	mov	r1, r7
 8008dd0:	f7f7 fa5a 	bl	8000288 <__aeabi_dsub>
 8008dd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008dd8:	4606      	mov	r6, r0
 8008dda:	460f      	mov	r7, r1
 8008ddc:	f7f7 fe9c 	bl	8000b18 <__aeabi_dcmpgt>
 8008de0:	2800      	cmp	r0, #0
 8008de2:	f040 8296 	bne.w	8009312 <_dtoa_r+0x992>
 8008de6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008dea:	4630      	mov	r0, r6
 8008dec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008df0:	4639      	mov	r1, r7
 8008df2:	f7f7 fe73 	bl	8000adc <__aeabi_dcmplt>
 8008df6:	2800      	cmp	r0, #0
 8008df8:	f040 8288 	bne.w	800930c <_dtoa_r+0x98c>
 8008dfc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008e00:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008e04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	f2c0 8158 	blt.w	80090bc <_dtoa_r+0x73c>
 8008e0c:	f1ba 0f0e 	cmp.w	sl, #14
 8008e10:	f300 8154 	bgt.w	80090bc <_dtoa_r+0x73c>
 8008e14:	4b6b      	ldr	r3, [pc, #428]	; (8008fc4 <_dtoa_r+0x644>)
 8008e16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008e1a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	f280 80e3 	bge.w	8008fec <_dtoa_r+0x66c>
 8008e26:	9b01      	ldr	r3, [sp, #4]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	f300 80df 	bgt.w	8008fec <_dtoa_r+0x66c>
 8008e2e:	f040 826d 	bne.w	800930c <_dtoa_r+0x98c>
 8008e32:	4b69      	ldr	r3, [pc, #420]	; (8008fd8 <_dtoa_r+0x658>)
 8008e34:	2200      	movs	r2, #0
 8008e36:	4640      	mov	r0, r8
 8008e38:	4649      	mov	r1, r9
 8008e3a:	f7f7 fbdd 	bl	80005f8 <__aeabi_dmul>
 8008e3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e42:	f7f7 fe5f 	bl	8000b04 <__aeabi_dcmpge>
 8008e46:	9e01      	ldr	r6, [sp, #4]
 8008e48:	4637      	mov	r7, r6
 8008e4a:	2800      	cmp	r0, #0
 8008e4c:	f040 8243 	bne.w	80092d6 <_dtoa_r+0x956>
 8008e50:	9d00      	ldr	r5, [sp, #0]
 8008e52:	2331      	movs	r3, #49	; 0x31
 8008e54:	f805 3b01 	strb.w	r3, [r5], #1
 8008e58:	f10a 0a01 	add.w	sl, sl, #1
 8008e5c:	e23f      	b.n	80092de <_dtoa_r+0x95e>
 8008e5e:	07f2      	lsls	r2, r6, #31
 8008e60:	d505      	bpl.n	8008e6e <_dtoa_r+0x4ee>
 8008e62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e66:	f7f7 fbc7 	bl	80005f8 <__aeabi_dmul>
 8008e6a:	3501      	adds	r5, #1
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	1076      	asrs	r6, r6, #1
 8008e70:	3708      	adds	r7, #8
 8008e72:	e76c      	b.n	8008d4e <_dtoa_r+0x3ce>
 8008e74:	2502      	movs	r5, #2
 8008e76:	e76f      	b.n	8008d58 <_dtoa_r+0x3d8>
 8008e78:	9b01      	ldr	r3, [sp, #4]
 8008e7a:	f8cd a01c 	str.w	sl, [sp, #28]
 8008e7e:	930c      	str	r3, [sp, #48]	; 0x30
 8008e80:	e78d      	b.n	8008d9e <_dtoa_r+0x41e>
 8008e82:	9900      	ldr	r1, [sp, #0]
 8008e84:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008e86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e88:	4b4e      	ldr	r3, [pc, #312]	; (8008fc4 <_dtoa_r+0x644>)
 8008e8a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e8e:	4401      	add	r1, r0
 8008e90:	9102      	str	r1, [sp, #8]
 8008e92:	9908      	ldr	r1, [sp, #32]
 8008e94:	eeb0 8a47 	vmov.f32	s16, s14
 8008e98:	eef0 8a67 	vmov.f32	s17, s15
 8008e9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ea0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008ea4:	2900      	cmp	r1, #0
 8008ea6:	d045      	beq.n	8008f34 <_dtoa_r+0x5b4>
 8008ea8:	494c      	ldr	r1, [pc, #304]	; (8008fdc <_dtoa_r+0x65c>)
 8008eaa:	2000      	movs	r0, #0
 8008eac:	f7f7 fcce 	bl	800084c <__aeabi_ddiv>
 8008eb0:	ec53 2b18 	vmov	r2, r3, d8
 8008eb4:	f7f7 f9e8 	bl	8000288 <__aeabi_dsub>
 8008eb8:	9d00      	ldr	r5, [sp, #0]
 8008eba:	ec41 0b18 	vmov	d8, r0, r1
 8008ebe:	4639      	mov	r1, r7
 8008ec0:	4630      	mov	r0, r6
 8008ec2:	f7f7 fe49 	bl	8000b58 <__aeabi_d2iz>
 8008ec6:	900c      	str	r0, [sp, #48]	; 0x30
 8008ec8:	f7f7 fb2c 	bl	8000524 <__aeabi_i2d>
 8008ecc:	4602      	mov	r2, r0
 8008ece:	460b      	mov	r3, r1
 8008ed0:	4630      	mov	r0, r6
 8008ed2:	4639      	mov	r1, r7
 8008ed4:	f7f7 f9d8 	bl	8000288 <__aeabi_dsub>
 8008ed8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008eda:	3330      	adds	r3, #48	; 0x30
 8008edc:	f805 3b01 	strb.w	r3, [r5], #1
 8008ee0:	ec53 2b18 	vmov	r2, r3, d8
 8008ee4:	4606      	mov	r6, r0
 8008ee6:	460f      	mov	r7, r1
 8008ee8:	f7f7 fdf8 	bl	8000adc <__aeabi_dcmplt>
 8008eec:	2800      	cmp	r0, #0
 8008eee:	d165      	bne.n	8008fbc <_dtoa_r+0x63c>
 8008ef0:	4632      	mov	r2, r6
 8008ef2:	463b      	mov	r3, r7
 8008ef4:	4935      	ldr	r1, [pc, #212]	; (8008fcc <_dtoa_r+0x64c>)
 8008ef6:	2000      	movs	r0, #0
 8008ef8:	f7f7 f9c6 	bl	8000288 <__aeabi_dsub>
 8008efc:	ec53 2b18 	vmov	r2, r3, d8
 8008f00:	f7f7 fdec 	bl	8000adc <__aeabi_dcmplt>
 8008f04:	2800      	cmp	r0, #0
 8008f06:	f040 80b9 	bne.w	800907c <_dtoa_r+0x6fc>
 8008f0a:	9b02      	ldr	r3, [sp, #8]
 8008f0c:	429d      	cmp	r5, r3
 8008f0e:	f43f af75 	beq.w	8008dfc <_dtoa_r+0x47c>
 8008f12:	4b2f      	ldr	r3, [pc, #188]	; (8008fd0 <_dtoa_r+0x650>)
 8008f14:	ec51 0b18 	vmov	r0, r1, d8
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f7f7 fb6d 	bl	80005f8 <__aeabi_dmul>
 8008f1e:	4b2c      	ldr	r3, [pc, #176]	; (8008fd0 <_dtoa_r+0x650>)
 8008f20:	ec41 0b18 	vmov	d8, r0, r1
 8008f24:	2200      	movs	r2, #0
 8008f26:	4630      	mov	r0, r6
 8008f28:	4639      	mov	r1, r7
 8008f2a:	f7f7 fb65 	bl	80005f8 <__aeabi_dmul>
 8008f2e:	4606      	mov	r6, r0
 8008f30:	460f      	mov	r7, r1
 8008f32:	e7c4      	b.n	8008ebe <_dtoa_r+0x53e>
 8008f34:	ec51 0b17 	vmov	r0, r1, d7
 8008f38:	f7f7 fb5e 	bl	80005f8 <__aeabi_dmul>
 8008f3c:	9b02      	ldr	r3, [sp, #8]
 8008f3e:	9d00      	ldr	r5, [sp, #0]
 8008f40:	930c      	str	r3, [sp, #48]	; 0x30
 8008f42:	ec41 0b18 	vmov	d8, r0, r1
 8008f46:	4639      	mov	r1, r7
 8008f48:	4630      	mov	r0, r6
 8008f4a:	f7f7 fe05 	bl	8000b58 <__aeabi_d2iz>
 8008f4e:	9011      	str	r0, [sp, #68]	; 0x44
 8008f50:	f7f7 fae8 	bl	8000524 <__aeabi_i2d>
 8008f54:	4602      	mov	r2, r0
 8008f56:	460b      	mov	r3, r1
 8008f58:	4630      	mov	r0, r6
 8008f5a:	4639      	mov	r1, r7
 8008f5c:	f7f7 f994 	bl	8000288 <__aeabi_dsub>
 8008f60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f62:	3330      	adds	r3, #48	; 0x30
 8008f64:	f805 3b01 	strb.w	r3, [r5], #1
 8008f68:	9b02      	ldr	r3, [sp, #8]
 8008f6a:	429d      	cmp	r5, r3
 8008f6c:	4606      	mov	r6, r0
 8008f6e:	460f      	mov	r7, r1
 8008f70:	f04f 0200 	mov.w	r2, #0
 8008f74:	d134      	bne.n	8008fe0 <_dtoa_r+0x660>
 8008f76:	4b19      	ldr	r3, [pc, #100]	; (8008fdc <_dtoa_r+0x65c>)
 8008f78:	ec51 0b18 	vmov	r0, r1, d8
 8008f7c:	f7f7 f986 	bl	800028c <__adddf3>
 8008f80:	4602      	mov	r2, r0
 8008f82:	460b      	mov	r3, r1
 8008f84:	4630      	mov	r0, r6
 8008f86:	4639      	mov	r1, r7
 8008f88:	f7f7 fdc6 	bl	8000b18 <__aeabi_dcmpgt>
 8008f8c:	2800      	cmp	r0, #0
 8008f8e:	d175      	bne.n	800907c <_dtoa_r+0x6fc>
 8008f90:	ec53 2b18 	vmov	r2, r3, d8
 8008f94:	4911      	ldr	r1, [pc, #68]	; (8008fdc <_dtoa_r+0x65c>)
 8008f96:	2000      	movs	r0, #0
 8008f98:	f7f7 f976 	bl	8000288 <__aeabi_dsub>
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	4639      	mov	r1, r7
 8008fa4:	f7f7 fd9a 	bl	8000adc <__aeabi_dcmplt>
 8008fa8:	2800      	cmp	r0, #0
 8008faa:	f43f af27 	beq.w	8008dfc <_dtoa_r+0x47c>
 8008fae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008fb0:	1e6b      	subs	r3, r5, #1
 8008fb2:	930c      	str	r3, [sp, #48]	; 0x30
 8008fb4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008fb8:	2b30      	cmp	r3, #48	; 0x30
 8008fba:	d0f8      	beq.n	8008fae <_dtoa_r+0x62e>
 8008fbc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008fc0:	e04a      	b.n	8009058 <_dtoa_r+0x6d8>
 8008fc2:	bf00      	nop
 8008fc4:	0800ad90 	.word	0x0800ad90
 8008fc8:	0800ad68 	.word	0x0800ad68
 8008fcc:	3ff00000 	.word	0x3ff00000
 8008fd0:	40240000 	.word	0x40240000
 8008fd4:	401c0000 	.word	0x401c0000
 8008fd8:	40140000 	.word	0x40140000
 8008fdc:	3fe00000 	.word	0x3fe00000
 8008fe0:	4baf      	ldr	r3, [pc, #700]	; (80092a0 <_dtoa_r+0x920>)
 8008fe2:	f7f7 fb09 	bl	80005f8 <__aeabi_dmul>
 8008fe6:	4606      	mov	r6, r0
 8008fe8:	460f      	mov	r7, r1
 8008fea:	e7ac      	b.n	8008f46 <_dtoa_r+0x5c6>
 8008fec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008ff0:	9d00      	ldr	r5, [sp, #0]
 8008ff2:	4642      	mov	r2, r8
 8008ff4:	464b      	mov	r3, r9
 8008ff6:	4630      	mov	r0, r6
 8008ff8:	4639      	mov	r1, r7
 8008ffa:	f7f7 fc27 	bl	800084c <__aeabi_ddiv>
 8008ffe:	f7f7 fdab 	bl	8000b58 <__aeabi_d2iz>
 8009002:	9002      	str	r0, [sp, #8]
 8009004:	f7f7 fa8e 	bl	8000524 <__aeabi_i2d>
 8009008:	4642      	mov	r2, r8
 800900a:	464b      	mov	r3, r9
 800900c:	f7f7 faf4 	bl	80005f8 <__aeabi_dmul>
 8009010:	4602      	mov	r2, r0
 8009012:	460b      	mov	r3, r1
 8009014:	4630      	mov	r0, r6
 8009016:	4639      	mov	r1, r7
 8009018:	f7f7 f936 	bl	8000288 <__aeabi_dsub>
 800901c:	9e02      	ldr	r6, [sp, #8]
 800901e:	9f01      	ldr	r7, [sp, #4]
 8009020:	3630      	adds	r6, #48	; 0x30
 8009022:	f805 6b01 	strb.w	r6, [r5], #1
 8009026:	9e00      	ldr	r6, [sp, #0]
 8009028:	1bae      	subs	r6, r5, r6
 800902a:	42b7      	cmp	r7, r6
 800902c:	4602      	mov	r2, r0
 800902e:	460b      	mov	r3, r1
 8009030:	d137      	bne.n	80090a2 <_dtoa_r+0x722>
 8009032:	f7f7 f92b 	bl	800028c <__adddf3>
 8009036:	4642      	mov	r2, r8
 8009038:	464b      	mov	r3, r9
 800903a:	4606      	mov	r6, r0
 800903c:	460f      	mov	r7, r1
 800903e:	f7f7 fd6b 	bl	8000b18 <__aeabi_dcmpgt>
 8009042:	b9c8      	cbnz	r0, 8009078 <_dtoa_r+0x6f8>
 8009044:	4642      	mov	r2, r8
 8009046:	464b      	mov	r3, r9
 8009048:	4630      	mov	r0, r6
 800904a:	4639      	mov	r1, r7
 800904c:	f7f7 fd3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009050:	b110      	cbz	r0, 8009058 <_dtoa_r+0x6d8>
 8009052:	9b02      	ldr	r3, [sp, #8]
 8009054:	07d9      	lsls	r1, r3, #31
 8009056:	d40f      	bmi.n	8009078 <_dtoa_r+0x6f8>
 8009058:	4620      	mov	r0, r4
 800905a:	4659      	mov	r1, fp
 800905c:	f000 fcec 	bl	8009a38 <_Bfree>
 8009060:	2300      	movs	r3, #0
 8009062:	702b      	strb	r3, [r5, #0]
 8009064:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009066:	f10a 0001 	add.w	r0, sl, #1
 800906a:	6018      	str	r0, [r3, #0]
 800906c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800906e:	2b00      	cmp	r3, #0
 8009070:	f43f acd8 	beq.w	8008a24 <_dtoa_r+0xa4>
 8009074:	601d      	str	r5, [r3, #0]
 8009076:	e4d5      	b.n	8008a24 <_dtoa_r+0xa4>
 8009078:	f8cd a01c 	str.w	sl, [sp, #28]
 800907c:	462b      	mov	r3, r5
 800907e:	461d      	mov	r5, r3
 8009080:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009084:	2a39      	cmp	r2, #57	; 0x39
 8009086:	d108      	bne.n	800909a <_dtoa_r+0x71a>
 8009088:	9a00      	ldr	r2, [sp, #0]
 800908a:	429a      	cmp	r2, r3
 800908c:	d1f7      	bne.n	800907e <_dtoa_r+0x6fe>
 800908e:	9a07      	ldr	r2, [sp, #28]
 8009090:	9900      	ldr	r1, [sp, #0]
 8009092:	3201      	adds	r2, #1
 8009094:	9207      	str	r2, [sp, #28]
 8009096:	2230      	movs	r2, #48	; 0x30
 8009098:	700a      	strb	r2, [r1, #0]
 800909a:	781a      	ldrb	r2, [r3, #0]
 800909c:	3201      	adds	r2, #1
 800909e:	701a      	strb	r2, [r3, #0]
 80090a0:	e78c      	b.n	8008fbc <_dtoa_r+0x63c>
 80090a2:	4b7f      	ldr	r3, [pc, #508]	; (80092a0 <_dtoa_r+0x920>)
 80090a4:	2200      	movs	r2, #0
 80090a6:	f7f7 faa7 	bl	80005f8 <__aeabi_dmul>
 80090aa:	2200      	movs	r2, #0
 80090ac:	2300      	movs	r3, #0
 80090ae:	4606      	mov	r6, r0
 80090b0:	460f      	mov	r7, r1
 80090b2:	f7f7 fd09 	bl	8000ac8 <__aeabi_dcmpeq>
 80090b6:	2800      	cmp	r0, #0
 80090b8:	d09b      	beq.n	8008ff2 <_dtoa_r+0x672>
 80090ba:	e7cd      	b.n	8009058 <_dtoa_r+0x6d8>
 80090bc:	9a08      	ldr	r2, [sp, #32]
 80090be:	2a00      	cmp	r2, #0
 80090c0:	f000 80c4 	beq.w	800924c <_dtoa_r+0x8cc>
 80090c4:	9a05      	ldr	r2, [sp, #20]
 80090c6:	2a01      	cmp	r2, #1
 80090c8:	f300 80a8 	bgt.w	800921c <_dtoa_r+0x89c>
 80090cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80090ce:	2a00      	cmp	r2, #0
 80090d0:	f000 80a0 	beq.w	8009214 <_dtoa_r+0x894>
 80090d4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80090d8:	9e06      	ldr	r6, [sp, #24]
 80090da:	4645      	mov	r5, r8
 80090dc:	9a04      	ldr	r2, [sp, #16]
 80090de:	2101      	movs	r1, #1
 80090e0:	441a      	add	r2, r3
 80090e2:	4620      	mov	r0, r4
 80090e4:	4498      	add	r8, r3
 80090e6:	9204      	str	r2, [sp, #16]
 80090e8:	f000 fd62 	bl	8009bb0 <__i2b>
 80090ec:	4607      	mov	r7, r0
 80090ee:	2d00      	cmp	r5, #0
 80090f0:	dd0b      	ble.n	800910a <_dtoa_r+0x78a>
 80090f2:	9b04      	ldr	r3, [sp, #16]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	dd08      	ble.n	800910a <_dtoa_r+0x78a>
 80090f8:	42ab      	cmp	r3, r5
 80090fa:	9a04      	ldr	r2, [sp, #16]
 80090fc:	bfa8      	it	ge
 80090fe:	462b      	movge	r3, r5
 8009100:	eba8 0803 	sub.w	r8, r8, r3
 8009104:	1aed      	subs	r5, r5, r3
 8009106:	1ad3      	subs	r3, r2, r3
 8009108:	9304      	str	r3, [sp, #16]
 800910a:	9b06      	ldr	r3, [sp, #24]
 800910c:	b1fb      	cbz	r3, 800914e <_dtoa_r+0x7ce>
 800910e:	9b08      	ldr	r3, [sp, #32]
 8009110:	2b00      	cmp	r3, #0
 8009112:	f000 809f 	beq.w	8009254 <_dtoa_r+0x8d4>
 8009116:	2e00      	cmp	r6, #0
 8009118:	dd11      	ble.n	800913e <_dtoa_r+0x7be>
 800911a:	4639      	mov	r1, r7
 800911c:	4632      	mov	r2, r6
 800911e:	4620      	mov	r0, r4
 8009120:	f000 fe02 	bl	8009d28 <__pow5mult>
 8009124:	465a      	mov	r2, fp
 8009126:	4601      	mov	r1, r0
 8009128:	4607      	mov	r7, r0
 800912a:	4620      	mov	r0, r4
 800912c:	f000 fd56 	bl	8009bdc <__multiply>
 8009130:	4659      	mov	r1, fp
 8009132:	9007      	str	r0, [sp, #28]
 8009134:	4620      	mov	r0, r4
 8009136:	f000 fc7f 	bl	8009a38 <_Bfree>
 800913a:	9b07      	ldr	r3, [sp, #28]
 800913c:	469b      	mov	fp, r3
 800913e:	9b06      	ldr	r3, [sp, #24]
 8009140:	1b9a      	subs	r2, r3, r6
 8009142:	d004      	beq.n	800914e <_dtoa_r+0x7ce>
 8009144:	4659      	mov	r1, fp
 8009146:	4620      	mov	r0, r4
 8009148:	f000 fdee 	bl	8009d28 <__pow5mult>
 800914c:	4683      	mov	fp, r0
 800914e:	2101      	movs	r1, #1
 8009150:	4620      	mov	r0, r4
 8009152:	f000 fd2d 	bl	8009bb0 <__i2b>
 8009156:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009158:	2b00      	cmp	r3, #0
 800915a:	4606      	mov	r6, r0
 800915c:	dd7c      	ble.n	8009258 <_dtoa_r+0x8d8>
 800915e:	461a      	mov	r2, r3
 8009160:	4601      	mov	r1, r0
 8009162:	4620      	mov	r0, r4
 8009164:	f000 fde0 	bl	8009d28 <__pow5mult>
 8009168:	9b05      	ldr	r3, [sp, #20]
 800916a:	2b01      	cmp	r3, #1
 800916c:	4606      	mov	r6, r0
 800916e:	dd76      	ble.n	800925e <_dtoa_r+0x8de>
 8009170:	2300      	movs	r3, #0
 8009172:	9306      	str	r3, [sp, #24]
 8009174:	6933      	ldr	r3, [r6, #16]
 8009176:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800917a:	6918      	ldr	r0, [r3, #16]
 800917c:	f000 fcc8 	bl	8009b10 <__hi0bits>
 8009180:	f1c0 0020 	rsb	r0, r0, #32
 8009184:	9b04      	ldr	r3, [sp, #16]
 8009186:	4418      	add	r0, r3
 8009188:	f010 001f 	ands.w	r0, r0, #31
 800918c:	f000 8086 	beq.w	800929c <_dtoa_r+0x91c>
 8009190:	f1c0 0320 	rsb	r3, r0, #32
 8009194:	2b04      	cmp	r3, #4
 8009196:	dd7f      	ble.n	8009298 <_dtoa_r+0x918>
 8009198:	f1c0 001c 	rsb	r0, r0, #28
 800919c:	9b04      	ldr	r3, [sp, #16]
 800919e:	4403      	add	r3, r0
 80091a0:	4480      	add	r8, r0
 80091a2:	4405      	add	r5, r0
 80091a4:	9304      	str	r3, [sp, #16]
 80091a6:	f1b8 0f00 	cmp.w	r8, #0
 80091aa:	dd05      	ble.n	80091b8 <_dtoa_r+0x838>
 80091ac:	4659      	mov	r1, fp
 80091ae:	4642      	mov	r2, r8
 80091b0:	4620      	mov	r0, r4
 80091b2:	f000 fe13 	bl	8009ddc <__lshift>
 80091b6:	4683      	mov	fp, r0
 80091b8:	9b04      	ldr	r3, [sp, #16]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	dd05      	ble.n	80091ca <_dtoa_r+0x84a>
 80091be:	4631      	mov	r1, r6
 80091c0:	461a      	mov	r2, r3
 80091c2:	4620      	mov	r0, r4
 80091c4:	f000 fe0a 	bl	8009ddc <__lshift>
 80091c8:	4606      	mov	r6, r0
 80091ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d069      	beq.n	80092a4 <_dtoa_r+0x924>
 80091d0:	4631      	mov	r1, r6
 80091d2:	4658      	mov	r0, fp
 80091d4:	f000 fe6e 	bl	8009eb4 <__mcmp>
 80091d8:	2800      	cmp	r0, #0
 80091da:	da63      	bge.n	80092a4 <_dtoa_r+0x924>
 80091dc:	2300      	movs	r3, #0
 80091de:	4659      	mov	r1, fp
 80091e0:	220a      	movs	r2, #10
 80091e2:	4620      	mov	r0, r4
 80091e4:	f000 fc4a 	bl	8009a7c <__multadd>
 80091e8:	9b08      	ldr	r3, [sp, #32]
 80091ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091ee:	4683      	mov	fp, r0
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	f000 818f 	beq.w	8009514 <_dtoa_r+0xb94>
 80091f6:	4639      	mov	r1, r7
 80091f8:	2300      	movs	r3, #0
 80091fa:	220a      	movs	r2, #10
 80091fc:	4620      	mov	r0, r4
 80091fe:	f000 fc3d 	bl	8009a7c <__multadd>
 8009202:	f1b9 0f00 	cmp.w	r9, #0
 8009206:	4607      	mov	r7, r0
 8009208:	f300 808e 	bgt.w	8009328 <_dtoa_r+0x9a8>
 800920c:	9b05      	ldr	r3, [sp, #20]
 800920e:	2b02      	cmp	r3, #2
 8009210:	dc50      	bgt.n	80092b4 <_dtoa_r+0x934>
 8009212:	e089      	b.n	8009328 <_dtoa_r+0x9a8>
 8009214:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009216:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800921a:	e75d      	b.n	80090d8 <_dtoa_r+0x758>
 800921c:	9b01      	ldr	r3, [sp, #4]
 800921e:	1e5e      	subs	r6, r3, #1
 8009220:	9b06      	ldr	r3, [sp, #24]
 8009222:	42b3      	cmp	r3, r6
 8009224:	bfbf      	itttt	lt
 8009226:	9b06      	ldrlt	r3, [sp, #24]
 8009228:	9606      	strlt	r6, [sp, #24]
 800922a:	1af2      	sublt	r2, r6, r3
 800922c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800922e:	bfb6      	itet	lt
 8009230:	189b      	addlt	r3, r3, r2
 8009232:	1b9e      	subge	r6, r3, r6
 8009234:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009236:	9b01      	ldr	r3, [sp, #4]
 8009238:	bfb8      	it	lt
 800923a:	2600      	movlt	r6, #0
 800923c:	2b00      	cmp	r3, #0
 800923e:	bfb5      	itete	lt
 8009240:	eba8 0503 	sublt.w	r5, r8, r3
 8009244:	9b01      	ldrge	r3, [sp, #4]
 8009246:	2300      	movlt	r3, #0
 8009248:	4645      	movge	r5, r8
 800924a:	e747      	b.n	80090dc <_dtoa_r+0x75c>
 800924c:	9e06      	ldr	r6, [sp, #24]
 800924e:	9f08      	ldr	r7, [sp, #32]
 8009250:	4645      	mov	r5, r8
 8009252:	e74c      	b.n	80090ee <_dtoa_r+0x76e>
 8009254:	9a06      	ldr	r2, [sp, #24]
 8009256:	e775      	b.n	8009144 <_dtoa_r+0x7c4>
 8009258:	9b05      	ldr	r3, [sp, #20]
 800925a:	2b01      	cmp	r3, #1
 800925c:	dc18      	bgt.n	8009290 <_dtoa_r+0x910>
 800925e:	9b02      	ldr	r3, [sp, #8]
 8009260:	b9b3      	cbnz	r3, 8009290 <_dtoa_r+0x910>
 8009262:	9b03      	ldr	r3, [sp, #12]
 8009264:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009268:	b9a3      	cbnz	r3, 8009294 <_dtoa_r+0x914>
 800926a:	9b03      	ldr	r3, [sp, #12]
 800926c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009270:	0d1b      	lsrs	r3, r3, #20
 8009272:	051b      	lsls	r3, r3, #20
 8009274:	b12b      	cbz	r3, 8009282 <_dtoa_r+0x902>
 8009276:	9b04      	ldr	r3, [sp, #16]
 8009278:	3301      	adds	r3, #1
 800927a:	9304      	str	r3, [sp, #16]
 800927c:	f108 0801 	add.w	r8, r8, #1
 8009280:	2301      	movs	r3, #1
 8009282:	9306      	str	r3, [sp, #24]
 8009284:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009286:	2b00      	cmp	r3, #0
 8009288:	f47f af74 	bne.w	8009174 <_dtoa_r+0x7f4>
 800928c:	2001      	movs	r0, #1
 800928e:	e779      	b.n	8009184 <_dtoa_r+0x804>
 8009290:	2300      	movs	r3, #0
 8009292:	e7f6      	b.n	8009282 <_dtoa_r+0x902>
 8009294:	9b02      	ldr	r3, [sp, #8]
 8009296:	e7f4      	b.n	8009282 <_dtoa_r+0x902>
 8009298:	d085      	beq.n	80091a6 <_dtoa_r+0x826>
 800929a:	4618      	mov	r0, r3
 800929c:	301c      	adds	r0, #28
 800929e:	e77d      	b.n	800919c <_dtoa_r+0x81c>
 80092a0:	40240000 	.word	0x40240000
 80092a4:	9b01      	ldr	r3, [sp, #4]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	dc38      	bgt.n	800931c <_dtoa_r+0x99c>
 80092aa:	9b05      	ldr	r3, [sp, #20]
 80092ac:	2b02      	cmp	r3, #2
 80092ae:	dd35      	ble.n	800931c <_dtoa_r+0x99c>
 80092b0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80092b4:	f1b9 0f00 	cmp.w	r9, #0
 80092b8:	d10d      	bne.n	80092d6 <_dtoa_r+0x956>
 80092ba:	4631      	mov	r1, r6
 80092bc:	464b      	mov	r3, r9
 80092be:	2205      	movs	r2, #5
 80092c0:	4620      	mov	r0, r4
 80092c2:	f000 fbdb 	bl	8009a7c <__multadd>
 80092c6:	4601      	mov	r1, r0
 80092c8:	4606      	mov	r6, r0
 80092ca:	4658      	mov	r0, fp
 80092cc:	f000 fdf2 	bl	8009eb4 <__mcmp>
 80092d0:	2800      	cmp	r0, #0
 80092d2:	f73f adbd 	bgt.w	8008e50 <_dtoa_r+0x4d0>
 80092d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092d8:	9d00      	ldr	r5, [sp, #0]
 80092da:	ea6f 0a03 	mvn.w	sl, r3
 80092de:	f04f 0800 	mov.w	r8, #0
 80092e2:	4631      	mov	r1, r6
 80092e4:	4620      	mov	r0, r4
 80092e6:	f000 fba7 	bl	8009a38 <_Bfree>
 80092ea:	2f00      	cmp	r7, #0
 80092ec:	f43f aeb4 	beq.w	8009058 <_dtoa_r+0x6d8>
 80092f0:	f1b8 0f00 	cmp.w	r8, #0
 80092f4:	d005      	beq.n	8009302 <_dtoa_r+0x982>
 80092f6:	45b8      	cmp	r8, r7
 80092f8:	d003      	beq.n	8009302 <_dtoa_r+0x982>
 80092fa:	4641      	mov	r1, r8
 80092fc:	4620      	mov	r0, r4
 80092fe:	f000 fb9b 	bl	8009a38 <_Bfree>
 8009302:	4639      	mov	r1, r7
 8009304:	4620      	mov	r0, r4
 8009306:	f000 fb97 	bl	8009a38 <_Bfree>
 800930a:	e6a5      	b.n	8009058 <_dtoa_r+0x6d8>
 800930c:	2600      	movs	r6, #0
 800930e:	4637      	mov	r7, r6
 8009310:	e7e1      	b.n	80092d6 <_dtoa_r+0x956>
 8009312:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009314:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009318:	4637      	mov	r7, r6
 800931a:	e599      	b.n	8008e50 <_dtoa_r+0x4d0>
 800931c:	9b08      	ldr	r3, [sp, #32]
 800931e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009322:	2b00      	cmp	r3, #0
 8009324:	f000 80fd 	beq.w	8009522 <_dtoa_r+0xba2>
 8009328:	2d00      	cmp	r5, #0
 800932a:	dd05      	ble.n	8009338 <_dtoa_r+0x9b8>
 800932c:	4639      	mov	r1, r7
 800932e:	462a      	mov	r2, r5
 8009330:	4620      	mov	r0, r4
 8009332:	f000 fd53 	bl	8009ddc <__lshift>
 8009336:	4607      	mov	r7, r0
 8009338:	9b06      	ldr	r3, [sp, #24]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d05c      	beq.n	80093f8 <_dtoa_r+0xa78>
 800933e:	6879      	ldr	r1, [r7, #4]
 8009340:	4620      	mov	r0, r4
 8009342:	f000 fb39 	bl	80099b8 <_Balloc>
 8009346:	4605      	mov	r5, r0
 8009348:	b928      	cbnz	r0, 8009356 <_dtoa_r+0x9d6>
 800934a:	4b80      	ldr	r3, [pc, #512]	; (800954c <_dtoa_r+0xbcc>)
 800934c:	4602      	mov	r2, r0
 800934e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009352:	f7ff bb2e 	b.w	80089b2 <_dtoa_r+0x32>
 8009356:	693a      	ldr	r2, [r7, #16]
 8009358:	3202      	adds	r2, #2
 800935a:	0092      	lsls	r2, r2, #2
 800935c:	f107 010c 	add.w	r1, r7, #12
 8009360:	300c      	adds	r0, #12
 8009362:	f7fe fbe1 	bl	8007b28 <memcpy>
 8009366:	2201      	movs	r2, #1
 8009368:	4629      	mov	r1, r5
 800936a:	4620      	mov	r0, r4
 800936c:	f000 fd36 	bl	8009ddc <__lshift>
 8009370:	9b00      	ldr	r3, [sp, #0]
 8009372:	3301      	adds	r3, #1
 8009374:	9301      	str	r3, [sp, #4]
 8009376:	9b00      	ldr	r3, [sp, #0]
 8009378:	444b      	add	r3, r9
 800937a:	9307      	str	r3, [sp, #28]
 800937c:	9b02      	ldr	r3, [sp, #8]
 800937e:	f003 0301 	and.w	r3, r3, #1
 8009382:	46b8      	mov	r8, r7
 8009384:	9306      	str	r3, [sp, #24]
 8009386:	4607      	mov	r7, r0
 8009388:	9b01      	ldr	r3, [sp, #4]
 800938a:	4631      	mov	r1, r6
 800938c:	3b01      	subs	r3, #1
 800938e:	4658      	mov	r0, fp
 8009390:	9302      	str	r3, [sp, #8]
 8009392:	f7ff fa67 	bl	8008864 <quorem>
 8009396:	4603      	mov	r3, r0
 8009398:	3330      	adds	r3, #48	; 0x30
 800939a:	9004      	str	r0, [sp, #16]
 800939c:	4641      	mov	r1, r8
 800939e:	4658      	mov	r0, fp
 80093a0:	9308      	str	r3, [sp, #32]
 80093a2:	f000 fd87 	bl	8009eb4 <__mcmp>
 80093a6:	463a      	mov	r2, r7
 80093a8:	4681      	mov	r9, r0
 80093aa:	4631      	mov	r1, r6
 80093ac:	4620      	mov	r0, r4
 80093ae:	f000 fd9d 	bl	8009eec <__mdiff>
 80093b2:	68c2      	ldr	r2, [r0, #12]
 80093b4:	9b08      	ldr	r3, [sp, #32]
 80093b6:	4605      	mov	r5, r0
 80093b8:	bb02      	cbnz	r2, 80093fc <_dtoa_r+0xa7c>
 80093ba:	4601      	mov	r1, r0
 80093bc:	4658      	mov	r0, fp
 80093be:	f000 fd79 	bl	8009eb4 <__mcmp>
 80093c2:	9b08      	ldr	r3, [sp, #32]
 80093c4:	4602      	mov	r2, r0
 80093c6:	4629      	mov	r1, r5
 80093c8:	4620      	mov	r0, r4
 80093ca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80093ce:	f000 fb33 	bl	8009a38 <_Bfree>
 80093d2:	9b05      	ldr	r3, [sp, #20]
 80093d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093d6:	9d01      	ldr	r5, [sp, #4]
 80093d8:	ea43 0102 	orr.w	r1, r3, r2
 80093dc:	9b06      	ldr	r3, [sp, #24]
 80093de:	430b      	orrs	r3, r1
 80093e0:	9b08      	ldr	r3, [sp, #32]
 80093e2:	d10d      	bne.n	8009400 <_dtoa_r+0xa80>
 80093e4:	2b39      	cmp	r3, #57	; 0x39
 80093e6:	d029      	beq.n	800943c <_dtoa_r+0xabc>
 80093e8:	f1b9 0f00 	cmp.w	r9, #0
 80093ec:	dd01      	ble.n	80093f2 <_dtoa_r+0xa72>
 80093ee:	9b04      	ldr	r3, [sp, #16]
 80093f0:	3331      	adds	r3, #49	; 0x31
 80093f2:	9a02      	ldr	r2, [sp, #8]
 80093f4:	7013      	strb	r3, [r2, #0]
 80093f6:	e774      	b.n	80092e2 <_dtoa_r+0x962>
 80093f8:	4638      	mov	r0, r7
 80093fa:	e7b9      	b.n	8009370 <_dtoa_r+0x9f0>
 80093fc:	2201      	movs	r2, #1
 80093fe:	e7e2      	b.n	80093c6 <_dtoa_r+0xa46>
 8009400:	f1b9 0f00 	cmp.w	r9, #0
 8009404:	db06      	blt.n	8009414 <_dtoa_r+0xa94>
 8009406:	9905      	ldr	r1, [sp, #20]
 8009408:	ea41 0909 	orr.w	r9, r1, r9
 800940c:	9906      	ldr	r1, [sp, #24]
 800940e:	ea59 0101 	orrs.w	r1, r9, r1
 8009412:	d120      	bne.n	8009456 <_dtoa_r+0xad6>
 8009414:	2a00      	cmp	r2, #0
 8009416:	ddec      	ble.n	80093f2 <_dtoa_r+0xa72>
 8009418:	4659      	mov	r1, fp
 800941a:	2201      	movs	r2, #1
 800941c:	4620      	mov	r0, r4
 800941e:	9301      	str	r3, [sp, #4]
 8009420:	f000 fcdc 	bl	8009ddc <__lshift>
 8009424:	4631      	mov	r1, r6
 8009426:	4683      	mov	fp, r0
 8009428:	f000 fd44 	bl	8009eb4 <__mcmp>
 800942c:	2800      	cmp	r0, #0
 800942e:	9b01      	ldr	r3, [sp, #4]
 8009430:	dc02      	bgt.n	8009438 <_dtoa_r+0xab8>
 8009432:	d1de      	bne.n	80093f2 <_dtoa_r+0xa72>
 8009434:	07da      	lsls	r2, r3, #31
 8009436:	d5dc      	bpl.n	80093f2 <_dtoa_r+0xa72>
 8009438:	2b39      	cmp	r3, #57	; 0x39
 800943a:	d1d8      	bne.n	80093ee <_dtoa_r+0xa6e>
 800943c:	9a02      	ldr	r2, [sp, #8]
 800943e:	2339      	movs	r3, #57	; 0x39
 8009440:	7013      	strb	r3, [r2, #0]
 8009442:	462b      	mov	r3, r5
 8009444:	461d      	mov	r5, r3
 8009446:	3b01      	subs	r3, #1
 8009448:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800944c:	2a39      	cmp	r2, #57	; 0x39
 800944e:	d050      	beq.n	80094f2 <_dtoa_r+0xb72>
 8009450:	3201      	adds	r2, #1
 8009452:	701a      	strb	r2, [r3, #0]
 8009454:	e745      	b.n	80092e2 <_dtoa_r+0x962>
 8009456:	2a00      	cmp	r2, #0
 8009458:	dd03      	ble.n	8009462 <_dtoa_r+0xae2>
 800945a:	2b39      	cmp	r3, #57	; 0x39
 800945c:	d0ee      	beq.n	800943c <_dtoa_r+0xabc>
 800945e:	3301      	adds	r3, #1
 8009460:	e7c7      	b.n	80093f2 <_dtoa_r+0xa72>
 8009462:	9a01      	ldr	r2, [sp, #4]
 8009464:	9907      	ldr	r1, [sp, #28]
 8009466:	f802 3c01 	strb.w	r3, [r2, #-1]
 800946a:	428a      	cmp	r2, r1
 800946c:	d02a      	beq.n	80094c4 <_dtoa_r+0xb44>
 800946e:	4659      	mov	r1, fp
 8009470:	2300      	movs	r3, #0
 8009472:	220a      	movs	r2, #10
 8009474:	4620      	mov	r0, r4
 8009476:	f000 fb01 	bl	8009a7c <__multadd>
 800947a:	45b8      	cmp	r8, r7
 800947c:	4683      	mov	fp, r0
 800947e:	f04f 0300 	mov.w	r3, #0
 8009482:	f04f 020a 	mov.w	r2, #10
 8009486:	4641      	mov	r1, r8
 8009488:	4620      	mov	r0, r4
 800948a:	d107      	bne.n	800949c <_dtoa_r+0xb1c>
 800948c:	f000 faf6 	bl	8009a7c <__multadd>
 8009490:	4680      	mov	r8, r0
 8009492:	4607      	mov	r7, r0
 8009494:	9b01      	ldr	r3, [sp, #4]
 8009496:	3301      	adds	r3, #1
 8009498:	9301      	str	r3, [sp, #4]
 800949a:	e775      	b.n	8009388 <_dtoa_r+0xa08>
 800949c:	f000 faee 	bl	8009a7c <__multadd>
 80094a0:	4639      	mov	r1, r7
 80094a2:	4680      	mov	r8, r0
 80094a4:	2300      	movs	r3, #0
 80094a6:	220a      	movs	r2, #10
 80094a8:	4620      	mov	r0, r4
 80094aa:	f000 fae7 	bl	8009a7c <__multadd>
 80094ae:	4607      	mov	r7, r0
 80094b0:	e7f0      	b.n	8009494 <_dtoa_r+0xb14>
 80094b2:	f1b9 0f00 	cmp.w	r9, #0
 80094b6:	9a00      	ldr	r2, [sp, #0]
 80094b8:	bfcc      	ite	gt
 80094ba:	464d      	movgt	r5, r9
 80094bc:	2501      	movle	r5, #1
 80094be:	4415      	add	r5, r2
 80094c0:	f04f 0800 	mov.w	r8, #0
 80094c4:	4659      	mov	r1, fp
 80094c6:	2201      	movs	r2, #1
 80094c8:	4620      	mov	r0, r4
 80094ca:	9301      	str	r3, [sp, #4]
 80094cc:	f000 fc86 	bl	8009ddc <__lshift>
 80094d0:	4631      	mov	r1, r6
 80094d2:	4683      	mov	fp, r0
 80094d4:	f000 fcee 	bl	8009eb4 <__mcmp>
 80094d8:	2800      	cmp	r0, #0
 80094da:	dcb2      	bgt.n	8009442 <_dtoa_r+0xac2>
 80094dc:	d102      	bne.n	80094e4 <_dtoa_r+0xb64>
 80094de:	9b01      	ldr	r3, [sp, #4]
 80094e0:	07db      	lsls	r3, r3, #31
 80094e2:	d4ae      	bmi.n	8009442 <_dtoa_r+0xac2>
 80094e4:	462b      	mov	r3, r5
 80094e6:	461d      	mov	r5, r3
 80094e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094ec:	2a30      	cmp	r2, #48	; 0x30
 80094ee:	d0fa      	beq.n	80094e6 <_dtoa_r+0xb66>
 80094f0:	e6f7      	b.n	80092e2 <_dtoa_r+0x962>
 80094f2:	9a00      	ldr	r2, [sp, #0]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d1a5      	bne.n	8009444 <_dtoa_r+0xac4>
 80094f8:	f10a 0a01 	add.w	sl, sl, #1
 80094fc:	2331      	movs	r3, #49	; 0x31
 80094fe:	e779      	b.n	80093f4 <_dtoa_r+0xa74>
 8009500:	4b13      	ldr	r3, [pc, #76]	; (8009550 <_dtoa_r+0xbd0>)
 8009502:	f7ff baaf 	b.w	8008a64 <_dtoa_r+0xe4>
 8009506:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009508:	2b00      	cmp	r3, #0
 800950a:	f47f aa86 	bne.w	8008a1a <_dtoa_r+0x9a>
 800950e:	4b11      	ldr	r3, [pc, #68]	; (8009554 <_dtoa_r+0xbd4>)
 8009510:	f7ff baa8 	b.w	8008a64 <_dtoa_r+0xe4>
 8009514:	f1b9 0f00 	cmp.w	r9, #0
 8009518:	dc03      	bgt.n	8009522 <_dtoa_r+0xba2>
 800951a:	9b05      	ldr	r3, [sp, #20]
 800951c:	2b02      	cmp	r3, #2
 800951e:	f73f aec9 	bgt.w	80092b4 <_dtoa_r+0x934>
 8009522:	9d00      	ldr	r5, [sp, #0]
 8009524:	4631      	mov	r1, r6
 8009526:	4658      	mov	r0, fp
 8009528:	f7ff f99c 	bl	8008864 <quorem>
 800952c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009530:	f805 3b01 	strb.w	r3, [r5], #1
 8009534:	9a00      	ldr	r2, [sp, #0]
 8009536:	1aaa      	subs	r2, r5, r2
 8009538:	4591      	cmp	r9, r2
 800953a:	ddba      	ble.n	80094b2 <_dtoa_r+0xb32>
 800953c:	4659      	mov	r1, fp
 800953e:	2300      	movs	r3, #0
 8009540:	220a      	movs	r2, #10
 8009542:	4620      	mov	r0, r4
 8009544:	f000 fa9a 	bl	8009a7c <__multadd>
 8009548:	4683      	mov	fp, r0
 800954a:	e7eb      	b.n	8009524 <_dtoa_r+0xba4>
 800954c:	0800ac93 	.word	0x0800ac93
 8009550:	0800abec 	.word	0x0800abec
 8009554:	0800ac10 	.word	0x0800ac10

08009558 <__sflush_r>:
 8009558:	898a      	ldrh	r2, [r1, #12]
 800955a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800955e:	4605      	mov	r5, r0
 8009560:	0710      	lsls	r0, r2, #28
 8009562:	460c      	mov	r4, r1
 8009564:	d458      	bmi.n	8009618 <__sflush_r+0xc0>
 8009566:	684b      	ldr	r3, [r1, #4]
 8009568:	2b00      	cmp	r3, #0
 800956a:	dc05      	bgt.n	8009578 <__sflush_r+0x20>
 800956c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800956e:	2b00      	cmp	r3, #0
 8009570:	dc02      	bgt.n	8009578 <__sflush_r+0x20>
 8009572:	2000      	movs	r0, #0
 8009574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009578:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800957a:	2e00      	cmp	r6, #0
 800957c:	d0f9      	beq.n	8009572 <__sflush_r+0x1a>
 800957e:	2300      	movs	r3, #0
 8009580:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009584:	682f      	ldr	r7, [r5, #0]
 8009586:	602b      	str	r3, [r5, #0]
 8009588:	d032      	beq.n	80095f0 <__sflush_r+0x98>
 800958a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800958c:	89a3      	ldrh	r3, [r4, #12]
 800958e:	075a      	lsls	r2, r3, #29
 8009590:	d505      	bpl.n	800959e <__sflush_r+0x46>
 8009592:	6863      	ldr	r3, [r4, #4]
 8009594:	1ac0      	subs	r0, r0, r3
 8009596:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009598:	b10b      	cbz	r3, 800959e <__sflush_r+0x46>
 800959a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800959c:	1ac0      	subs	r0, r0, r3
 800959e:	2300      	movs	r3, #0
 80095a0:	4602      	mov	r2, r0
 80095a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095a4:	6a21      	ldr	r1, [r4, #32]
 80095a6:	4628      	mov	r0, r5
 80095a8:	47b0      	blx	r6
 80095aa:	1c43      	adds	r3, r0, #1
 80095ac:	89a3      	ldrh	r3, [r4, #12]
 80095ae:	d106      	bne.n	80095be <__sflush_r+0x66>
 80095b0:	6829      	ldr	r1, [r5, #0]
 80095b2:	291d      	cmp	r1, #29
 80095b4:	d82c      	bhi.n	8009610 <__sflush_r+0xb8>
 80095b6:	4a2a      	ldr	r2, [pc, #168]	; (8009660 <__sflush_r+0x108>)
 80095b8:	40ca      	lsrs	r2, r1
 80095ba:	07d6      	lsls	r6, r2, #31
 80095bc:	d528      	bpl.n	8009610 <__sflush_r+0xb8>
 80095be:	2200      	movs	r2, #0
 80095c0:	6062      	str	r2, [r4, #4]
 80095c2:	04d9      	lsls	r1, r3, #19
 80095c4:	6922      	ldr	r2, [r4, #16]
 80095c6:	6022      	str	r2, [r4, #0]
 80095c8:	d504      	bpl.n	80095d4 <__sflush_r+0x7c>
 80095ca:	1c42      	adds	r2, r0, #1
 80095cc:	d101      	bne.n	80095d2 <__sflush_r+0x7a>
 80095ce:	682b      	ldr	r3, [r5, #0]
 80095d0:	b903      	cbnz	r3, 80095d4 <__sflush_r+0x7c>
 80095d2:	6560      	str	r0, [r4, #84]	; 0x54
 80095d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095d6:	602f      	str	r7, [r5, #0]
 80095d8:	2900      	cmp	r1, #0
 80095da:	d0ca      	beq.n	8009572 <__sflush_r+0x1a>
 80095dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095e0:	4299      	cmp	r1, r3
 80095e2:	d002      	beq.n	80095ea <__sflush_r+0x92>
 80095e4:	4628      	mov	r0, r5
 80095e6:	f7fe fab5 	bl	8007b54 <_free_r>
 80095ea:	2000      	movs	r0, #0
 80095ec:	6360      	str	r0, [r4, #52]	; 0x34
 80095ee:	e7c1      	b.n	8009574 <__sflush_r+0x1c>
 80095f0:	6a21      	ldr	r1, [r4, #32]
 80095f2:	2301      	movs	r3, #1
 80095f4:	4628      	mov	r0, r5
 80095f6:	47b0      	blx	r6
 80095f8:	1c41      	adds	r1, r0, #1
 80095fa:	d1c7      	bne.n	800958c <__sflush_r+0x34>
 80095fc:	682b      	ldr	r3, [r5, #0]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d0c4      	beq.n	800958c <__sflush_r+0x34>
 8009602:	2b1d      	cmp	r3, #29
 8009604:	d001      	beq.n	800960a <__sflush_r+0xb2>
 8009606:	2b16      	cmp	r3, #22
 8009608:	d101      	bne.n	800960e <__sflush_r+0xb6>
 800960a:	602f      	str	r7, [r5, #0]
 800960c:	e7b1      	b.n	8009572 <__sflush_r+0x1a>
 800960e:	89a3      	ldrh	r3, [r4, #12]
 8009610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009614:	81a3      	strh	r3, [r4, #12]
 8009616:	e7ad      	b.n	8009574 <__sflush_r+0x1c>
 8009618:	690f      	ldr	r7, [r1, #16]
 800961a:	2f00      	cmp	r7, #0
 800961c:	d0a9      	beq.n	8009572 <__sflush_r+0x1a>
 800961e:	0793      	lsls	r3, r2, #30
 8009620:	680e      	ldr	r6, [r1, #0]
 8009622:	bf08      	it	eq
 8009624:	694b      	ldreq	r3, [r1, #20]
 8009626:	600f      	str	r7, [r1, #0]
 8009628:	bf18      	it	ne
 800962a:	2300      	movne	r3, #0
 800962c:	eba6 0807 	sub.w	r8, r6, r7
 8009630:	608b      	str	r3, [r1, #8]
 8009632:	f1b8 0f00 	cmp.w	r8, #0
 8009636:	dd9c      	ble.n	8009572 <__sflush_r+0x1a>
 8009638:	6a21      	ldr	r1, [r4, #32]
 800963a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800963c:	4643      	mov	r3, r8
 800963e:	463a      	mov	r2, r7
 8009640:	4628      	mov	r0, r5
 8009642:	47b0      	blx	r6
 8009644:	2800      	cmp	r0, #0
 8009646:	dc06      	bgt.n	8009656 <__sflush_r+0xfe>
 8009648:	89a3      	ldrh	r3, [r4, #12]
 800964a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800964e:	81a3      	strh	r3, [r4, #12]
 8009650:	f04f 30ff 	mov.w	r0, #4294967295
 8009654:	e78e      	b.n	8009574 <__sflush_r+0x1c>
 8009656:	4407      	add	r7, r0
 8009658:	eba8 0800 	sub.w	r8, r8, r0
 800965c:	e7e9      	b.n	8009632 <__sflush_r+0xda>
 800965e:	bf00      	nop
 8009660:	20400001 	.word	0x20400001

08009664 <_fflush_r>:
 8009664:	b538      	push	{r3, r4, r5, lr}
 8009666:	690b      	ldr	r3, [r1, #16]
 8009668:	4605      	mov	r5, r0
 800966a:	460c      	mov	r4, r1
 800966c:	b913      	cbnz	r3, 8009674 <_fflush_r+0x10>
 800966e:	2500      	movs	r5, #0
 8009670:	4628      	mov	r0, r5
 8009672:	bd38      	pop	{r3, r4, r5, pc}
 8009674:	b118      	cbz	r0, 800967e <_fflush_r+0x1a>
 8009676:	6983      	ldr	r3, [r0, #24]
 8009678:	b90b      	cbnz	r3, 800967e <_fflush_r+0x1a>
 800967a:	f000 f887 	bl	800978c <__sinit>
 800967e:	4b14      	ldr	r3, [pc, #80]	; (80096d0 <_fflush_r+0x6c>)
 8009680:	429c      	cmp	r4, r3
 8009682:	d11b      	bne.n	80096bc <_fflush_r+0x58>
 8009684:	686c      	ldr	r4, [r5, #4]
 8009686:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d0ef      	beq.n	800966e <_fflush_r+0xa>
 800968e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009690:	07d0      	lsls	r0, r2, #31
 8009692:	d404      	bmi.n	800969e <_fflush_r+0x3a>
 8009694:	0599      	lsls	r1, r3, #22
 8009696:	d402      	bmi.n	800969e <_fflush_r+0x3a>
 8009698:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800969a:	f000 f91a 	bl	80098d2 <__retarget_lock_acquire_recursive>
 800969e:	4628      	mov	r0, r5
 80096a0:	4621      	mov	r1, r4
 80096a2:	f7ff ff59 	bl	8009558 <__sflush_r>
 80096a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096a8:	07da      	lsls	r2, r3, #31
 80096aa:	4605      	mov	r5, r0
 80096ac:	d4e0      	bmi.n	8009670 <_fflush_r+0xc>
 80096ae:	89a3      	ldrh	r3, [r4, #12]
 80096b0:	059b      	lsls	r3, r3, #22
 80096b2:	d4dd      	bmi.n	8009670 <_fflush_r+0xc>
 80096b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096b6:	f000 f90d 	bl	80098d4 <__retarget_lock_release_recursive>
 80096ba:	e7d9      	b.n	8009670 <_fflush_r+0xc>
 80096bc:	4b05      	ldr	r3, [pc, #20]	; (80096d4 <_fflush_r+0x70>)
 80096be:	429c      	cmp	r4, r3
 80096c0:	d101      	bne.n	80096c6 <_fflush_r+0x62>
 80096c2:	68ac      	ldr	r4, [r5, #8]
 80096c4:	e7df      	b.n	8009686 <_fflush_r+0x22>
 80096c6:	4b04      	ldr	r3, [pc, #16]	; (80096d8 <_fflush_r+0x74>)
 80096c8:	429c      	cmp	r4, r3
 80096ca:	bf08      	it	eq
 80096cc:	68ec      	ldreq	r4, [r5, #12]
 80096ce:	e7da      	b.n	8009686 <_fflush_r+0x22>
 80096d0:	0800acc4 	.word	0x0800acc4
 80096d4:	0800ace4 	.word	0x0800ace4
 80096d8:	0800aca4 	.word	0x0800aca4

080096dc <std>:
 80096dc:	2300      	movs	r3, #0
 80096de:	b510      	push	{r4, lr}
 80096e0:	4604      	mov	r4, r0
 80096e2:	e9c0 3300 	strd	r3, r3, [r0]
 80096e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80096ea:	6083      	str	r3, [r0, #8]
 80096ec:	8181      	strh	r1, [r0, #12]
 80096ee:	6643      	str	r3, [r0, #100]	; 0x64
 80096f0:	81c2      	strh	r2, [r0, #14]
 80096f2:	6183      	str	r3, [r0, #24]
 80096f4:	4619      	mov	r1, r3
 80096f6:	2208      	movs	r2, #8
 80096f8:	305c      	adds	r0, #92	; 0x5c
 80096fa:	f7fe fa23 	bl	8007b44 <memset>
 80096fe:	4b05      	ldr	r3, [pc, #20]	; (8009714 <std+0x38>)
 8009700:	6263      	str	r3, [r4, #36]	; 0x24
 8009702:	4b05      	ldr	r3, [pc, #20]	; (8009718 <std+0x3c>)
 8009704:	62a3      	str	r3, [r4, #40]	; 0x28
 8009706:	4b05      	ldr	r3, [pc, #20]	; (800971c <std+0x40>)
 8009708:	62e3      	str	r3, [r4, #44]	; 0x2c
 800970a:	4b05      	ldr	r3, [pc, #20]	; (8009720 <std+0x44>)
 800970c:	6224      	str	r4, [r4, #32]
 800970e:	6323      	str	r3, [r4, #48]	; 0x30
 8009710:	bd10      	pop	{r4, pc}
 8009712:	bf00      	nop
 8009714:	0800a415 	.word	0x0800a415
 8009718:	0800a437 	.word	0x0800a437
 800971c:	0800a46f 	.word	0x0800a46f
 8009720:	0800a493 	.word	0x0800a493

08009724 <_cleanup_r>:
 8009724:	4901      	ldr	r1, [pc, #4]	; (800972c <_cleanup_r+0x8>)
 8009726:	f000 b8af 	b.w	8009888 <_fwalk_reent>
 800972a:	bf00      	nop
 800972c:	08009665 	.word	0x08009665

08009730 <__sfmoreglue>:
 8009730:	b570      	push	{r4, r5, r6, lr}
 8009732:	1e4a      	subs	r2, r1, #1
 8009734:	2568      	movs	r5, #104	; 0x68
 8009736:	4355      	muls	r5, r2
 8009738:	460e      	mov	r6, r1
 800973a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800973e:	f7fe fa59 	bl	8007bf4 <_malloc_r>
 8009742:	4604      	mov	r4, r0
 8009744:	b140      	cbz	r0, 8009758 <__sfmoreglue+0x28>
 8009746:	2100      	movs	r1, #0
 8009748:	e9c0 1600 	strd	r1, r6, [r0]
 800974c:	300c      	adds	r0, #12
 800974e:	60a0      	str	r0, [r4, #8]
 8009750:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009754:	f7fe f9f6 	bl	8007b44 <memset>
 8009758:	4620      	mov	r0, r4
 800975a:	bd70      	pop	{r4, r5, r6, pc}

0800975c <__sfp_lock_acquire>:
 800975c:	4801      	ldr	r0, [pc, #4]	; (8009764 <__sfp_lock_acquire+0x8>)
 800975e:	f000 b8b8 	b.w	80098d2 <__retarget_lock_acquire_recursive>
 8009762:	bf00      	nop
 8009764:	200006b8 	.word	0x200006b8

08009768 <__sfp_lock_release>:
 8009768:	4801      	ldr	r0, [pc, #4]	; (8009770 <__sfp_lock_release+0x8>)
 800976a:	f000 b8b3 	b.w	80098d4 <__retarget_lock_release_recursive>
 800976e:	bf00      	nop
 8009770:	200006b8 	.word	0x200006b8

08009774 <__sinit_lock_acquire>:
 8009774:	4801      	ldr	r0, [pc, #4]	; (800977c <__sinit_lock_acquire+0x8>)
 8009776:	f000 b8ac 	b.w	80098d2 <__retarget_lock_acquire_recursive>
 800977a:	bf00      	nop
 800977c:	200006b3 	.word	0x200006b3

08009780 <__sinit_lock_release>:
 8009780:	4801      	ldr	r0, [pc, #4]	; (8009788 <__sinit_lock_release+0x8>)
 8009782:	f000 b8a7 	b.w	80098d4 <__retarget_lock_release_recursive>
 8009786:	bf00      	nop
 8009788:	200006b3 	.word	0x200006b3

0800978c <__sinit>:
 800978c:	b510      	push	{r4, lr}
 800978e:	4604      	mov	r4, r0
 8009790:	f7ff fff0 	bl	8009774 <__sinit_lock_acquire>
 8009794:	69a3      	ldr	r3, [r4, #24]
 8009796:	b11b      	cbz	r3, 80097a0 <__sinit+0x14>
 8009798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800979c:	f7ff bff0 	b.w	8009780 <__sinit_lock_release>
 80097a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80097a4:	6523      	str	r3, [r4, #80]	; 0x50
 80097a6:	4b13      	ldr	r3, [pc, #76]	; (80097f4 <__sinit+0x68>)
 80097a8:	4a13      	ldr	r2, [pc, #76]	; (80097f8 <__sinit+0x6c>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80097ae:	42a3      	cmp	r3, r4
 80097b0:	bf04      	itt	eq
 80097b2:	2301      	moveq	r3, #1
 80097b4:	61a3      	streq	r3, [r4, #24]
 80097b6:	4620      	mov	r0, r4
 80097b8:	f000 f820 	bl	80097fc <__sfp>
 80097bc:	6060      	str	r0, [r4, #4]
 80097be:	4620      	mov	r0, r4
 80097c0:	f000 f81c 	bl	80097fc <__sfp>
 80097c4:	60a0      	str	r0, [r4, #8]
 80097c6:	4620      	mov	r0, r4
 80097c8:	f000 f818 	bl	80097fc <__sfp>
 80097cc:	2200      	movs	r2, #0
 80097ce:	60e0      	str	r0, [r4, #12]
 80097d0:	2104      	movs	r1, #4
 80097d2:	6860      	ldr	r0, [r4, #4]
 80097d4:	f7ff ff82 	bl	80096dc <std>
 80097d8:	68a0      	ldr	r0, [r4, #8]
 80097da:	2201      	movs	r2, #1
 80097dc:	2109      	movs	r1, #9
 80097de:	f7ff ff7d 	bl	80096dc <std>
 80097e2:	68e0      	ldr	r0, [r4, #12]
 80097e4:	2202      	movs	r2, #2
 80097e6:	2112      	movs	r1, #18
 80097e8:	f7ff ff78 	bl	80096dc <std>
 80097ec:	2301      	movs	r3, #1
 80097ee:	61a3      	str	r3, [r4, #24]
 80097f0:	e7d2      	b.n	8009798 <__sinit+0xc>
 80097f2:	bf00      	nop
 80097f4:	0800abd8 	.word	0x0800abd8
 80097f8:	08009725 	.word	0x08009725

080097fc <__sfp>:
 80097fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097fe:	4607      	mov	r7, r0
 8009800:	f7ff ffac 	bl	800975c <__sfp_lock_acquire>
 8009804:	4b1e      	ldr	r3, [pc, #120]	; (8009880 <__sfp+0x84>)
 8009806:	681e      	ldr	r6, [r3, #0]
 8009808:	69b3      	ldr	r3, [r6, #24]
 800980a:	b913      	cbnz	r3, 8009812 <__sfp+0x16>
 800980c:	4630      	mov	r0, r6
 800980e:	f7ff ffbd 	bl	800978c <__sinit>
 8009812:	3648      	adds	r6, #72	; 0x48
 8009814:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009818:	3b01      	subs	r3, #1
 800981a:	d503      	bpl.n	8009824 <__sfp+0x28>
 800981c:	6833      	ldr	r3, [r6, #0]
 800981e:	b30b      	cbz	r3, 8009864 <__sfp+0x68>
 8009820:	6836      	ldr	r6, [r6, #0]
 8009822:	e7f7      	b.n	8009814 <__sfp+0x18>
 8009824:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009828:	b9d5      	cbnz	r5, 8009860 <__sfp+0x64>
 800982a:	4b16      	ldr	r3, [pc, #88]	; (8009884 <__sfp+0x88>)
 800982c:	60e3      	str	r3, [r4, #12]
 800982e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009832:	6665      	str	r5, [r4, #100]	; 0x64
 8009834:	f000 f84c 	bl	80098d0 <__retarget_lock_init_recursive>
 8009838:	f7ff ff96 	bl	8009768 <__sfp_lock_release>
 800983c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009840:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009844:	6025      	str	r5, [r4, #0]
 8009846:	61a5      	str	r5, [r4, #24]
 8009848:	2208      	movs	r2, #8
 800984a:	4629      	mov	r1, r5
 800984c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009850:	f7fe f978 	bl	8007b44 <memset>
 8009854:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009858:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800985c:	4620      	mov	r0, r4
 800985e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009860:	3468      	adds	r4, #104	; 0x68
 8009862:	e7d9      	b.n	8009818 <__sfp+0x1c>
 8009864:	2104      	movs	r1, #4
 8009866:	4638      	mov	r0, r7
 8009868:	f7ff ff62 	bl	8009730 <__sfmoreglue>
 800986c:	4604      	mov	r4, r0
 800986e:	6030      	str	r0, [r6, #0]
 8009870:	2800      	cmp	r0, #0
 8009872:	d1d5      	bne.n	8009820 <__sfp+0x24>
 8009874:	f7ff ff78 	bl	8009768 <__sfp_lock_release>
 8009878:	230c      	movs	r3, #12
 800987a:	603b      	str	r3, [r7, #0]
 800987c:	e7ee      	b.n	800985c <__sfp+0x60>
 800987e:	bf00      	nop
 8009880:	0800abd8 	.word	0x0800abd8
 8009884:	ffff0001 	.word	0xffff0001

08009888 <_fwalk_reent>:
 8009888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800988c:	4606      	mov	r6, r0
 800988e:	4688      	mov	r8, r1
 8009890:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009894:	2700      	movs	r7, #0
 8009896:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800989a:	f1b9 0901 	subs.w	r9, r9, #1
 800989e:	d505      	bpl.n	80098ac <_fwalk_reent+0x24>
 80098a0:	6824      	ldr	r4, [r4, #0]
 80098a2:	2c00      	cmp	r4, #0
 80098a4:	d1f7      	bne.n	8009896 <_fwalk_reent+0xe>
 80098a6:	4638      	mov	r0, r7
 80098a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098ac:	89ab      	ldrh	r3, [r5, #12]
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d907      	bls.n	80098c2 <_fwalk_reent+0x3a>
 80098b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80098b6:	3301      	adds	r3, #1
 80098b8:	d003      	beq.n	80098c2 <_fwalk_reent+0x3a>
 80098ba:	4629      	mov	r1, r5
 80098bc:	4630      	mov	r0, r6
 80098be:	47c0      	blx	r8
 80098c0:	4307      	orrs	r7, r0
 80098c2:	3568      	adds	r5, #104	; 0x68
 80098c4:	e7e9      	b.n	800989a <_fwalk_reent+0x12>
	...

080098c8 <_localeconv_r>:
 80098c8:	4800      	ldr	r0, [pc, #0]	; (80098cc <_localeconv_r+0x4>)
 80098ca:	4770      	bx	lr
 80098cc:	20000188 	.word	0x20000188

080098d0 <__retarget_lock_init_recursive>:
 80098d0:	4770      	bx	lr

080098d2 <__retarget_lock_acquire_recursive>:
 80098d2:	4770      	bx	lr

080098d4 <__retarget_lock_release_recursive>:
 80098d4:	4770      	bx	lr

080098d6 <__swhatbuf_r>:
 80098d6:	b570      	push	{r4, r5, r6, lr}
 80098d8:	460e      	mov	r6, r1
 80098da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098de:	2900      	cmp	r1, #0
 80098e0:	b096      	sub	sp, #88	; 0x58
 80098e2:	4614      	mov	r4, r2
 80098e4:	461d      	mov	r5, r3
 80098e6:	da07      	bge.n	80098f8 <__swhatbuf_r+0x22>
 80098e8:	2300      	movs	r3, #0
 80098ea:	602b      	str	r3, [r5, #0]
 80098ec:	89b3      	ldrh	r3, [r6, #12]
 80098ee:	061a      	lsls	r2, r3, #24
 80098f0:	d410      	bmi.n	8009914 <__swhatbuf_r+0x3e>
 80098f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098f6:	e00e      	b.n	8009916 <__swhatbuf_r+0x40>
 80098f8:	466a      	mov	r2, sp
 80098fa:	f000 fe21 	bl	800a540 <_fstat_r>
 80098fe:	2800      	cmp	r0, #0
 8009900:	dbf2      	blt.n	80098e8 <__swhatbuf_r+0x12>
 8009902:	9a01      	ldr	r2, [sp, #4]
 8009904:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009908:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800990c:	425a      	negs	r2, r3
 800990e:	415a      	adcs	r2, r3
 8009910:	602a      	str	r2, [r5, #0]
 8009912:	e7ee      	b.n	80098f2 <__swhatbuf_r+0x1c>
 8009914:	2340      	movs	r3, #64	; 0x40
 8009916:	2000      	movs	r0, #0
 8009918:	6023      	str	r3, [r4, #0]
 800991a:	b016      	add	sp, #88	; 0x58
 800991c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009920 <__smakebuf_r>:
 8009920:	898b      	ldrh	r3, [r1, #12]
 8009922:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009924:	079d      	lsls	r5, r3, #30
 8009926:	4606      	mov	r6, r0
 8009928:	460c      	mov	r4, r1
 800992a:	d507      	bpl.n	800993c <__smakebuf_r+0x1c>
 800992c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009930:	6023      	str	r3, [r4, #0]
 8009932:	6123      	str	r3, [r4, #16]
 8009934:	2301      	movs	r3, #1
 8009936:	6163      	str	r3, [r4, #20]
 8009938:	b002      	add	sp, #8
 800993a:	bd70      	pop	{r4, r5, r6, pc}
 800993c:	ab01      	add	r3, sp, #4
 800993e:	466a      	mov	r2, sp
 8009940:	f7ff ffc9 	bl	80098d6 <__swhatbuf_r>
 8009944:	9900      	ldr	r1, [sp, #0]
 8009946:	4605      	mov	r5, r0
 8009948:	4630      	mov	r0, r6
 800994a:	f7fe f953 	bl	8007bf4 <_malloc_r>
 800994e:	b948      	cbnz	r0, 8009964 <__smakebuf_r+0x44>
 8009950:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009954:	059a      	lsls	r2, r3, #22
 8009956:	d4ef      	bmi.n	8009938 <__smakebuf_r+0x18>
 8009958:	f023 0303 	bic.w	r3, r3, #3
 800995c:	f043 0302 	orr.w	r3, r3, #2
 8009960:	81a3      	strh	r3, [r4, #12]
 8009962:	e7e3      	b.n	800992c <__smakebuf_r+0xc>
 8009964:	4b0d      	ldr	r3, [pc, #52]	; (800999c <__smakebuf_r+0x7c>)
 8009966:	62b3      	str	r3, [r6, #40]	; 0x28
 8009968:	89a3      	ldrh	r3, [r4, #12]
 800996a:	6020      	str	r0, [r4, #0]
 800996c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009970:	81a3      	strh	r3, [r4, #12]
 8009972:	9b00      	ldr	r3, [sp, #0]
 8009974:	6163      	str	r3, [r4, #20]
 8009976:	9b01      	ldr	r3, [sp, #4]
 8009978:	6120      	str	r0, [r4, #16]
 800997a:	b15b      	cbz	r3, 8009994 <__smakebuf_r+0x74>
 800997c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009980:	4630      	mov	r0, r6
 8009982:	f000 fdef 	bl	800a564 <_isatty_r>
 8009986:	b128      	cbz	r0, 8009994 <__smakebuf_r+0x74>
 8009988:	89a3      	ldrh	r3, [r4, #12]
 800998a:	f023 0303 	bic.w	r3, r3, #3
 800998e:	f043 0301 	orr.w	r3, r3, #1
 8009992:	81a3      	strh	r3, [r4, #12]
 8009994:	89a0      	ldrh	r0, [r4, #12]
 8009996:	4305      	orrs	r5, r0
 8009998:	81a5      	strh	r5, [r4, #12]
 800999a:	e7cd      	b.n	8009938 <__smakebuf_r+0x18>
 800999c:	08009725 	.word	0x08009725

080099a0 <__malloc_lock>:
 80099a0:	4801      	ldr	r0, [pc, #4]	; (80099a8 <__malloc_lock+0x8>)
 80099a2:	f7ff bf96 	b.w	80098d2 <__retarget_lock_acquire_recursive>
 80099a6:	bf00      	nop
 80099a8:	200006b4 	.word	0x200006b4

080099ac <__malloc_unlock>:
 80099ac:	4801      	ldr	r0, [pc, #4]	; (80099b4 <__malloc_unlock+0x8>)
 80099ae:	f7ff bf91 	b.w	80098d4 <__retarget_lock_release_recursive>
 80099b2:	bf00      	nop
 80099b4:	200006b4 	.word	0x200006b4

080099b8 <_Balloc>:
 80099b8:	b570      	push	{r4, r5, r6, lr}
 80099ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80099bc:	4604      	mov	r4, r0
 80099be:	460d      	mov	r5, r1
 80099c0:	b976      	cbnz	r6, 80099e0 <_Balloc+0x28>
 80099c2:	2010      	movs	r0, #16
 80099c4:	f7fe f8a8 	bl	8007b18 <malloc>
 80099c8:	4602      	mov	r2, r0
 80099ca:	6260      	str	r0, [r4, #36]	; 0x24
 80099cc:	b920      	cbnz	r0, 80099d8 <_Balloc+0x20>
 80099ce:	4b18      	ldr	r3, [pc, #96]	; (8009a30 <_Balloc+0x78>)
 80099d0:	4818      	ldr	r0, [pc, #96]	; (8009a34 <_Balloc+0x7c>)
 80099d2:	2166      	movs	r1, #102	; 0x66
 80099d4:	f000 fd74 	bl	800a4c0 <__assert_func>
 80099d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099dc:	6006      	str	r6, [r0, #0]
 80099de:	60c6      	str	r6, [r0, #12]
 80099e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80099e2:	68f3      	ldr	r3, [r6, #12]
 80099e4:	b183      	cbz	r3, 8009a08 <_Balloc+0x50>
 80099e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099e8:	68db      	ldr	r3, [r3, #12]
 80099ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80099ee:	b9b8      	cbnz	r0, 8009a20 <_Balloc+0x68>
 80099f0:	2101      	movs	r1, #1
 80099f2:	fa01 f605 	lsl.w	r6, r1, r5
 80099f6:	1d72      	adds	r2, r6, #5
 80099f8:	0092      	lsls	r2, r2, #2
 80099fa:	4620      	mov	r0, r4
 80099fc:	f000 fb5a 	bl	800a0b4 <_calloc_r>
 8009a00:	b160      	cbz	r0, 8009a1c <_Balloc+0x64>
 8009a02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a06:	e00e      	b.n	8009a26 <_Balloc+0x6e>
 8009a08:	2221      	movs	r2, #33	; 0x21
 8009a0a:	2104      	movs	r1, #4
 8009a0c:	4620      	mov	r0, r4
 8009a0e:	f000 fb51 	bl	800a0b4 <_calloc_r>
 8009a12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a14:	60f0      	str	r0, [r6, #12]
 8009a16:	68db      	ldr	r3, [r3, #12]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d1e4      	bne.n	80099e6 <_Balloc+0x2e>
 8009a1c:	2000      	movs	r0, #0
 8009a1e:	bd70      	pop	{r4, r5, r6, pc}
 8009a20:	6802      	ldr	r2, [r0, #0]
 8009a22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a26:	2300      	movs	r3, #0
 8009a28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a2c:	e7f7      	b.n	8009a1e <_Balloc+0x66>
 8009a2e:	bf00      	nop
 8009a30:	0800ac1d 	.word	0x0800ac1d
 8009a34:	0800ad04 	.word	0x0800ad04

08009a38 <_Bfree>:
 8009a38:	b570      	push	{r4, r5, r6, lr}
 8009a3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009a3c:	4605      	mov	r5, r0
 8009a3e:	460c      	mov	r4, r1
 8009a40:	b976      	cbnz	r6, 8009a60 <_Bfree+0x28>
 8009a42:	2010      	movs	r0, #16
 8009a44:	f7fe f868 	bl	8007b18 <malloc>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	6268      	str	r0, [r5, #36]	; 0x24
 8009a4c:	b920      	cbnz	r0, 8009a58 <_Bfree+0x20>
 8009a4e:	4b09      	ldr	r3, [pc, #36]	; (8009a74 <_Bfree+0x3c>)
 8009a50:	4809      	ldr	r0, [pc, #36]	; (8009a78 <_Bfree+0x40>)
 8009a52:	218a      	movs	r1, #138	; 0x8a
 8009a54:	f000 fd34 	bl	800a4c0 <__assert_func>
 8009a58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a5c:	6006      	str	r6, [r0, #0]
 8009a5e:	60c6      	str	r6, [r0, #12]
 8009a60:	b13c      	cbz	r4, 8009a72 <_Bfree+0x3a>
 8009a62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009a64:	6862      	ldr	r2, [r4, #4]
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a6c:	6021      	str	r1, [r4, #0]
 8009a6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a72:	bd70      	pop	{r4, r5, r6, pc}
 8009a74:	0800ac1d 	.word	0x0800ac1d
 8009a78:	0800ad04 	.word	0x0800ad04

08009a7c <__multadd>:
 8009a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a80:	690e      	ldr	r6, [r1, #16]
 8009a82:	4607      	mov	r7, r0
 8009a84:	4698      	mov	r8, r3
 8009a86:	460c      	mov	r4, r1
 8009a88:	f101 0014 	add.w	r0, r1, #20
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	6805      	ldr	r5, [r0, #0]
 8009a90:	b2a9      	uxth	r1, r5
 8009a92:	fb02 8101 	mla	r1, r2, r1, r8
 8009a96:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009a9a:	0c2d      	lsrs	r5, r5, #16
 8009a9c:	fb02 c505 	mla	r5, r2, r5, ip
 8009aa0:	b289      	uxth	r1, r1
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009aa8:	429e      	cmp	r6, r3
 8009aaa:	f840 1b04 	str.w	r1, [r0], #4
 8009aae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009ab2:	dcec      	bgt.n	8009a8e <__multadd+0x12>
 8009ab4:	f1b8 0f00 	cmp.w	r8, #0
 8009ab8:	d022      	beq.n	8009b00 <__multadd+0x84>
 8009aba:	68a3      	ldr	r3, [r4, #8]
 8009abc:	42b3      	cmp	r3, r6
 8009abe:	dc19      	bgt.n	8009af4 <__multadd+0x78>
 8009ac0:	6861      	ldr	r1, [r4, #4]
 8009ac2:	4638      	mov	r0, r7
 8009ac4:	3101      	adds	r1, #1
 8009ac6:	f7ff ff77 	bl	80099b8 <_Balloc>
 8009aca:	4605      	mov	r5, r0
 8009acc:	b928      	cbnz	r0, 8009ada <__multadd+0x5e>
 8009ace:	4602      	mov	r2, r0
 8009ad0:	4b0d      	ldr	r3, [pc, #52]	; (8009b08 <__multadd+0x8c>)
 8009ad2:	480e      	ldr	r0, [pc, #56]	; (8009b0c <__multadd+0x90>)
 8009ad4:	21b5      	movs	r1, #181	; 0xb5
 8009ad6:	f000 fcf3 	bl	800a4c0 <__assert_func>
 8009ada:	6922      	ldr	r2, [r4, #16]
 8009adc:	3202      	adds	r2, #2
 8009ade:	f104 010c 	add.w	r1, r4, #12
 8009ae2:	0092      	lsls	r2, r2, #2
 8009ae4:	300c      	adds	r0, #12
 8009ae6:	f7fe f81f 	bl	8007b28 <memcpy>
 8009aea:	4621      	mov	r1, r4
 8009aec:	4638      	mov	r0, r7
 8009aee:	f7ff ffa3 	bl	8009a38 <_Bfree>
 8009af2:	462c      	mov	r4, r5
 8009af4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009af8:	3601      	adds	r6, #1
 8009afa:	f8c3 8014 	str.w	r8, [r3, #20]
 8009afe:	6126      	str	r6, [r4, #16]
 8009b00:	4620      	mov	r0, r4
 8009b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b06:	bf00      	nop
 8009b08:	0800ac93 	.word	0x0800ac93
 8009b0c:	0800ad04 	.word	0x0800ad04

08009b10 <__hi0bits>:
 8009b10:	0c03      	lsrs	r3, r0, #16
 8009b12:	041b      	lsls	r3, r3, #16
 8009b14:	b9d3      	cbnz	r3, 8009b4c <__hi0bits+0x3c>
 8009b16:	0400      	lsls	r0, r0, #16
 8009b18:	2310      	movs	r3, #16
 8009b1a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009b1e:	bf04      	itt	eq
 8009b20:	0200      	lsleq	r0, r0, #8
 8009b22:	3308      	addeq	r3, #8
 8009b24:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009b28:	bf04      	itt	eq
 8009b2a:	0100      	lsleq	r0, r0, #4
 8009b2c:	3304      	addeq	r3, #4
 8009b2e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009b32:	bf04      	itt	eq
 8009b34:	0080      	lsleq	r0, r0, #2
 8009b36:	3302      	addeq	r3, #2
 8009b38:	2800      	cmp	r0, #0
 8009b3a:	db05      	blt.n	8009b48 <__hi0bits+0x38>
 8009b3c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009b40:	f103 0301 	add.w	r3, r3, #1
 8009b44:	bf08      	it	eq
 8009b46:	2320      	moveq	r3, #32
 8009b48:	4618      	mov	r0, r3
 8009b4a:	4770      	bx	lr
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	e7e4      	b.n	8009b1a <__hi0bits+0xa>

08009b50 <__lo0bits>:
 8009b50:	6803      	ldr	r3, [r0, #0]
 8009b52:	f013 0207 	ands.w	r2, r3, #7
 8009b56:	4601      	mov	r1, r0
 8009b58:	d00b      	beq.n	8009b72 <__lo0bits+0x22>
 8009b5a:	07da      	lsls	r2, r3, #31
 8009b5c:	d424      	bmi.n	8009ba8 <__lo0bits+0x58>
 8009b5e:	0798      	lsls	r0, r3, #30
 8009b60:	bf49      	itett	mi
 8009b62:	085b      	lsrmi	r3, r3, #1
 8009b64:	089b      	lsrpl	r3, r3, #2
 8009b66:	2001      	movmi	r0, #1
 8009b68:	600b      	strmi	r3, [r1, #0]
 8009b6a:	bf5c      	itt	pl
 8009b6c:	600b      	strpl	r3, [r1, #0]
 8009b6e:	2002      	movpl	r0, #2
 8009b70:	4770      	bx	lr
 8009b72:	b298      	uxth	r0, r3
 8009b74:	b9b0      	cbnz	r0, 8009ba4 <__lo0bits+0x54>
 8009b76:	0c1b      	lsrs	r3, r3, #16
 8009b78:	2010      	movs	r0, #16
 8009b7a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009b7e:	bf04      	itt	eq
 8009b80:	0a1b      	lsreq	r3, r3, #8
 8009b82:	3008      	addeq	r0, #8
 8009b84:	071a      	lsls	r2, r3, #28
 8009b86:	bf04      	itt	eq
 8009b88:	091b      	lsreq	r3, r3, #4
 8009b8a:	3004      	addeq	r0, #4
 8009b8c:	079a      	lsls	r2, r3, #30
 8009b8e:	bf04      	itt	eq
 8009b90:	089b      	lsreq	r3, r3, #2
 8009b92:	3002      	addeq	r0, #2
 8009b94:	07da      	lsls	r2, r3, #31
 8009b96:	d403      	bmi.n	8009ba0 <__lo0bits+0x50>
 8009b98:	085b      	lsrs	r3, r3, #1
 8009b9a:	f100 0001 	add.w	r0, r0, #1
 8009b9e:	d005      	beq.n	8009bac <__lo0bits+0x5c>
 8009ba0:	600b      	str	r3, [r1, #0]
 8009ba2:	4770      	bx	lr
 8009ba4:	4610      	mov	r0, r2
 8009ba6:	e7e8      	b.n	8009b7a <__lo0bits+0x2a>
 8009ba8:	2000      	movs	r0, #0
 8009baa:	4770      	bx	lr
 8009bac:	2020      	movs	r0, #32
 8009bae:	4770      	bx	lr

08009bb0 <__i2b>:
 8009bb0:	b510      	push	{r4, lr}
 8009bb2:	460c      	mov	r4, r1
 8009bb4:	2101      	movs	r1, #1
 8009bb6:	f7ff feff 	bl	80099b8 <_Balloc>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	b928      	cbnz	r0, 8009bca <__i2b+0x1a>
 8009bbe:	4b05      	ldr	r3, [pc, #20]	; (8009bd4 <__i2b+0x24>)
 8009bc0:	4805      	ldr	r0, [pc, #20]	; (8009bd8 <__i2b+0x28>)
 8009bc2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009bc6:	f000 fc7b 	bl	800a4c0 <__assert_func>
 8009bca:	2301      	movs	r3, #1
 8009bcc:	6144      	str	r4, [r0, #20]
 8009bce:	6103      	str	r3, [r0, #16]
 8009bd0:	bd10      	pop	{r4, pc}
 8009bd2:	bf00      	nop
 8009bd4:	0800ac93 	.word	0x0800ac93
 8009bd8:	0800ad04 	.word	0x0800ad04

08009bdc <__multiply>:
 8009bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be0:	4614      	mov	r4, r2
 8009be2:	690a      	ldr	r2, [r1, #16]
 8009be4:	6923      	ldr	r3, [r4, #16]
 8009be6:	429a      	cmp	r2, r3
 8009be8:	bfb8      	it	lt
 8009bea:	460b      	movlt	r3, r1
 8009bec:	460d      	mov	r5, r1
 8009bee:	bfbc      	itt	lt
 8009bf0:	4625      	movlt	r5, r4
 8009bf2:	461c      	movlt	r4, r3
 8009bf4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009bf8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009bfc:	68ab      	ldr	r3, [r5, #8]
 8009bfe:	6869      	ldr	r1, [r5, #4]
 8009c00:	eb0a 0709 	add.w	r7, sl, r9
 8009c04:	42bb      	cmp	r3, r7
 8009c06:	b085      	sub	sp, #20
 8009c08:	bfb8      	it	lt
 8009c0a:	3101      	addlt	r1, #1
 8009c0c:	f7ff fed4 	bl	80099b8 <_Balloc>
 8009c10:	b930      	cbnz	r0, 8009c20 <__multiply+0x44>
 8009c12:	4602      	mov	r2, r0
 8009c14:	4b42      	ldr	r3, [pc, #264]	; (8009d20 <__multiply+0x144>)
 8009c16:	4843      	ldr	r0, [pc, #268]	; (8009d24 <__multiply+0x148>)
 8009c18:	f240 115d 	movw	r1, #349	; 0x15d
 8009c1c:	f000 fc50 	bl	800a4c0 <__assert_func>
 8009c20:	f100 0614 	add.w	r6, r0, #20
 8009c24:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009c28:	4633      	mov	r3, r6
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	4543      	cmp	r3, r8
 8009c2e:	d31e      	bcc.n	8009c6e <__multiply+0x92>
 8009c30:	f105 0c14 	add.w	ip, r5, #20
 8009c34:	f104 0314 	add.w	r3, r4, #20
 8009c38:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009c3c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009c40:	9202      	str	r2, [sp, #8]
 8009c42:	ebac 0205 	sub.w	r2, ip, r5
 8009c46:	3a15      	subs	r2, #21
 8009c48:	f022 0203 	bic.w	r2, r2, #3
 8009c4c:	3204      	adds	r2, #4
 8009c4e:	f105 0115 	add.w	r1, r5, #21
 8009c52:	458c      	cmp	ip, r1
 8009c54:	bf38      	it	cc
 8009c56:	2204      	movcc	r2, #4
 8009c58:	9201      	str	r2, [sp, #4]
 8009c5a:	9a02      	ldr	r2, [sp, #8]
 8009c5c:	9303      	str	r3, [sp, #12]
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	d808      	bhi.n	8009c74 <__multiply+0x98>
 8009c62:	2f00      	cmp	r7, #0
 8009c64:	dc55      	bgt.n	8009d12 <__multiply+0x136>
 8009c66:	6107      	str	r7, [r0, #16]
 8009c68:	b005      	add	sp, #20
 8009c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c6e:	f843 2b04 	str.w	r2, [r3], #4
 8009c72:	e7db      	b.n	8009c2c <__multiply+0x50>
 8009c74:	f8b3 a000 	ldrh.w	sl, [r3]
 8009c78:	f1ba 0f00 	cmp.w	sl, #0
 8009c7c:	d020      	beq.n	8009cc0 <__multiply+0xe4>
 8009c7e:	f105 0e14 	add.w	lr, r5, #20
 8009c82:	46b1      	mov	r9, r6
 8009c84:	2200      	movs	r2, #0
 8009c86:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009c8a:	f8d9 b000 	ldr.w	fp, [r9]
 8009c8e:	b2a1      	uxth	r1, r4
 8009c90:	fa1f fb8b 	uxth.w	fp, fp
 8009c94:	fb0a b101 	mla	r1, sl, r1, fp
 8009c98:	4411      	add	r1, r2
 8009c9a:	f8d9 2000 	ldr.w	r2, [r9]
 8009c9e:	0c24      	lsrs	r4, r4, #16
 8009ca0:	0c12      	lsrs	r2, r2, #16
 8009ca2:	fb0a 2404 	mla	r4, sl, r4, r2
 8009ca6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009caa:	b289      	uxth	r1, r1
 8009cac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009cb0:	45f4      	cmp	ip, lr
 8009cb2:	f849 1b04 	str.w	r1, [r9], #4
 8009cb6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009cba:	d8e4      	bhi.n	8009c86 <__multiply+0xaa>
 8009cbc:	9901      	ldr	r1, [sp, #4]
 8009cbe:	5072      	str	r2, [r6, r1]
 8009cc0:	9a03      	ldr	r2, [sp, #12]
 8009cc2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009cc6:	3304      	adds	r3, #4
 8009cc8:	f1b9 0f00 	cmp.w	r9, #0
 8009ccc:	d01f      	beq.n	8009d0e <__multiply+0x132>
 8009cce:	6834      	ldr	r4, [r6, #0]
 8009cd0:	f105 0114 	add.w	r1, r5, #20
 8009cd4:	46b6      	mov	lr, r6
 8009cd6:	f04f 0a00 	mov.w	sl, #0
 8009cda:	880a      	ldrh	r2, [r1, #0]
 8009cdc:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009ce0:	fb09 b202 	mla	r2, r9, r2, fp
 8009ce4:	4492      	add	sl, r2
 8009ce6:	b2a4      	uxth	r4, r4
 8009ce8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009cec:	f84e 4b04 	str.w	r4, [lr], #4
 8009cf0:	f851 4b04 	ldr.w	r4, [r1], #4
 8009cf4:	f8be 2000 	ldrh.w	r2, [lr]
 8009cf8:	0c24      	lsrs	r4, r4, #16
 8009cfa:	fb09 2404 	mla	r4, r9, r4, r2
 8009cfe:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009d02:	458c      	cmp	ip, r1
 8009d04:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009d08:	d8e7      	bhi.n	8009cda <__multiply+0xfe>
 8009d0a:	9a01      	ldr	r2, [sp, #4]
 8009d0c:	50b4      	str	r4, [r6, r2]
 8009d0e:	3604      	adds	r6, #4
 8009d10:	e7a3      	b.n	8009c5a <__multiply+0x7e>
 8009d12:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d1a5      	bne.n	8009c66 <__multiply+0x8a>
 8009d1a:	3f01      	subs	r7, #1
 8009d1c:	e7a1      	b.n	8009c62 <__multiply+0x86>
 8009d1e:	bf00      	nop
 8009d20:	0800ac93 	.word	0x0800ac93
 8009d24:	0800ad04 	.word	0x0800ad04

08009d28 <__pow5mult>:
 8009d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d2c:	4615      	mov	r5, r2
 8009d2e:	f012 0203 	ands.w	r2, r2, #3
 8009d32:	4606      	mov	r6, r0
 8009d34:	460f      	mov	r7, r1
 8009d36:	d007      	beq.n	8009d48 <__pow5mult+0x20>
 8009d38:	4c25      	ldr	r4, [pc, #148]	; (8009dd0 <__pow5mult+0xa8>)
 8009d3a:	3a01      	subs	r2, #1
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d42:	f7ff fe9b 	bl	8009a7c <__multadd>
 8009d46:	4607      	mov	r7, r0
 8009d48:	10ad      	asrs	r5, r5, #2
 8009d4a:	d03d      	beq.n	8009dc8 <__pow5mult+0xa0>
 8009d4c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009d4e:	b97c      	cbnz	r4, 8009d70 <__pow5mult+0x48>
 8009d50:	2010      	movs	r0, #16
 8009d52:	f7fd fee1 	bl	8007b18 <malloc>
 8009d56:	4602      	mov	r2, r0
 8009d58:	6270      	str	r0, [r6, #36]	; 0x24
 8009d5a:	b928      	cbnz	r0, 8009d68 <__pow5mult+0x40>
 8009d5c:	4b1d      	ldr	r3, [pc, #116]	; (8009dd4 <__pow5mult+0xac>)
 8009d5e:	481e      	ldr	r0, [pc, #120]	; (8009dd8 <__pow5mult+0xb0>)
 8009d60:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009d64:	f000 fbac 	bl	800a4c0 <__assert_func>
 8009d68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d6c:	6004      	str	r4, [r0, #0]
 8009d6e:	60c4      	str	r4, [r0, #12]
 8009d70:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009d74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d78:	b94c      	cbnz	r4, 8009d8e <__pow5mult+0x66>
 8009d7a:	f240 2171 	movw	r1, #625	; 0x271
 8009d7e:	4630      	mov	r0, r6
 8009d80:	f7ff ff16 	bl	8009bb0 <__i2b>
 8009d84:	2300      	movs	r3, #0
 8009d86:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d8a:	4604      	mov	r4, r0
 8009d8c:	6003      	str	r3, [r0, #0]
 8009d8e:	f04f 0900 	mov.w	r9, #0
 8009d92:	07eb      	lsls	r3, r5, #31
 8009d94:	d50a      	bpl.n	8009dac <__pow5mult+0x84>
 8009d96:	4639      	mov	r1, r7
 8009d98:	4622      	mov	r2, r4
 8009d9a:	4630      	mov	r0, r6
 8009d9c:	f7ff ff1e 	bl	8009bdc <__multiply>
 8009da0:	4639      	mov	r1, r7
 8009da2:	4680      	mov	r8, r0
 8009da4:	4630      	mov	r0, r6
 8009da6:	f7ff fe47 	bl	8009a38 <_Bfree>
 8009daa:	4647      	mov	r7, r8
 8009dac:	106d      	asrs	r5, r5, #1
 8009dae:	d00b      	beq.n	8009dc8 <__pow5mult+0xa0>
 8009db0:	6820      	ldr	r0, [r4, #0]
 8009db2:	b938      	cbnz	r0, 8009dc4 <__pow5mult+0x9c>
 8009db4:	4622      	mov	r2, r4
 8009db6:	4621      	mov	r1, r4
 8009db8:	4630      	mov	r0, r6
 8009dba:	f7ff ff0f 	bl	8009bdc <__multiply>
 8009dbe:	6020      	str	r0, [r4, #0]
 8009dc0:	f8c0 9000 	str.w	r9, [r0]
 8009dc4:	4604      	mov	r4, r0
 8009dc6:	e7e4      	b.n	8009d92 <__pow5mult+0x6a>
 8009dc8:	4638      	mov	r0, r7
 8009dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dce:	bf00      	nop
 8009dd0:	0800ae58 	.word	0x0800ae58
 8009dd4:	0800ac1d 	.word	0x0800ac1d
 8009dd8:	0800ad04 	.word	0x0800ad04

08009ddc <__lshift>:
 8009ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009de0:	460c      	mov	r4, r1
 8009de2:	6849      	ldr	r1, [r1, #4]
 8009de4:	6923      	ldr	r3, [r4, #16]
 8009de6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009dea:	68a3      	ldr	r3, [r4, #8]
 8009dec:	4607      	mov	r7, r0
 8009dee:	4691      	mov	r9, r2
 8009df0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009df4:	f108 0601 	add.w	r6, r8, #1
 8009df8:	42b3      	cmp	r3, r6
 8009dfa:	db0b      	blt.n	8009e14 <__lshift+0x38>
 8009dfc:	4638      	mov	r0, r7
 8009dfe:	f7ff fddb 	bl	80099b8 <_Balloc>
 8009e02:	4605      	mov	r5, r0
 8009e04:	b948      	cbnz	r0, 8009e1a <__lshift+0x3e>
 8009e06:	4602      	mov	r2, r0
 8009e08:	4b28      	ldr	r3, [pc, #160]	; (8009eac <__lshift+0xd0>)
 8009e0a:	4829      	ldr	r0, [pc, #164]	; (8009eb0 <__lshift+0xd4>)
 8009e0c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009e10:	f000 fb56 	bl	800a4c0 <__assert_func>
 8009e14:	3101      	adds	r1, #1
 8009e16:	005b      	lsls	r3, r3, #1
 8009e18:	e7ee      	b.n	8009df8 <__lshift+0x1c>
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	f100 0114 	add.w	r1, r0, #20
 8009e20:	f100 0210 	add.w	r2, r0, #16
 8009e24:	4618      	mov	r0, r3
 8009e26:	4553      	cmp	r3, sl
 8009e28:	db33      	blt.n	8009e92 <__lshift+0xb6>
 8009e2a:	6920      	ldr	r0, [r4, #16]
 8009e2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e30:	f104 0314 	add.w	r3, r4, #20
 8009e34:	f019 091f 	ands.w	r9, r9, #31
 8009e38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009e40:	d02b      	beq.n	8009e9a <__lshift+0xbe>
 8009e42:	f1c9 0e20 	rsb	lr, r9, #32
 8009e46:	468a      	mov	sl, r1
 8009e48:	2200      	movs	r2, #0
 8009e4a:	6818      	ldr	r0, [r3, #0]
 8009e4c:	fa00 f009 	lsl.w	r0, r0, r9
 8009e50:	4302      	orrs	r2, r0
 8009e52:	f84a 2b04 	str.w	r2, [sl], #4
 8009e56:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e5a:	459c      	cmp	ip, r3
 8009e5c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009e60:	d8f3      	bhi.n	8009e4a <__lshift+0x6e>
 8009e62:	ebac 0304 	sub.w	r3, ip, r4
 8009e66:	3b15      	subs	r3, #21
 8009e68:	f023 0303 	bic.w	r3, r3, #3
 8009e6c:	3304      	adds	r3, #4
 8009e6e:	f104 0015 	add.w	r0, r4, #21
 8009e72:	4584      	cmp	ip, r0
 8009e74:	bf38      	it	cc
 8009e76:	2304      	movcc	r3, #4
 8009e78:	50ca      	str	r2, [r1, r3]
 8009e7a:	b10a      	cbz	r2, 8009e80 <__lshift+0xa4>
 8009e7c:	f108 0602 	add.w	r6, r8, #2
 8009e80:	3e01      	subs	r6, #1
 8009e82:	4638      	mov	r0, r7
 8009e84:	612e      	str	r6, [r5, #16]
 8009e86:	4621      	mov	r1, r4
 8009e88:	f7ff fdd6 	bl	8009a38 <_Bfree>
 8009e8c:	4628      	mov	r0, r5
 8009e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e92:	f842 0f04 	str.w	r0, [r2, #4]!
 8009e96:	3301      	adds	r3, #1
 8009e98:	e7c5      	b.n	8009e26 <__lshift+0x4a>
 8009e9a:	3904      	subs	r1, #4
 8009e9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ea0:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ea4:	459c      	cmp	ip, r3
 8009ea6:	d8f9      	bhi.n	8009e9c <__lshift+0xc0>
 8009ea8:	e7ea      	b.n	8009e80 <__lshift+0xa4>
 8009eaa:	bf00      	nop
 8009eac:	0800ac93 	.word	0x0800ac93
 8009eb0:	0800ad04 	.word	0x0800ad04

08009eb4 <__mcmp>:
 8009eb4:	b530      	push	{r4, r5, lr}
 8009eb6:	6902      	ldr	r2, [r0, #16]
 8009eb8:	690c      	ldr	r4, [r1, #16]
 8009eba:	1b12      	subs	r2, r2, r4
 8009ebc:	d10e      	bne.n	8009edc <__mcmp+0x28>
 8009ebe:	f100 0314 	add.w	r3, r0, #20
 8009ec2:	3114      	adds	r1, #20
 8009ec4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009ec8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009ecc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009ed0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009ed4:	42a5      	cmp	r5, r4
 8009ed6:	d003      	beq.n	8009ee0 <__mcmp+0x2c>
 8009ed8:	d305      	bcc.n	8009ee6 <__mcmp+0x32>
 8009eda:	2201      	movs	r2, #1
 8009edc:	4610      	mov	r0, r2
 8009ede:	bd30      	pop	{r4, r5, pc}
 8009ee0:	4283      	cmp	r3, r0
 8009ee2:	d3f3      	bcc.n	8009ecc <__mcmp+0x18>
 8009ee4:	e7fa      	b.n	8009edc <__mcmp+0x28>
 8009ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8009eea:	e7f7      	b.n	8009edc <__mcmp+0x28>

08009eec <__mdiff>:
 8009eec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef0:	460c      	mov	r4, r1
 8009ef2:	4606      	mov	r6, r0
 8009ef4:	4611      	mov	r1, r2
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	4617      	mov	r7, r2
 8009efa:	f7ff ffdb 	bl	8009eb4 <__mcmp>
 8009efe:	1e05      	subs	r5, r0, #0
 8009f00:	d110      	bne.n	8009f24 <__mdiff+0x38>
 8009f02:	4629      	mov	r1, r5
 8009f04:	4630      	mov	r0, r6
 8009f06:	f7ff fd57 	bl	80099b8 <_Balloc>
 8009f0a:	b930      	cbnz	r0, 8009f1a <__mdiff+0x2e>
 8009f0c:	4b39      	ldr	r3, [pc, #228]	; (8009ff4 <__mdiff+0x108>)
 8009f0e:	4602      	mov	r2, r0
 8009f10:	f240 2132 	movw	r1, #562	; 0x232
 8009f14:	4838      	ldr	r0, [pc, #224]	; (8009ff8 <__mdiff+0x10c>)
 8009f16:	f000 fad3 	bl	800a4c0 <__assert_func>
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f24:	bfa4      	itt	ge
 8009f26:	463b      	movge	r3, r7
 8009f28:	4627      	movge	r7, r4
 8009f2a:	4630      	mov	r0, r6
 8009f2c:	6879      	ldr	r1, [r7, #4]
 8009f2e:	bfa6      	itte	ge
 8009f30:	461c      	movge	r4, r3
 8009f32:	2500      	movge	r5, #0
 8009f34:	2501      	movlt	r5, #1
 8009f36:	f7ff fd3f 	bl	80099b8 <_Balloc>
 8009f3a:	b920      	cbnz	r0, 8009f46 <__mdiff+0x5a>
 8009f3c:	4b2d      	ldr	r3, [pc, #180]	; (8009ff4 <__mdiff+0x108>)
 8009f3e:	4602      	mov	r2, r0
 8009f40:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009f44:	e7e6      	b.n	8009f14 <__mdiff+0x28>
 8009f46:	693e      	ldr	r6, [r7, #16]
 8009f48:	60c5      	str	r5, [r0, #12]
 8009f4a:	6925      	ldr	r5, [r4, #16]
 8009f4c:	f107 0114 	add.w	r1, r7, #20
 8009f50:	f104 0914 	add.w	r9, r4, #20
 8009f54:	f100 0e14 	add.w	lr, r0, #20
 8009f58:	f107 0210 	add.w	r2, r7, #16
 8009f5c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009f60:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009f64:	46f2      	mov	sl, lr
 8009f66:	2700      	movs	r7, #0
 8009f68:	f859 3b04 	ldr.w	r3, [r9], #4
 8009f6c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009f70:	fa1f f883 	uxth.w	r8, r3
 8009f74:	fa17 f78b 	uxtah	r7, r7, fp
 8009f78:	0c1b      	lsrs	r3, r3, #16
 8009f7a:	eba7 0808 	sub.w	r8, r7, r8
 8009f7e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009f82:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009f86:	fa1f f888 	uxth.w	r8, r8
 8009f8a:	141f      	asrs	r7, r3, #16
 8009f8c:	454d      	cmp	r5, r9
 8009f8e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009f92:	f84a 3b04 	str.w	r3, [sl], #4
 8009f96:	d8e7      	bhi.n	8009f68 <__mdiff+0x7c>
 8009f98:	1b2b      	subs	r3, r5, r4
 8009f9a:	3b15      	subs	r3, #21
 8009f9c:	f023 0303 	bic.w	r3, r3, #3
 8009fa0:	3304      	adds	r3, #4
 8009fa2:	3415      	adds	r4, #21
 8009fa4:	42a5      	cmp	r5, r4
 8009fa6:	bf38      	it	cc
 8009fa8:	2304      	movcc	r3, #4
 8009faa:	4419      	add	r1, r3
 8009fac:	4473      	add	r3, lr
 8009fae:	469e      	mov	lr, r3
 8009fb0:	460d      	mov	r5, r1
 8009fb2:	4565      	cmp	r5, ip
 8009fb4:	d30e      	bcc.n	8009fd4 <__mdiff+0xe8>
 8009fb6:	f10c 0203 	add.w	r2, ip, #3
 8009fba:	1a52      	subs	r2, r2, r1
 8009fbc:	f022 0203 	bic.w	r2, r2, #3
 8009fc0:	3903      	subs	r1, #3
 8009fc2:	458c      	cmp	ip, r1
 8009fc4:	bf38      	it	cc
 8009fc6:	2200      	movcc	r2, #0
 8009fc8:	441a      	add	r2, r3
 8009fca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009fce:	b17b      	cbz	r3, 8009ff0 <__mdiff+0x104>
 8009fd0:	6106      	str	r6, [r0, #16]
 8009fd2:	e7a5      	b.n	8009f20 <__mdiff+0x34>
 8009fd4:	f855 8b04 	ldr.w	r8, [r5], #4
 8009fd8:	fa17 f488 	uxtah	r4, r7, r8
 8009fdc:	1422      	asrs	r2, r4, #16
 8009fde:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009fe2:	b2a4      	uxth	r4, r4
 8009fe4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009fe8:	f84e 4b04 	str.w	r4, [lr], #4
 8009fec:	1417      	asrs	r7, r2, #16
 8009fee:	e7e0      	b.n	8009fb2 <__mdiff+0xc6>
 8009ff0:	3e01      	subs	r6, #1
 8009ff2:	e7ea      	b.n	8009fca <__mdiff+0xde>
 8009ff4:	0800ac93 	.word	0x0800ac93
 8009ff8:	0800ad04 	.word	0x0800ad04

08009ffc <__d2b>:
 8009ffc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a000:	4689      	mov	r9, r1
 800a002:	2101      	movs	r1, #1
 800a004:	ec57 6b10 	vmov	r6, r7, d0
 800a008:	4690      	mov	r8, r2
 800a00a:	f7ff fcd5 	bl	80099b8 <_Balloc>
 800a00e:	4604      	mov	r4, r0
 800a010:	b930      	cbnz	r0, 800a020 <__d2b+0x24>
 800a012:	4602      	mov	r2, r0
 800a014:	4b25      	ldr	r3, [pc, #148]	; (800a0ac <__d2b+0xb0>)
 800a016:	4826      	ldr	r0, [pc, #152]	; (800a0b0 <__d2b+0xb4>)
 800a018:	f240 310a 	movw	r1, #778	; 0x30a
 800a01c:	f000 fa50 	bl	800a4c0 <__assert_func>
 800a020:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a024:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a028:	bb35      	cbnz	r5, 800a078 <__d2b+0x7c>
 800a02a:	2e00      	cmp	r6, #0
 800a02c:	9301      	str	r3, [sp, #4]
 800a02e:	d028      	beq.n	800a082 <__d2b+0x86>
 800a030:	4668      	mov	r0, sp
 800a032:	9600      	str	r6, [sp, #0]
 800a034:	f7ff fd8c 	bl	8009b50 <__lo0bits>
 800a038:	9900      	ldr	r1, [sp, #0]
 800a03a:	b300      	cbz	r0, 800a07e <__d2b+0x82>
 800a03c:	9a01      	ldr	r2, [sp, #4]
 800a03e:	f1c0 0320 	rsb	r3, r0, #32
 800a042:	fa02 f303 	lsl.w	r3, r2, r3
 800a046:	430b      	orrs	r3, r1
 800a048:	40c2      	lsrs	r2, r0
 800a04a:	6163      	str	r3, [r4, #20]
 800a04c:	9201      	str	r2, [sp, #4]
 800a04e:	9b01      	ldr	r3, [sp, #4]
 800a050:	61a3      	str	r3, [r4, #24]
 800a052:	2b00      	cmp	r3, #0
 800a054:	bf14      	ite	ne
 800a056:	2202      	movne	r2, #2
 800a058:	2201      	moveq	r2, #1
 800a05a:	6122      	str	r2, [r4, #16]
 800a05c:	b1d5      	cbz	r5, 800a094 <__d2b+0x98>
 800a05e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a062:	4405      	add	r5, r0
 800a064:	f8c9 5000 	str.w	r5, [r9]
 800a068:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a06c:	f8c8 0000 	str.w	r0, [r8]
 800a070:	4620      	mov	r0, r4
 800a072:	b003      	add	sp, #12
 800a074:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a078:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a07c:	e7d5      	b.n	800a02a <__d2b+0x2e>
 800a07e:	6161      	str	r1, [r4, #20]
 800a080:	e7e5      	b.n	800a04e <__d2b+0x52>
 800a082:	a801      	add	r0, sp, #4
 800a084:	f7ff fd64 	bl	8009b50 <__lo0bits>
 800a088:	9b01      	ldr	r3, [sp, #4]
 800a08a:	6163      	str	r3, [r4, #20]
 800a08c:	2201      	movs	r2, #1
 800a08e:	6122      	str	r2, [r4, #16]
 800a090:	3020      	adds	r0, #32
 800a092:	e7e3      	b.n	800a05c <__d2b+0x60>
 800a094:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a098:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a09c:	f8c9 0000 	str.w	r0, [r9]
 800a0a0:	6918      	ldr	r0, [r3, #16]
 800a0a2:	f7ff fd35 	bl	8009b10 <__hi0bits>
 800a0a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a0aa:	e7df      	b.n	800a06c <__d2b+0x70>
 800a0ac:	0800ac93 	.word	0x0800ac93
 800a0b0:	0800ad04 	.word	0x0800ad04

0800a0b4 <_calloc_r>:
 800a0b4:	b513      	push	{r0, r1, r4, lr}
 800a0b6:	434a      	muls	r2, r1
 800a0b8:	4611      	mov	r1, r2
 800a0ba:	9201      	str	r2, [sp, #4]
 800a0bc:	f7fd fd9a 	bl	8007bf4 <_malloc_r>
 800a0c0:	4604      	mov	r4, r0
 800a0c2:	b118      	cbz	r0, 800a0cc <_calloc_r+0x18>
 800a0c4:	9a01      	ldr	r2, [sp, #4]
 800a0c6:	2100      	movs	r1, #0
 800a0c8:	f7fd fd3c 	bl	8007b44 <memset>
 800a0cc:	4620      	mov	r0, r4
 800a0ce:	b002      	add	sp, #8
 800a0d0:	bd10      	pop	{r4, pc}

0800a0d2 <__sfputc_r>:
 800a0d2:	6893      	ldr	r3, [r2, #8]
 800a0d4:	3b01      	subs	r3, #1
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	b410      	push	{r4}
 800a0da:	6093      	str	r3, [r2, #8]
 800a0dc:	da08      	bge.n	800a0f0 <__sfputc_r+0x1e>
 800a0de:	6994      	ldr	r4, [r2, #24]
 800a0e0:	42a3      	cmp	r3, r4
 800a0e2:	db01      	blt.n	800a0e8 <__sfputc_r+0x16>
 800a0e4:	290a      	cmp	r1, #10
 800a0e6:	d103      	bne.n	800a0f0 <__sfputc_r+0x1e>
 800a0e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0ec:	f7fe bafa 	b.w	80086e4 <__swbuf_r>
 800a0f0:	6813      	ldr	r3, [r2, #0]
 800a0f2:	1c58      	adds	r0, r3, #1
 800a0f4:	6010      	str	r0, [r2, #0]
 800a0f6:	7019      	strb	r1, [r3, #0]
 800a0f8:	4608      	mov	r0, r1
 800a0fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0fe:	4770      	bx	lr

0800a100 <__sfputs_r>:
 800a100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a102:	4606      	mov	r6, r0
 800a104:	460f      	mov	r7, r1
 800a106:	4614      	mov	r4, r2
 800a108:	18d5      	adds	r5, r2, r3
 800a10a:	42ac      	cmp	r4, r5
 800a10c:	d101      	bne.n	800a112 <__sfputs_r+0x12>
 800a10e:	2000      	movs	r0, #0
 800a110:	e007      	b.n	800a122 <__sfputs_r+0x22>
 800a112:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a116:	463a      	mov	r2, r7
 800a118:	4630      	mov	r0, r6
 800a11a:	f7ff ffda 	bl	800a0d2 <__sfputc_r>
 800a11e:	1c43      	adds	r3, r0, #1
 800a120:	d1f3      	bne.n	800a10a <__sfputs_r+0xa>
 800a122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a124 <_vfiprintf_r>:
 800a124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a128:	460d      	mov	r5, r1
 800a12a:	b09d      	sub	sp, #116	; 0x74
 800a12c:	4614      	mov	r4, r2
 800a12e:	4698      	mov	r8, r3
 800a130:	4606      	mov	r6, r0
 800a132:	b118      	cbz	r0, 800a13c <_vfiprintf_r+0x18>
 800a134:	6983      	ldr	r3, [r0, #24]
 800a136:	b90b      	cbnz	r3, 800a13c <_vfiprintf_r+0x18>
 800a138:	f7ff fb28 	bl	800978c <__sinit>
 800a13c:	4b89      	ldr	r3, [pc, #548]	; (800a364 <_vfiprintf_r+0x240>)
 800a13e:	429d      	cmp	r5, r3
 800a140:	d11b      	bne.n	800a17a <_vfiprintf_r+0x56>
 800a142:	6875      	ldr	r5, [r6, #4]
 800a144:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a146:	07d9      	lsls	r1, r3, #31
 800a148:	d405      	bmi.n	800a156 <_vfiprintf_r+0x32>
 800a14a:	89ab      	ldrh	r3, [r5, #12]
 800a14c:	059a      	lsls	r2, r3, #22
 800a14e:	d402      	bmi.n	800a156 <_vfiprintf_r+0x32>
 800a150:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a152:	f7ff fbbe 	bl	80098d2 <__retarget_lock_acquire_recursive>
 800a156:	89ab      	ldrh	r3, [r5, #12]
 800a158:	071b      	lsls	r3, r3, #28
 800a15a:	d501      	bpl.n	800a160 <_vfiprintf_r+0x3c>
 800a15c:	692b      	ldr	r3, [r5, #16]
 800a15e:	b9eb      	cbnz	r3, 800a19c <_vfiprintf_r+0x78>
 800a160:	4629      	mov	r1, r5
 800a162:	4630      	mov	r0, r6
 800a164:	f7fe fb10 	bl	8008788 <__swsetup_r>
 800a168:	b1c0      	cbz	r0, 800a19c <_vfiprintf_r+0x78>
 800a16a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a16c:	07dc      	lsls	r4, r3, #31
 800a16e:	d50e      	bpl.n	800a18e <_vfiprintf_r+0x6a>
 800a170:	f04f 30ff 	mov.w	r0, #4294967295
 800a174:	b01d      	add	sp, #116	; 0x74
 800a176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a17a:	4b7b      	ldr	r3, [pc, #492]	; (800a368 <_vfiprintf_r+0x244>)
 800a17c:	429d      	cmp	r5, r3
 800a17e:	d101      	bne.n	800a184 <_vfiprintf_r+0x60>
 800a180:	68b5      	ldr	r5, [r6, #8]
 800a182:	e7df      	b.n	800a144 <_vfiprintf_r+0x20>
 800a184:	4b79      	ldr	r3, [pc, #484]	; (800a36c <_vfiprintf_r+0x248>)
 800a186:	429d      	cmp	r5, r3
 800a188:	bf08      	it	eq
 800a18a:	68f5      	ldreq	r5, [r6, #12]
 800a18c:	e7da      	b.n	800a144 <_vfiprintf_r+0x20>
 800a18e:	89ab      	ldrh	r3, [r5, #12]
 800a190:	0598      	lsls	r0, r3, #22
 800a192:	d4ed      	bmi.n	800a170 <_vfiprintf_r+0x4c>
 800a194:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a196:	f7ff fb9d 	bl	80098d4 <__retarget_lock_release_recursive>
 800a19a:	e7e9      	b.n	800a170 <_vfiprintf_r+0x4c>
 800a19c:	2300      	movs	r3, #0
 800a19e:	9309      	str	r3, [sp, #36]	; 0x24
 800a1a0:	2320      	movs	r3, #32
 800a1a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1aa:	2330      	movs	r3, #48	; 0x30
 800a1ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a370 <_vfiprintf_r+0x24c>
 800a1b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1b4:	f04f 0901 	mov.w	r9, #1
 800a1b8:	4623      	mov	r3, r4
 800a1ba:	469a      	mov	sl, r3
 800a1bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1c0:	b10a      	cbz	r2, 800a1c6 <_vfiprintf_r+0xa2>
 800a1c2:	2a25      	cmp	r2, #37	; 0x25
 800a1c4:	d1f9      	bne.n	800a1ba <_vfiprintf_r+0x96>
 800a1c6:	ebba 0b04 	subs.w	fp, sl, r4
 800a1ca:	d00b      	beq.n	800a1e4 <_vfiprintf_r+0xc0>
 800a1cc:	465b      	mov	r3, fp
 800a1ce:	4622      	mov	r2, r4
 800a1d0:	4629      	mov	r1, r5
 800a1d2:	4630      	mov	r0, r6
 800a1d4:	f7ff ff94 	bl	800a100 <__sfputs_r>
 800a1d8:	3001      	adds	r0, #1
 800a1da:	f000 80aa 	beq.w	800a332 <_vfiprintf_r+0x20e>
 800a1de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1e0:	445a      	add	r2, fp
 800a1e2:	9209      	str	r2, [sp, #36]	; 0x24
 800a1e4:	f89a 3000 	ldrb.w	r3, [sl]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	f000 80a2 	beq.w	800a332 <_vfiprintf_r+0x20e>
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a1f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1f8:	f10a 0a01 	add.w	sl, sl, #1
 800a1fc:	9304      	str	r3, [sp, #16]
 800a1fe:	9307      	str	r3, [sp, #28]
 800a200:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a204:	931a      	str	r3, [sp, #104]	; 0x68
 800a206:	4654      	mov	r4, sl
 800a208:	2205      	movs	r2, #5
 800a20a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a20e:	4858      	ldr	r0, [pc, #352]	; (800a370 <_vfiprintf_r+0x24c>)
 800a210:	f7f5 ffe6 	bl	80001e0 <memchr>
 800a214:	9a04      	ldr	r2, [sp, #16]
 800a216:	b9d8      	cbnz	r0, 800a250 <_vfiprintf_r+0x12c>
 800a218:	06d1      	lsls	r1, r2, #27
 800a21a:	bf44      	itt	mi
 800a21c:	2320      	movmi	r3, #32
 800a21e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a222:	0713      	lsls	r3, r2, #28
 800a224:	bf44      	itt	mi
 800a226:	232b      	movmi	r3, #43	; 0x2b
 800a228:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a22c:	f89a 3000 	ldrb.w	r3, [sl]
 800a230:	2b2a      	cmp	r3, #42	; 0x2a
 800a232:	d015      	beq.n	800a260 <_vfiprintf_r+0x13c>
 800a234:	9a07      	ldr	r2, [sp, #28]
 800a236:	4654      	mov	r4, sl
 800a238:	2000      	movs	r0, #0
 800a23a:	f04f 0c0a 	mov.w	ip, #10
 800a23e:	4621      	mov	r1, r4
 800a240:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a244:	3b30      	subs	r3, #48	; 0x30
 800a246:	2b09      	cmp	r3, #9
 800a248:	d94e      	bls.n	800a2e8 <_vfiprintf_r+0x1c4>
 800a24a:	b1b0      	cbz	r0, 800a27a <_vfiprintf_r+0x156>
 800a24c:	9207      	str	r2, [sp, #28]
 800a24e:	e014      	b.n	800a27a <_vfiprintf_r+0x156>
 800a250:	eba0 0308 	sub.w	r3, r0, r8
 800a254:	fa09 f303 	lsl.w	r3, r9, r3
 800a258:	4313      	orrs	r3, r2
 800a25a:	9304      	str	r3, [sp, #16]
 800a25c:	46a2      	mov	sl, r4
 800a25e:	e7d2      	b.n	800a206 <_vfiprintf_r+0xe2>
 800a260:	9b03      	ldr	r3, [sp, #12]
 800a262:	1d19      	adds	r1, r3, #4
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	9103      	str	r1, [sp, #12]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	bfbb      	ittet	lt
 800a26c:	425b      	neglt	r3, r3
 800a26e:	f042 0202 	orrlt.w	r2, r2, #2
 800a272:	9307      	strge	r3, [sp, #28]
 800a274:	9307      	strlt	r3, [sp, #28]
 800a276:	bfb8      	it	lt
 800a278:	9204      	strlt	r2, [sp, #16]
 800a27a:	7823      	ldrb	r3, [r4, #0]
 800a27c:	2b2e      	cmp	r3, #46	; 0x2e
 800a27e:	d10c      	bne.n	800a29a <_vfiprintf_r+0x176>
 800a280:	7863      	ldrb	r3, [r4, #1]
 800a282:	2b2a      	cmp	r3, #42	; 0x2a
 800a284:	d135      	bne.n	800a2f2 <_vfiprintf_r+0x1ce>
 800a286:	9b03      	ldr	r3, [sp, #12]
 800a288:	1d1a      	adds	r2, r3, #4
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	9203      	str	r2, [sp, #12]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	bfb8      	it	lt
 800a292:	f04f 33ff 	movlt.w	r3, #4294967295
 800a296:	3402      	adds	r4, #2
 800a298:	9305      	str	r3, [sp, #20]
 800a29a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a380 <_vfiprintf_r+0x25c>
 800a29e:	7821      	ldrb	r1, [r4, #0]
 800a2a0:	2203      	movs	r2, #3
 800a2a2:	4650      	mov	r0, sl
 800a2a4:	f7f5 ff9c 	bl	80001e0 <memchr>
 800a2a8:	b140      	cbz	r0, 800a2bc <_vfiprintf_r+0x198>
 800a2aa:	2340      	movs	r3, #64	; 0x40
 800a2ac:	eba0 000a 	sub.w	r0, r0, sl
 800a2b0:	fa03 f000 	lsl.w	r0, r3, r0
 800a2b4:	9b04      	ldr	r3, [sp, #16]
 800a2b6:	4303      	orrs	r3, r0
 800a2b8:	3401      	adds	r4, #1
 800a2ba:	9304      	str	r3, [sp, #16]
 800a2bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2c0:	482c      	ldr	r0, [pc, #176]	; (800a374 <_vfiprintf_r+0x250>)
 800a2c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2c6:	2206      	movs	r2, #6
 800a2c8:	f7f5 ff8a 	bl	80001e0 <memchr>
 800a2cc:	2800      	cmp	r0, #0
 800a2ce:	d03f      	beq.n	800a350 <_vfiprintf_r+0x22c>
 800a2d0:	4b29      	ldr	r3, [pc, #164]	; (800a378 <_vfiprintf_r+0x254>)
 800a2d2:	bb1b      	cbnz	r3, 800a31c <_vfiprintf_r+0x1f8>
 800a2d4:	9b03      	ldr	r3, [sp, #12]
 800a2d6:	3307      	adds	r3, #7
 800a2d8:	f023 0307 	bic.w	r3, r3, #7
 800a2dc:	3308      	adds	r3, #8
 800a2de:	9303      	str	r3, [sp, #12]
 800a2e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2e2:	443b      	add	r3, r7
 800a2e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a2e6:	e767      	b.n	800a1b8 <_vfiprintf_r+0x94>
 800a2e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2ec:	460c      	mov	r4, r1
 800a2ee:	2001      	movs	r0, #1
 800a2f0:	e7a5      	b.n	800a23e <_vfiprintf_r+0x11a>
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	3401      	adds	r4, #1
 800a2f6:	9305      	str	r3, [sp, #20]
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	f04f 0c0a 	mov.w	ip, #10
 800a2fe:	4620      	mov	r0, r4
 800a300:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a304:	3a30      	subs	r2, #48	; 0x30
 800a306:	2a09      	cmp	r2, #9
 800a308:	d903      	bls.n	800a312 <_vfiprintf_r+0x1ee>
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d0c5      	beq.n	800a29a <_vfiprintf_r+0x176>
 800a30e:	9105      	str	r1, [sp, #20]
 800a310:	e7c3      	b.n	800a29a <_vfiprintf_r+0x176>
 800a312:	fb0c 2101 	mla	r1, ip, r1, r2
 800a316:	4604      	mov	r4, r0
 800a318:	2301      	movs	r3, #1
 800a31a:	e7f0      	b.n	800a2fe <_vfiprintf_r+0x1da>
 800a31c:	ab03      	add	r3, sp, #12
 800a31e:	9300      	str	r3, [sp, #0]
 800a320:	462a      	mov	r2, r5
 800a322:	4b16      	ldr	r3, [pc, #88]	; (800a37c <_vfiprintf_r+0x258>)
 800a324:	a904      	add	r1, sp, #16
 800a326:	4630      	mov	r0, r6
 800a328:	f7fd fd5e 	bl	8007de8 <_printf_float>
 800a32c:	4607      	mov	r7, r0
 800a32e:	1c78      	adds	r0, r7, #1
 800a330:	d1d6      	bne.n	800a2e0 <_vfiprintf_r+0x1bc>
 800a332:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a334:	07d9      	lsls	r1, r3, #31
 800a336:	d405      	bmi.n	800a344 <_vfiprintf_r+0x220>
 800a338:	89ab      	ldrh	r3, [r5, #12]
 800a33a:	059a      	lsls	r2, r3, #22
 800a33c:	d402      	bmi.n	800a344 <_vfiprintf_r+0x220>
 800a33e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a340:	f7ff fac8 	bl	80098d4 <__retarget_lock_release_recursive>
 800a344:	89ab      	ldrh	r3, [r5, #12]
 800a346:	065b      	lsls	r3, r3, #25
 800a348:	f53f af12 	bmi.w	800a170 <_vfiprintf_r+0x4c>
 800a34c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a34e:	e711      	b.n	800a174 <_vfiprintf_r+0x50>
 800a350:	ab03      	add	r3, sp, #12
 800a352:	9300      	str	r3, [sp, #0]
 800a354:	462a      	mov	r2, r5
 800a356:	4b09      	ldr	r3, [pc, #36]	; (800a37c <_vfiprintf_r+0x258>)
 800a358:	a904      	add	r1, sp, #16
 800a35a:	4630      	mov	r0, r6
 800a35c:	f7fd ffe8 	bl	8008330 <_printf_i>
 800a360:	e7e4      	b.n	800a32c <_vfiprintf_r+0x208>
 800a362:	bf00      	nop
 800a364:	0800acc4 	.word	0x0800acc4
 800a368:	0800ace4 	.word	0x0800ace4
 800a36c:	0800aca4 	.word	0x0800aca4
 800a370:	0800ae64 	.word	0x0800ae64
 800a374:	0800ae6e 	.word	0x0800ae6e
 800a378:	08007de9 	.word	0x08007de9
 800a37c:	0800a101 	.word	0x0800a101
 800a380:	0800ae6a 	.word	0x0800ae6a

0800a384 <_putc_r>:
 800a384:	b570      	push	{r4, r5, r6, lr}
 800a386:	460d      	mov	r5, r1
 800a388:	4614      	mov	r4, r2
 800a38a:	4606      	mov	r6, r0
 800a38c:	b118      	cbz	r0, 800a396 <_putc_r+0x12>
 800a38e:	6983      	ldr	r3, [r0, #24]
 800a390:	b90b      	cbnz	r3, 800a396 <_putc_r+0x12>
 800a392:	f7ff f9fb 	bl	800978c <__sinit>
 800a396:	4b1c      	ldr	r3, [pc, #112]	; (800a408 <_putc_r+0x84>)
 800a398:	429c      	cmp	r4, r3
 800a39a:	d124      	bne.n	800a3e6 <_putc_r+0x62>
 800a39c:	6874      	ldr	r4, [r6, #4]
 800a39e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3a0:	07d8      	lsls	r0, r3, #31
 800a3a2:	d405      	bmi.n	800a3b0 <_putc_r+0x2c>
 800a3a4:	89a3      	ldrh	r3, [r4, #12]
 800a3a6:	0599      	lsls	r1, r3, #22
 800a3a8:	d402      	bmi.n	800a3b0 <_putc_r+0x2c>
 800a3aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3ac:	f7ff fa91 	bl	80098d2 <__retarget_lock_acquire_recursive>
 800a3b0:	68a3      	ldr	r3, [r4, #8]
 800a3b2:	3b01      	subs	r3, #1
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	60a3      	str	r3, [r4, #8]
 800a3b8:	da05      	bge.n	800a3c6 <_putc_r+0x42>
 800a3ba:	69a2      	ldr	r2, [r4, #24]
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	db1c      	blt.n	800a3fa <_putc_r+0x76>
 800a3c0:	b2eb      	uxtb	r3, r5
 800a3c2:	2b0a      	cmp	r3, #10
 800a3c4:	d019      	beq.n	800a3fa <_putc_r+0x76>
 800a3c6:	6823      	ldr	r3, [r4, #0]
 800a3c8:	1c5a      	adds	r2, r3, #1
 800a3ca:	6022      	str	r2, [r4, #0]
 800a3cc:	701d      	strb	r5, [r3, #0]
 800a3ce:	b2ed      	uxtb	r5, r5
 800a3d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3d2:	07da      	lsls	r2, r3, #31
 800a3d4:	d405      	bmi.n	800a3e2 <_putc_r+0x5e>
 800a3d6:	89a3      	ldrh	r3, [r4, #12]
 800a3d8:	059b      	lsls	r3, r3, #22
 800a3da:	d402      	bmi.n	800a3e2 <_putc_r+0x5e>
 800a3dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3de:	f7ff fa79 	bl	80098d4 <__retarget_lock_release_recursive>
 800a3e2:	4628      	mov	r0, r5
 800a3e4:	bd70      	pop	{r4, r5, r6, pc}
 800a3e6:	4b09      	ldr	r3, [pc, #36]	; (800a40c <_putc_r+0x88>)
 800a3e8:	429c      	cmp	r4, r3
 800a3ea:	d101      	bne.n	800a3f0 <_putc_r+0x6c>
 800a3ec:	68b4      	ldr	r4, [r6, #8]
 800a3ee:	e7d6      	b.n	800a39e <_putc_r+0x1a>
 800a3f0:	4b07      	ldr	r3, [pc, #28]	; (800a410 <_putc_r+0x8c>)
 800a3f2:	429c      	cmp	r4, r3
 800a3f4:	bf08      	it	eq
 800a3f6:	68f4      	ldreq	r4, [r6, #12]
 800a3f8:	e7d1      	b.n	800a39e <_putc_r+0x1a>
 800a3fa:	4629      	mov	r1, r5
 800a3fc:	4622      	mov	r2, r4
 800a3fe:	4630      	mov	r0, r6
 800a400:	f7fe f970 	bl	80086e4 <__swbuf_r>
 800a404:	4605      	mov	r5, r0
 800a406:	e7e3      	b.n	800a3d0 <_putc_r+0x4c>
 800a408:	0800acc4 	.word	0x0800acc4
 800a40c:	0800ace4 	.word	0x0800ace4
 800a410:	0800aca4 	.word	0x0800aca4

0800a414 <__sread>:
 800a414:	b510      	push	{r4, lr}
 800a416:	460c      	mov	r4, r1
 800a418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a41c:	f000 f8d6 	bl	800a5cc <_read_r>
 800a420:	2800      	cmp	r0, #0
 800a422:	bfab      	itete	ge
 800a424:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a426:	89a3      	ldrhlt	r3, [r4, #12]
 800a428:	181b      	addge	r3, r3, r0
 800a42a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a42e:	bfac      	ite	ge
 800a430:	6563      	strge	r3, [r4, #84]	; 0x54
 800a432:	81a3      	strhlt	r3, [r4, #12]
 800a434:	bd10      	pop	{r4, pc}

0800a436 <__swrite>:
 800a436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a43a:	461f      	mov	r7, r3
 800a43c:	898b      	ldrh	r3, [r1, #12]
 800a43e:	05db      	lsls	r3, r3, #23
 800a440:	4605      	mov	r5, r0
 800a442:	460c      	mov	r4, r1
 800a444:	4616      	mov	r6, r2
 800a446:	d505      	bpl.n	800a454 <__swrite+0x1e>
 800a448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a44c:	2302      	movs	r3, #2
 800a44e:	2200      	movs	r2, #0
 800a450:	f000 f898 	bl	800a584 <_lseek_r>
 800a454:	89a3      	ldrh	r3, [r4, #12]
 800a456:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a45a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a45e:	81a3      	strh	r3, [r4, #12]
 800a460:	4632      	mov	r2, r6
 800a462:	463b      	mov	r3, r7
 800a464:	4628      	mov	r0, r5
 800a466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a46a:	f000 b817 	b.w	800a49c <_write_r>

0800a46e <__sseek>:
 800a46e:	b510      	push	{r4, lr}
 800a470:	460c      	mov	r4, r1
 800a472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a476:	f000 f885 	bl	800a584 <_lseek_r>
 800a47a:	1c43      	adds	r3, r0, #1
 800a47c:	89a3      	ldrh	r3, [r4, #12]
 800a47e:	bf15      	itete	ne
 800a480:	6560      	strne	r0, [r4, #84]	; 0x54
 800a482:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a486:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a48a:	81a3      	strheq	r3, [r4, #12]
 800a48c:	bf18      	it	ne
 800a48e:	81a3      	strhne	r3, [r4, #12]
 800a490:	bd10      	pop	{r4, pc}

0800a492 <__sclose>:
 800a492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a496:	f000 b831 	b.w	800a4fc <_close_r>
	...

0800a49c <_write_r>:
 800a49c:	b538      	push	{r3, r4, r5, lr}
 800a49e:	4d07      	ldr	r5, [pc, #28]	; (800a4bc <_write_r+0x20>)
 800a4a0:	4604      	mov	r4, r0
 800a4a2:	4608      	mov	r0, r1
 800a4a4:	4611      	mov	r1, r2
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	602a      	str	r2, [r5, #0]
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	f7f8 fe51 	bl	8003152 <_write>
 800a4b0:	1c43      	adds	r3, r0, #1
 800a4b2:	d102      	bne.n	800a4ba <_write_r+0x1e>
 800a4b4:	682b      	ldr	r3, [r5, #0]
 800a4b6:	b103      	cbz	r3, 800a4ba <_write_r+0x1e>
 800a4b8:	6023      	str	r3, [r4, #0]
 800a4ba:	bd38      	pop	{r3, r4, r5, pc}
 800a4bc:	200006bc 	.word	0x200006bc

0800a4c0 <__assert_func>:
 800a4c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a4c2:	4614      	mov	r4, r2
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	4b09      	ldr	r3, [pc, #36]	; (800a4ec <__assert_func+0x2c>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4605      	mov	r5, r0
 800a4cc:	68d8      	ldr	r0, [r3, #12]
 800a4ce:	b14c      	cbz	r4, 800a4e4 <__assert_func+0x24>
 800a4d0:	4b07      	ldr	r3, [pc, #28]	; (800a4f0 <__assert_func+0x30>)
 800a4d2:	9100      	str	r1, [sp, #0]
 800a4d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a4d8:	4906      	ldr	r1, [pc, #24]	; (800a4f4 <__assert_func+0x34>)
 800a4da:	462b      	mov	r3, r5
 800a4dc:	f000 f81e 	bl	800a51c <fiprintf>
 800a4e0:	f000 f893 	bl	800a60a <abort>
 800a4e4:	4b04      	ldr	r3, [pc, #16]	; (800a4f8 <__assert_func+0x38>)
 800a4e6:	461c      	mov	r4, r3
 800a4e8:	e7f3      	b.n	800a4d2 <__assert_func+0x12>
 800a4ea:	bf00      	nop
 800a4ec:	20000034 	.word	0x20000034
 800a4f0:	0800ae75 	.word	0x0800ae75
 800a4f4:	0800ae82 	.word	0x0800ae82
 800a4f8:	0800aeb0 	.word	0x0800aeb0

0800a4fc <_close_r>:
 800a4fc:	b538      	push	{r3, r4, r5, lr}
 800a4fe:	4d06      	ldr	r5, [pc, #24]	; (800a518 <_close_r+0x1c>)
 800a500:	2300      	movs	r3, #0
 800a502:	4604      	mov	r4, r0
 800a504:	4608      	mov	r0, r1
 800a506:	602b      	str	r3, [r5, #0]
 800a508:	f7f8 fe3f 	bl	800318a <_close>
 800a50c:	1c43      	adds	r3, r0, #1
 800a50e:	d102      	bne.n	800a516 <_close_r+0x1a>
 800a510:	682b      	ldr	r3, [r5, #0]
 800a512:	b103      	cbz	r3, 800a516 <_close_r+0x1a>
 800a514:	6023      	str	r3, [r4, #0]
 800a516:	bd38      	pop	{r3, r4, r5, pc}
 800a518:	200006bc 	.word	0x200006bc

0800a51c <fiprintf>:
 800a51c:	b40e      	push	{r1, r2, r3}
 800a51e:	b503      	push	{r0, r1, lr}
 800a520:	4601      	mov	r1, r0
 800a522:	ab03      	add	r3, sp, #12
 800a524:	4805      	ldr	r0, [pc, #20]	; (800a53c <fiprintf+0x20>)
 800a526:	f853 2b04 	ldr.w	r2, [r3], #4
 800a52a:	6800      	ldr	r0, [r0, #0]
 800a52c:	9301      	str	r3, [sp, #4]
 800a52e:	f7ff fdf9 	bl	800a124 <_vfiprintf_r>
 800a532:	b002      	add	sp, #8
 800a534:	f85d eb04 	ldr.w	lr, [sp], #4
 800a538:	b003      	add	sp, #12
 800a53a:	4770      	bx	lr
 800a53c:	20000034 	.word	0x20000034

0800a540 <_fstat_r>:
 800a540:	b538      	push	{r3, r4, r5, lr}
 800a542:	4d07      	ldr	r5, [pc, #28]	; (800a560 <_fstat_r+0x20>)
 800a544:	2300      	movs	r3, #0
 800a546:	4604      	mov	r4, r0
 800a548:	4608      	mov	r0, r1
 800a54a:	4611      	mov	r1, r2
 800a54c:	602b      	str	r3, [r5, #0]
 800a54e:	f7f8 fe28 	bl	80031a2 <_fstat>
 800a552:	1c43      	adds	r3, r0, #1
 800a554:	d102      	bne.n	800a55c <_fstat_r+0x1c>
 800a556:	682b      	ldr	r3, [r5, #0]
 800a558:	b103      	cbz	r3, 800a55c <_fstat_r+0x1c>
 800a55a:	6023      	str	r3, [r4, #0]
 800a55c:	bd38      	pop	{r3, r4, r5, pc}
 800a55e:	bf00      	nop
 800a560:	200006bc 	.word	0x200006bc

0800a564 <_isatty_r>:
 800a564:	b538      	push	{r3, r4, r5, lr}
 800a566:	4d06      	ldr	r5, [pc, #24]	; (800a580 <_isatty_r+0x1c>)
 800a568:	2300      	movs	r3, #0
 800a56a:	4604      	mov	r4, r0
 800a56c:	4608      	mov	r0, r1
 800a56e:	602b      	str	r3, [r5, #0]
 800a570:	f7f8 fe27 	bl	80031c2 <_isatty>
 800a574:	1c43      	adds	r3, r0, #1
 800a576:	d102      	bne.n	800a57e <_isatty_r+0x1a>
 800a578:	682b      	ldr	r3, [r5, #0]
 800a57a:	b103      	cbz	r3, 800a57e <_isatty_r+0x1a>
 800a57c:	6023      	str	r3, [r4, #0]
 800a57e:	bd38      	pop	{r3, r4, r5, pc}
 800a580:	200006bc 	.word	0x200006bc

0800a584 <_lseek_r>:
 800a584:	b538      	push	{r3, r4, r5, lr}
 800a586:	4d07      	ldr	r5, [pc, #28]	; (800a5a4 <_lseek_r+0x20>)
 800a588:	4604      	mov	r4, r0
 800a58a:	4608      	mov	r0, r1
 800a58c:	4611      	mov	r1, r2
 800a58e:	2200      	movs	r2, #0
 800a590:	602a      	str	r2, [r5, #0]
 800a592:	461a      	mov	r2, r3
 800a594:	f7f8 fe20 	bl	80031d8 <_lseek>
 800a598:	1c43      	adds	r3, r0, #1
 800a59a:	d102      	bne.n	800a5a2 <_lseek_r+0x1e>
 800a59c:	682b      	ldr	r3, [r5, #0]
 800a59e:	b103      	cbz	r3, 800a5a2 <_lseek_r+0x1e>
 800a5a0:	6023      	str	r3, [r4, #0]
 800a5a2:	bd38      	pop	{r3, r4, r5, pc}
 800a5a4:	200006bc 	.word	0x200006bc

0800a5a8 <__ascii_mbtowc>:
 800a5a8:	b082      	sub	sp, #8
 800a5aa:	b901      	cbnz	r1, 800a5ae <__ascii_mbtowc+0x6>
 800a5ac:	a901      	add	r1, sp, #4
 800a5ae:	b142      	cbz	r2, 800a5c2 <__ascii_mbtowc+0x1a>
 800a5b0:	b14b      	cbz	r3, 800a5c6 <__ascii_mbtowc+0x1e>
 800a5b2:	7813      	ldrb	r3, [r2, #0]
 800a5b4:	600b      	str	r3, [r1, #0]
 800a5b6:	7812      	ldrb	r2, [r2, #0]
 800a5b8:	1e10      	subs	r0, r2, #0
 800a5ba:	bf18      	it	ne
 800a5bc:	2001      	movne	r0, #1
 800a5be:	b002      	add	sp, #8
 800a5c0:	4770      	bx	lr
 800a5c2:	4610      	mov	r0, r2
 800a5c4:	e7fb      	b.n	800a5be <__ascii_mbtowc+0x16>
 800a5c6:	f06f 0001 	mvn.w	r0, #1
 800a5ca:	e7f8      	b.n	800a5be <__ascii_mbtowc+0x16>

0800a5cc <_read_r>:
 800a5cc:	b538      	push	{r3, r4, r5, lr}
 800a5ce:	4d07      	ldr	r5, [pc, #28]	; (800a5ec <_read_r+0x20>)
 800a5d0:	4604      	mov	r4, r0
 800a5d2:	4608      	mov	r0, r1
 800a5d4:	4611      	mov	r1, r2
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	602a      	str	r2, [r5, #0]
 800a5da:	461a      	mov	r2, r3
 800a5dc:	f7f8 fd9c 	bl	8003118 <_read>
 800a5e0:	1c43      	adds	r3, r0, #1
 800a5e2:	d102      	bne.n	800a5ea <_read_r+0x1e>
 800a5e4:	682b      	ldr	r3, [r5, #0]
 800a5e6:	b103      	cbz	r3, 800a5ea <_read_r+0x1e>
 800a5e8:	6023      	str	r3, [r4, #0]
 800a5ea:	bd38      	pop	{r3, r4, r5, pc}
 800a5ec:	200006bc 	.word	0x200006bc

0800a5f0 <__ascii_wctomb>:
 800a5f0:	b149      	cbz	r1, 800a606 <__ascii_wctomb+0x16>
 800a5f2:	2aff      	cmp	r2, #255	; 0xff
 800a5f4:	bf85      	ittet	hi
 800a5f6:	238a      	movhi	r3, #138	; 0x8a
 800a5f8:	6003      	strhi	r3, [r0, #0]
 800a5fa:	700a      	strbls	r2, [r1, #0]
 800a5fc:	f04f 30ff 	movhi.w	r0, #4294967295
 800a600:	bf98      	it	ls
 800a602:	2001      	movls	r0, #1
 800a604:	4770      	bx	lr
 800a606:	4608      	mov	r0, r1
 800a608:	4770      	bx	lr

0800a60a <abort>:
 800a60a:	b508      	push	{r3, lr}
 800a60c:	2006      	movs	r0, #6
 800a60e:	f000 f82b 	bl	800a668 <raise>
 800a612:	2001      	movs	r0, #1
 800a614:	f7f8 fd76 	bl	8003104 <_exit>

0800a618 <_raise_r>:
 800a618:	291f      	cmp	r1, #31
 800a61a:	b538      	push	{r3, r4, r5, lr}
 800a61c:	4604      	mov	r4, r0
 800a61e:	460d      	mov	r5, r1
 800a620:	d904      	bls.n	800a62c <_raise_r+0x14>
 800a622:	2316      	movs	r3, #22
 800a624:	6003      	str	r3, [r0, #0]
 800a626:	f04f 30ff 	mov.w	r0, #4294967295
 800a62a:	bd38      	pop	{r3, r4, r5, pc}
 800a62c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a62e:	b112      	cbz	r2, 800a636 <_raise_r+0x1e>
 800a630:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a634:	b94b      	cbnz	r3, 800a64a <_raise_r+0x32>
 800a636:	4620      	mov	r0, r4
 800a638:	f000 f830 	bl	800a69c <_getpid_r>
 800a63c:	462a      	mov	r2, r5
 800a63e:	4601      	mov	r1, r0
 800a640:	4620      	mov	r0, r4
 800a642:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a646:	f000 b817 	b.w	800a678 <_kill_r>
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d00a      	beq.n	800a664 <_raise_r+0x4c>
 800a64e:	1c59      	adds	r1, r3, #1
 800a650:	d103      	bne.n	800a65a <_raise_r+0x42>
 800a652:	2316      	movs	r3, #22
 800a654:	6003      	str	r3, [r0, #0]
 800a656:	2001      	movs	r0, #1
 800a658:	e7e7      	b.n	800a62a <_raise_r+0x12>
 800a65a:	2400      	movs	r4, #0
 800a65c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a660:	4628      	mov	r0, r5
 800a662:	4798      	blx	r3
 800a664:	2000      	movs	r0, #0
 800a666:	e7e0      	b.n	800a62a <_raise_r+0x12>

0800a668 <raise>:
 800a668:	4b02      	ldr	r3, [pc, #8]	; (800a674 <raise+0xc>)
 800a66a:	4601      	mov	r1, r0
 800a66c:	6818      	ldr	r0, [r3, #0]
 800a66e:	f7ff bfd3 	b.w	800a618 <_raise_r>
 800a672:	bf00      	nop
 800a674:	20000034 	.word	0x20000034

0800a678 <_kill_r>:
 800a678:	b538      	push	{r3, r4, r5, lr}
 800a67a:	4d07      	ldr	r5, [pc, #28]	; (800a698 <_kill_r+0x20>)
 800a67c:	2300      	movs	r3, #0
 800a67e:	4604      	mov	r4, r0
 800a680:	4608      	mov	r0, r1
 800a682:	4611      	mov	r1, r2
 800a684:	602b      	str	r3, [r5, #0]
 800a686:	f7f8 fd2d 	bl	80030e4 <_kill>
 800a68a:	1c43      	adds	r3, r0, #1
 800a68c:	d102      	bne.n	800a694 <_kill_r+0x1c>
 800a68e:	682b      	ldr	r3, [r5, #0]
 800a690:	b103      	cbz	r3, 800a694 <_kill_r+0x1c>
 800a692:	6023      	str	r3, [r4, #0]
 800a694:	bd38      	pop	{r3, r4, r5, pc}
 800a696:	bf00      	nop
 800a698:	200006bc 	.word	0x200006bc

0800a69c <_getpid_r>:
 800a69c:	f7f8 bd1a 	b.w	80030d4 <_getpid>

0800a6a0 <_init>:
 800a6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6a2:	bf00      	nop
 800a6a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6a6:	bc08      	pop	{r3}
 800a6a8:	469e      	mov	lr, r3
 800a6aa:	4770      	bx	lr

0800a6ac <_fini>:
 800a6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ae:	bf00      	nop
 800a6b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6b2:	bc08      	pop	{r3}
 800a6b4:	469e      	mov	lr, r3
 800a6b6:	4770      	bx	lr
